<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>根据模板导出word并赋值</title>
      <link href="post/exportWord/"/>
      <url>post/exportWord/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>不知道大家有没有这样的需求，就是需要导出一个word按照我们的模板并在相应的地方填上对应的值，正好最近又这样的需求，这里记录一下轮子的使用代码，方便以后使用，下面直接上代码</p><h1 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h1><p>这里我使用的还是最普通的SpringBoot项目结构，结构如下</p><p><img src="https://gcore.jsdelivr.net/gh/code-anan/image/20220803144900.png" alt="image-20220803144853321"></p><p>模板带参为我们的模板代码，并且使用<code>&#123;&#123;&#125;&#125;</code>来占位我们要填充的值，如下<img src="https://gcore.jsdelivr.net/gh/code-anan/image/20220803145129.png" alt="image-20220803145129208"></p><p>比如我这里就只是要填这几个值，大家根据自己的需求更改</p><h1 id="需要的依赖"><a href="#需要的依赖" class="headerlink" title="需要的依赖"></a>需要的依赖</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.afterturn<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>easypoi-base<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.afterturn<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>easypoi-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.afterturn<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>easypoi-annotation<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这里我使用了mysql数据库和mybatis所以加上了他们的依赖</p><h1 id="业务代码"><a href="#业务代码" class="headerlink" title="业务代码"></a>业务代码</h1><h2 id="Controller层"><a href="#Controller层" class="headerlink" title="Controller层"></a>Controller层</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> MedicalRecordService medicalRecordService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/download&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">downloadMedicalRecord</span><span class="params">(String fixcode,HttpServletRequest request, HttpServletResponse response)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            medicalRecordService.downloadMedicalRecord(fixcode,request,response);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="comment">//这里大家根据自己的需求处理异常</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="service层"><a href="#service层" class="headerlink" title="service层"></a>service层</h2><p>定义接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MedicalRecordService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">downloadMedicalRecord</span><span class="params">(String fixcode, HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> IllegalAccessException, IOException</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MedicalRecordServiceImpl</span> <span class="keyword">implements</span> <span class="title">MedicalRecordService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> MedicalDao medicalDao;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">downloadMedicalRecord</span><span class="params">(String fixcode,HttpServletRequest request, HttpServletResponse response)</span></span>&#123;</span><br><span class="line">        Institution record = medicalDao.selectInsByFixCode(fixcode);</span><br><span class="line">        Map&lt;String,Object&gt; params = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        params.put(<span class="string">&quot;fixedName&quot;</span>,record.getFixedName());</span><br><span class="line">        params.put(<span class="string">&quot;fixCode&quot;</span>,record.getFixCode());</span><br><span class="line">        params.put(<span class="string">&quot;appId&quot;</span>,record.getAppId());</span><br><span class="line">        params.put(<span class="string">&quot;appKey&quot;</span>,record.getAppKey());</span><br><span class="line">        params.put(<span class="string">&quot;appPrvkey&quot;</span>,record.getAppPrvkey());</span><br><span class="line">        params.put(<span class="string">&quot;platPubKey&quot;</span>,record.getPlatPubKey());</span><br><span class="line">        File file = <span class="keyword">new</span> File(<span class="string">&quot;./模板带参.docx&quot;</span>);</span><br><span class="line">        ExportWord.exportWord(file,<span class="string">&quot;C:\\Users\\admin\\Desktop\\&quot;</span>,<span class="string">&quot;测试信息反馈表（&quot;</span>+record.getFixedName()+<span class="string">&quot;).docx&quot;</span>,params,request,response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Dao层"><a href="#Dao层" class="headerlink" title="Dao层"></a>Dao层</h2><p>接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MedicalDao</span> </span>&#123;</span><br><span class="line">    <span class="function">Institution <span class="title">selectInsByFixCode</span><span class="params">(String fixcode)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对应的xml(需要在配置文件中设置的路径下)</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.example.basic.dao.MedicalDao&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectInsByFixCode&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Institution&quot;</span>&gt;</span></span><br><span class="line">        select fixCode,fixedName,appId,appKey,appPrvkey,platPubKey from institution where fixCode=#&#123;fixcode&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="实体类"><a href="#实体类" class="headerlink" title="实体类"></a>实体类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Institution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String fixedName;</span><br><span class="line">    <span class="keyword">private</span> String fixCode;</span><br><span class="line">    <span class="keyword">private</span> String appId;</span><br><span class="line">    <span class="keyword">private</span> String appKey;</span><br><span class="line">    <span class="keyword">private</span> String appPrvkey;</span><br><span class="line">    <span class="keyword">private</span> String platPubKey;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getFixedName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> fixedName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setFixedName</span><span class="params">(String fixedName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.fixedName = fixedName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getFixCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> fixCode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setFixCode</span><span class="params">(String fixCode)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.fixCode = fixCode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getAppId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> appId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAppId</span><span class="params">(String appId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.appId = appId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getAppKey</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> appKey;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAppKey</span><span class="params">(String appKey)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.appKey = appKey;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getAppPrvkey</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> appPrvkey;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAppPrvkey</span><span class="params">(String appPrvkey)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.appPrvkey = appPrvkey;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPlatPubKey</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> platPubKey;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPlatPubKey</span><span class="params">(String platPubKey)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.platPubKey = platPubKey;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实体类的属性一般都和数据库保持一致</p><h2 id="工具类"><a href="#工具类" class="headerlink" title="工具类"></a>工具类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cn.afterturn.easypoi.word.WordExportUtil;</span><br><span class="line"><span class="keyword">import</span> org.apache.poi.xwpf.usermodel.XWPFDocument;</span><br><span class="line"><span class="keyword">import</span> org.springframework.util.Assert;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStream;</span><br><span class="line"><span class="keyword">import</span> java.net.URLEncoder;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExportWord</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 导出word</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;第一步生成替换后的word文件，只支持docx&lt;/p&gt;</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;第二步下载生成的文件&lt;/p&gt;</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;第三步删除生成的临时文件&lt;/p&gt;</span></span><br><span class="line"><span class="comment">     * 模版变量中变量格式：&#123;&#123;foo&#125;&#125;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> templatePath word模板地址</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> temDir 生成临时文件存放地址</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> fileName 文件名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> params 替换的参数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request HttpServletRequest</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> response HttpServletResponse</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">exportWord</span><span class="params">(File templatePath, String temDir, String fileName, Map&lt;String, Object&gt; params, HttpServletRequest request, HttpServletResponse response)</span> </span>&#123;</span><br><span class="line">        Assert.notNull(templatePath,<span class="string">&quot;file&quot;</span>);</span><br><span class="line">        Assert.notNull(temDir,<span class="string">&quot;static&quot;</span>);</span><br><span class="line">        Assert.notNull(fileName,<span class="string">&quot;导出文件名不能为空&quot;</span>);</span><br><span class="line">        Assert.isTrue(fileName.endsWith(<span class="string">&quot;.docx&quot;</span>),<span class="string">&quot;word导出请使用docx格式&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (!temDir.endsWith(<span class="string">&quot;/&quot;</span>))&#123;</span><br><span class="line">            temDir = temDir + File.separator;</span><br><span class="line">        &#125;</span><br><span class="line">        File dir = <span class="keyword">new</span> File(temDir);</span><br><span class="line">        <span class="keyword">if</span> (!dir.exists()) &#123;</span><br><span class="line">            dir.mkdirs();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            String userAgent = request.getHeader(<span class="string">&quot;user-agent&quot;</span>).toLowerCase();</span><br><span class="line">            <span class="keyword">if</span> (userAgent.contains(<span class="string">&quot;msie&quot;</span>) || userAgent.contains(<span class="string">&quot;like gecko&quot;</span>)) &#123;</span><br><span class="line">                fileName = URLEncoder.encode(fileName, <span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                fileName = <span class="keyword">new</span> String(fileName.getBytes(<span class="string">&quot;utf-8&quot;</span>), <span class="string">&quot;ISO-8859-1&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            XWPFDocument doc = WordExportUtil.exportWord07(String.valueOf(templatePath), params);</span><br><span class="line">            String tmpPath = temDir + fileName;</span><br><span class="line">            FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(tmpPath);</span><br><span class="line">            doc.write(fos);</span><br><span class="line">            <span class="comment">// 设置强制下载不打开</span></span><br><span class="line">            response.setContentType(<span class="string">&quot;application/force-download&quot;</span>);</span><br><span class="line">            <span class="comment">// 设置文件名</span></span><br><span class="line">            response.addHeader(<span class="string">&quot;Content-Disposition&quot;</span>, <span class="string">&quot;attachment;fileName=&quot;</span> + fileName);</span><br><span class="line">            OutputStream out = response.getOutputStream();</span><br><span class="line">            doc.write(out);</span><br><span class="line">            out.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">finally</span> &#123;</span><br><span class="line">            delFileWord(temDir,fileName);<span class="comment">//这一步看具体需求，要不要删</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除临时生成的文件</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">delFileWord</span><span class="params">(String filePath, String fileName)</span></span>&#123;</span><br><span class="line">        File file =<span class="keyword">new</span> File(filePath+fileName);</span><br><span class="line">        File file1 =<span class="keyword">new</span> File(filePath);</span><br><span class="line">        file.delete();</span><br><span class="line">        file1.delete();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此功能实现的关键类</p><h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">spring.datasource.driver-class-name</span>=<span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="meta">spring.datasource.username</span>=<span class="string">root</span></span><br><span class="line"><span class="meta">spring.datasource.password</span>=<span class="string">233</span></span><br><span class="line"><span class="meta">spring.datasource.url</span>=<span class="string">jdbc:mysql://localhost:3306/test?serverTimezone=UTC</span></span><br><span class="line"><span class="comment">##声明mybatis实体类的别名以及mapper的位置</span></span><br><span class="line"><span class="meta">mybatis.type-aliases-package</span>=<span class="string">com.example.basic.model</span></span><br><span class="line"><span class="meta">mybatis.mapper-locations</span>=<span class="string">classpath:mybatis/mapper/*.xml</span></span><br></pre></td></tr></table></figure><h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><p>打开<a href="http://localhost:8080/download?fixcode=123">http://localhost:8080/download?fixcode=123</a></p><p>得到导出的word如下<img src="https://gcore.jsdelivr.net/gh/code-anan/image/20220803154253.png"></p><p>到这里就大功告成啦(<em>^▽^</em>)</p>]]></content>
      
      
      <categories>
          
          <category> 记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
            <tag> word </tag>
            
            <tag> Mybatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis学习</title>
      <link href="post/rediskeys/"/>
      <url>post/rediskeys/</url>
      
        <content type="html"><![CDATA[<h1 id="Nosql概述"><a href="#Nosql概述" class="headerlink" title="Nosql概述"></a>Nosql概述</h1><h2 id="产生原因"><a href="#产生原因" class="headerlink" title="产生原因"></a>产生原因</h2><p>用户的个人信息、社交网络、地理位置、用户自己产生的数据用户胡日志产生爆发式增长、这时候就需要使用nosql数据库，他可以很好的处理上面的情况</p><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>NoSQL=Not Only Sql(不仅仅是sql)  泛指非关系型数据库</p><h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><ol><li><p>方便扩展（数据之前没有关系、好扩展）</p></li><li><p>大数据量高性能（Redis一秒写入把万次 读十一万次）</p></li><li><p>数据类型是多样型的（不需要事先设计数据库，随取随用）</p></li><li><p>传统的RDBMS和Nosql</p></li></ol><h1 id="Redis概述"><a href="#Redis概述" class="headerlink" title="Redis概述"></a>Redis概述</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>Redis（Remote Dictionary Server )，即远程字典服务，是一个开源的使用ANSI <a href="https://baike.baidu.com/item/C%E8%AF%AD%E8%A8%80">C语言</a>编写、支持网络、可基于内存亦可持久化的日志型、Key-Value<a href="https://baike.baidu.com/item/%E6%95%B0%E6%8D%AE%E5%BA%93/103728">数据库</a>，并提供多种语言的API。是当下最热门的nosql数据 称之为结构化数据库</p><blockquote><p>Redis可以做什么</p></blockquote><ol><li>内存存储、持久化，内存中是断电即失、所以说持久化很重要</li><li>效率高，可以用于高速缓存</li><li>发布订阅系统</li><li>地图信息分析</li><li>计时器 计数器</li></ol><blockquote><p>特性</p></blockquote><ol><li>多样的数据类型</li><li>持久化</li><li>集群</li><li>事务</li></ol><p>Redis推荐在linux服务器上搭建、windows版本的已经停止更新</p><h2 id="windows安装"><a href="#windows安装" class="headerlink" title="windows安装"></a>windows安装</h2><p>首先先进行<a href="https://github.com/MicrosoftArchive/redis/releases">下载</a></p><p><img src="https://gcore.jsdelivr.net/gh/code-anan/image/20220618160926.png"></p><p>然后解压到本地即可</p><p><img src="https://gcore.jsdelivr.net/gh/code-anan/image/20220618161242.png"></p><p>双击<code>redis-server.exe</code>即可本地启动，这表示启动了redis服务</p><p>然后双击<code>redis-cli.exe</code>可以登录客户端（上面的服务不要关闭）</p><p><img src="https://gcore.jsdelivr.net/gh/code-anan/image/20220618161819.png"></p><p>ping是测试有没有连接成功 下面就是对他的赋值取值简单操作</p><h2 id="Linux安装"><a href="#Linux安装" class="headerlink" title="Linux安装"></a>Linux安装</h2><p>首先下载的话直接到<a href="https://www.redis.net.cn/">Redis中文网</a>即可<img src="https://gcore.jsdelivr.net/gh/code-anan/image/20220618162710.png"></p><p>安装的话 直接看pdf文档即可<a href="https://www.aliyundrive.com/s/tX5SmNKbAwP">https://www.aliyundrive.com/s/tX5SmNKbAwP</a> 有非常详细的步骤</p><p>常用的命令有<code> tar zxvf /root/redis-5.0.8.tar.gz -C ./</code>解压到当前路径</p><p><code>make &amp;&amp; make install</code>编译并安装、默认安装路径<code>usr/local/bin</code></p><p>redis安装目录utils目录下<code>sh install_server.sh</code>进行启动或者<code>redsi-server redis配置文件</code>(需要修改daemonize 为yes)启动Redis</p><p><code>redis -cli</code>使用客户端进行连接  <code>systemctl status redis_6379.service</code>查看启动的结果</p><p><code>systemctl restart  redis_6379.service</code>重新启动</p><h2 id="redis-benchmark"><a href="#redis-benchmark" class="headerlink" title="redis-benchmark"></a>redis-benchmark</h2><p>redis自带的测试工具，目录在<code>usr/local/bin</code>  ，可以自定义参数 了解一下即可<img src="https://gcore.jsdelivr.net/gh/code-anan/image/20220619112235.png" alt="image-20220619112228814"></p><h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><p>首先redis默认的是有16个数据库（配置文件中可以查看），使用select进行切换，例如我想切换到第四个数据库</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>[<span class="number">6</span>]<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="number">3</span></span><br><span class="line">OK</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>[<span class="number">3</span>]<span class="operator">&gt;</span> dbsize</span><br><span class="line">(<span class="type">integer</span>) <span class="number">0</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>[<span class="number">3</span>]<span class="operator">&gt;</span> <span class="keyword">set</span> name lwl</span><br><span class="line">OK</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>[<span class="number">3</span>]<span class="operator">&gt;</span> <span class="keyword">get</span> name</span><br><span class="line">&quot;lwl&quot;</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>[<span class="number">3</span>]<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="number">6</span></span><br><span class="line">OK</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>[<span class="number">6</span>]<span class="operator">&gt;</span> dbsize</span><br><span class="line">(<span class="type">integer</span>) <span class="number">0</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>[<span class="number">6</span>]<span class="operator">&gt;</span> </span><br></pre></td></tr></table></figure><p>可以看到不同的数据库之间不能共享数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>[<span class="number">3</span>]<span class="operator">&gt;</span> <span class="keyword">set</span> password <span class="number">233</span></span><br><span class="line">OK</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>[<span class="number">3</span>]<span class="operator">&gt;</span> keys <span class="operator">*</span></span><br><span class="line"><span class="number">1</span>) &quot;password&quot;</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>[<span class="number">3</span>]<span class="operator">&gt;</span> flushdb</span><br><span class="line">OK</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>[<span class="number">3</span>]<span class="operator">&gt;</span> keys <span class="operator">*</span></span><br><span class="line">(<span class="keyword">empty</span> list <span class="keyword">or</span> <span class="keyword">set</span>)</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>[<span class="number">3</span>]<span class="operator">&gt;</span> </span><br></pre></td></tr></table></figure><p><code>flushdb</code>清空当前数据库</p><p><code>flushall</code>清空全部数据库</p><blockquote><p>Redis是单线程的！</p></blockquote><p>redis基于内存操作，cpu不是redis性能瓶颈而是机器的内存和网络贷款并且是使用单线程的；</p><p>核心：redis是将所有的数据全部放在内存中的  所以使用单线程去操作效率就是最高的 多线程cpu上下文会进行切换这是一种耗时的操作，对于内存系统来说 没有上下文切换效率就是最高的 多次读写都在一个cpu上</p><h1 id="五大数据类型"><a href="#五大数据类型" class="headerlink" title="五大数据类型"></a>五大数据类型</h1><p>Redis可以用作数据库、缓存和消息中间件；</p><h2 id="Redis-key"><a href="#Redis-key" class="headerlink" title="Redis-key"></a>Redis-key</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>[<span class="number">3</span>]<span class="operator">&gt;</span> <span class="keyword">set</span> name lwl</span><br><span class="line">OK</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>[<span class="number">3</span>]<span class="operator">&gt;</span> keys <span class="operator">*</span></span><br><span class="line"><span class="number">1</span>) &quot;name&quot;</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>[<span class="number">3</span>]<span class="operator">&gt;</span> <span class="keyword">exists</span> name</span><br><span class="line">(<span class="type">integer</span>) <span class="number">1</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>[<span class="number">3</span>]<span class="operator">&gt;</span> move name <span class="number">2</span></span><br><span class="line">(<span class="type">integer</span>) <span class="number">1</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>[<span class="number">3</span>]<span class="operator">&gt;</span> <span class="keyword">exists</span> name</span><br><span class="line">(<span class="type">integer</span>) <span class="number">0</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>[<span class="number">3</span>]<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="number">2</span></span><br><span class="line">OK</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>[<span class="number">2</span>]<span class="operator">&gt;</span> keys <span class="operator">*</span></span><br><span class="line"><span class="number">1</span>) &quot;name&quot;</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>[<span class="number">2</span>]<span class="operator">&gt;</span> <span class="keyword">get</span> name</span><br><span class="line">&quot;lwl&quot;</span><br></pre></td></tr></table></figure><p><code>exists key</code>是否存在某个key</p><p><code>move key db</code>将某个key移动到别的数据库里</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>[<span class="number">2</span>]<span class="operator">&gt;</span> EXPIRE name <span class="number">5</span></span><br><span class="line">(<span class="type">integer</span>) <span class="number">1</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>[<span class="number">2</span>]<span class="operator">&gt;</span> <span class="keyword">get</span> name</span><br><span class="line">&quot;lwl&quot;</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>[<span class="number">2</span>]<span class="operator">&gt;</span> <span class="keyword">get</span> name</span><br><span class="line">(nil)</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>[<span class="number">2</span>]<span class="operator">&gt;</span> ttl name</span><br><span class="line">(<span class="type">integer</span>) <span class="number">-2</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>[<span class="number">2</span>]<span class="operator">&gt;</span> del name</span><br><span class="line">(<span class="type">integer</span>) <span class="number">1</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>[<span class="number">2</span>]<span class="operator">&gt;</span> <span class="keyword">set</span> name lwl</span><br><span class="line">OK</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>[<span class="number">2</span>]<span class="operator">&gt;</span> type name</span><br><span class="line">string</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>EXPIRE key seconds</code>给某个key设置过期时间 单位为秒</p><p><code>ttl key</code>可以查看剩余有效的时间</p><p><code>del key</code>删除某个key</p><p><code>type key</code>查看key的数据类型</p><p>其他更多命令可以点击这里<a href="https://www.redis.net.cn/order/">redis命令手册</a>查看</p><h2 id="String类型"><a href="#String类型" class="headerlink" title="String类型"></a>String类型</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span><span class="operator">&gt;</span> <span class="keyword">set</span> name lwl</span><br><span class="line">OK</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span><span class="operator">&gt;</span> APPEND name dog</span><br><span class="line">(<span class="type">integer</span>) <span class="number">6</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span><span class="operator">&gt;</span> <span class="keyword">get</span> name</span><br><span class="line">&quot;lwldog&quot;</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span><span class="operator">&gt;</span> strlen name</span><br><span class="line">(<span class="type">integer</span>) <span class="number">6</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span><span class="operator">&gt;</span> APPEND name1 zhangsan</span><br><span class="line">(<span class="type">integer</span>) <span class="number">8</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span><span class="operator">&gt;</span> <span class="keyword">get</span> name1</span><br><span class="line">&quot;zhangsan&quot;</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span><span class="operator">&gt;</span> keys <span class="operator">*</span></span><br><span class="line"><span class="number">1</span>) &quot;name1&quot;</span><br><span class="line"><span class="number">2</span>) &quot;name&quot;</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span><span class="operator">&gt;</span> </span><br></pre></td></tr></table></figure><p><code>append key value</code>key存在时往后追加、key不存在时相当于set一个key</p><p><code>strlen key</code>获取某个key的长度</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span><span class="operator">&gt;</span> <span class="keyword">set</span> <span class="keyword">view</span> <span class="number">0</span></span><br><span class="line">OK</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span><span class="operator">&gt;</span> incr <span class="keyword">view</span></span><br><span class="line">(<span class="type">integer</span>) <span class="number">1</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span><span class="operator">&gt;</span> incrby <span class="keyword">view</span> <span class="number">2</span></span><br><span class="line">(<span class="type">integer</span>) <span class="number">3</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span><span class="operator">&gt;</span> <span class="keyword">get</span> <span class="keyword">view</span></span><br><span class="line">&quot;3&quot;</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span><span class="operator">&gt;</span> decr <span class="keyword">view</span></span><br><span class="line">(<span class="type">integer</span>) <span class="number">2</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span><span class="operator">&gt;</span> DECRBY <span class="keyword">view</span> <span class="number">2</span></span><br><span class="line">(<span class="type">integer</span>) <span class="number">0</span></span><br></pre></td></tr></table></figure><p><code>incr key</code>某个key每次增加1    </p><p><code>incrby key nums</code>某个key每次增加nums</p><p><code>decr key</code>某个key每次减少1    </p><p><code>decrby key nums</code>某个key每次减少nums</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span><span class="operator">&gt;</span> <span class="keyword">set</span> key1 hello</span><br><span class="line">OK</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span><span class="operator">&gt;</span> getrange key1 <span class="number">0</span> <span class="number">2</span></span><br><span class="line">&quot;hel&quot;</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span><span class="operator">&gt;</span> getrange key1 <span class="number">0</span> <span class="number">-1</span></span><br><span class="line">&quot;hello&quot;</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span><span class="operator">&gt;</span> SETRANGE key1 <span class="number">1</span> xx</span><br><span class="line">(<span class="type">integer</span>) <span class="number">5</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span><span class="operator">&gt;</span> <span class="keyword">get</span> key1</span><br><span class="line">&quot;hxxlo&quot;</span><br></pre></td></tr></table></figure><p><code>getrange key</code>类似于java的substrig</p><p>-1表示倒数第一个 所以可以截取全部</p><p><code>setrange key offset value</code>替换操作，表示从第几位开始替换为某个值</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span><span class="operator">&gt;</span> setex key2 <span class="number">10</span> hello</span><br><span class="line">OK</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span><span class="operator">&gt;</span> ttl key2</span><br><span class="line">(<span class="type">integer</span>) <span class="number">3</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span><span class="operator">&gt;</span> <span class="keyword">get</span> key2</span><br><span class="line">(nil)</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span><span class="operator">&gt;</span> setnx key2 hello</span><br><span class="line">(<span class="type">integer</span>) <span class="number">1</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span><span class="operator">&gt;</span> <span class="keyword">get</span> key2</span><br><span class="line">&quot;hello&quot;</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span><span class="operator">&gt;</span> </span><br></pre></td></tr></table></figure><p><code>setex key seconds value</code>表示设置key的值以及过期时间(set with expire)</p><p><code>setnx key value</code>表示key不存在时才会设置key值（分布式锁中常使用）(set if not exist)</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span><span class="operator">&gt;</span> mset k1 v1 k2 v2 k3 v3</span><br><span class="line">OK</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span><span class="operator">&gt;</span> mget k1 k2 k3</span><br><span class="line"><span class="number">1</span>) &quot;v1&quot;</span><br><span class="line"><span class="number">2</span>) &quot;v2&quot;</span><br><span class="line"><span class="number">3</span>) &quot;v3&quot;</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span><span class="operator">&gt;</span> msetnx k1 v1 k4 v4</span><br><span class="line">(<span class="type">integer</span>) <span class="number">0</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span><span class="operator">&gt;</span> <span class="keyword">get</span> v4</span><br><span class="line">(nil)</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span><span class="operator">&gt;</span> getset redis monogocb</span><br><span class="line">(nil)</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span><span class="operator">&gt;</span> <span class="keyword">get</span> redis</span><br><span class="line">&quot;monogocb&quot;</span><br></pre></td></tr></table></figure><p>批量赋值取值<code>mset</code>和<code>mget</code></p><p><code>msetnx</code>跟上面一样表示不存在时才创建，但同时他是个原子性操作k1以及存在了 所以直接不执行</p><p><code>getset</code>先get再执行set， get的值为空也一样会set操作</p><p>String的使用场景：value除了是我们的字符串还可以是我们的数字</p><p>计数器、统计多单位的数量、粉丝数、对象缓存存储！</p><h2 id="List类型"><a href="#List类型" class="headerlink" title="List类型"></a>List类型</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span><span class="operator">&gt;</span> lpush list <span class="number">1</span>  #从左边插入第一个值</span><br><span class="line">(<span class="type">integer</span>) <span class="number">1</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span><span class="operator">&gt;</span> lpush list <span class="number">2</span></span><br><span class="line">(<span class="type">integer</span>) <span class="number">2</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span><span class="operator">&gt;</span> lpush list <span class="number">3</span></span><br><span class="line">(<span class="type">integer</span>) <span class="number">3</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span><span class="operator">&gt;</span> lrange list <span class="number">0</span> <span class="number">-1</span></span><br><span class="line"><span class="number">1</span>) &quot;3&quot;</span><br><span class="line"><span class="number">2</span>) &quot;2&quot;</span><br><span class="line"><span class="number">3</span>) &quot;1&quot;</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span><span class="operator">&gt;</span> rpush list <span class="number">4</span>  #从右边插入第一个值</span><br><span class="line">(<span class="type">integer</span>) <span class="number">4</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span><span class="operator">&gt;</span> lrange list <span class="number">0</span> <span class="number">-1</span></span><br><span class="line"><span class="number">1</span>) &quot;3&quot;</span><br><span class="line"><span class="number">2</span>) &quot;2&quot;</span><br><span class="line"><span class="number">3</span>) &quot;1&quot;</span><br><span class="line"><span class="number">4</span>) &quot;4&quot;</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span><span class="operator">&gt;</span> lpop list  #移除list第一个元素</span><br><span class="line">&quot;3&quot;</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span><span class="operator">&gt;</span> rpop list  #移除list最后一个元素</span><br><span class="line">&quot;4&quot;</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span><span class="operator">&gt;</span> lrange list <span class="number">0</span> <span class="number">-1</span></span><br><span class="line"><span class="number">1</span>) &quot;2&quot;</span><br><span class="line"><span class="number">2</span>) &quot;1&quot;</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span><span class="operator">&gt;</span> lindex list <span class="number">0</span>  #通过下标获取list某一个值</span><br><span class="line">&quot;2&quot;</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span><span class="operator">&gt;</span> llen list   #获取list的长度</span><br><span class="line">(<span class="type">integer</span>) <span class="number">2</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span><span class="operator">&gt;</span> lrange list <span class="number">0</span> <span class="number">-1</span></span><br><span class="line"><span class="number">1</span>) &quot;three&quot;</span><br><span class="line"><span class="number">2</span>) &quot;three&quot;</span><br><span class="line"><span class="number">3</span>) &quot;two&quot;</span><br><span class="line"><span class="number">4</span>) &quot;one&quot;</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span><span class="operator">&gt;</span> lrem list <span class="number">2</span> three</span><br><span class="line">(<span class="type">integer</span>) <span class="number">2</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span><span class="operator">&gt;</span> lrange list <span class="number">0</span> <span class="number">-1</span></span><br><span class="line"><span class="number">1</span>) &quot;two&quot;</span><br><span class="line"><span class="number">2</span>) &quot;one&quot;</span><br></pre></td></tr></table></figure><p><code>lrem key count value</code>从某个list移除count个值为value的值，按照从上往下的顺序移除（可以理解成堆栈）</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span><span class="operator">&gt;</span> rpush mylist hello</span><br><span class="line">(<span class="type">integer</span>) <span class="number">1</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span><span class="operator">&gt;</span> rpush mylist hello1</span><br><span class="line">(<span class="type">integer</span>) <span class="number">2</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span><span class="operator">&gt;</span> rpush mylist hello2</span><br><span class="line">(<span class="type">integer</span>) <span class="number">3</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span><span class="operator">&gt;</span> rpush mylist hello3</span><br><span class="line">(<span class="type">integer</span>) <span class="number">4</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span><span class="operator">&gt;</span> ltrim mylist <span class="number">1</span> <span class="number">2</span></span><br><span class="line">OK</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span><span class="operator">&gt;</span> lrange mylist <span class="number">0</span> <span class="number">-1</span></span><br><span class="line"><span class="number">1</span>) &quot;hello1&quot;</span><br><span class="line"><span class="number">2</span>) &quot;hello2&quot;</span><br></pre></td></tr></table></figure><p><code>ltrim list start stop</code>从起始结束位置删除list中的元素</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span><span class="operator">&gt;</span> rpush mylist hello</span><br><span class="line">(<span class="type">integer</span>) <span class="number">1</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span><span class="operator">&gt;</span> rpush mylist hello1</span><br><span class="line">(<span class="type">integer</span>) <span class="number">2</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span><span class="operator">&gt;</span> rpush mylist hello2</span><br><span class="line">(<span class="type">integer</span>) <span class="number">3</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span><span class="operator">&gt;</span> rpoplpush mylist otherlist</span><br><span class="line">&quot;hello2&quot;</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span><span class="operator">&gt;</span> lrange mylist <span class="number">0</span> <span class="number">-1</span></span><br><span class="line"><span class="number">1</span>) &quot;hello&quot;</span><br><span class="line"><span class="number">2</span>) &quot;hello1&quot;</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span><span class="operator">&gt;</span> lrange otherlist <span class="number">0</span> <span class="number">-1</span></span><br><span class="line"><span class="number">1</span>) &quot;hello2&quot;</span><br></pre></td></tr></table></figure><p><code>rpoplpush list1 list2</code>移除list1中的最后一个元素并添加到list2中</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span><span class="operator">&gt;</span> lpush list item1 item2</span><br><span class="line">(<span class="type">integer</span>) <span class="number">2</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span><span class="operator">&gt;</span> lrange list <span class="number">0</span> <span class="number">-1</span></span><br><span class="line"><span class="number">1</span>) &quot;item2&quot;</span><br><span class="line"><span class="number">2</span>) &quot;item1&quot;</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span><span class="operator">&gt;</span> lset list <span class="number">0</span> item3</span><br><span class="line">OK</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span><span class="operator">&gt;</span> lrange list <span class="number">0</span> <span class="number">-1</span></span><br><span class="line"><span class="number">1</span>) &quot;item3&quot;</span><br><span class="line"><span class="number">2</span>) &quot;item1&quot;</span><br></pre></td></tr></table></figure><p><code>lset list start value</code>更新list中下表为start的值为value</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span><span class="operator">&gt;</span> lrange list <span class="number">0</span> <span class="number">-1</span></span><br><span class="line"><span class="number">1</span>) &quot;item3&quot;</span><br><span class="line"><span class="number">2</span>) &quot;item1&quot;</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span><span class="operator">&gt;</span> LINSERT list before item3 item4</span><br><span class="line">(<span class="type">integer</span>) <span class="number">3</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span><span class="operator">&gt;</span> lrange list <span class="number">0</span> <span class="number">-1</span></span><br><span class="line"><span class="number">1</span>) &quot;item4&quot;</span><br><span class="line"><span class="number">2</span>) &quot;item3&quot;</span><br><span class="line"><span class="number">3</span>) &quot;item1&quot;</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span><span class="operator">&gt;</span> LINSERT list after item3 item2</span><br><span class="line">(<span class="type">integer</span>) <span class="number">4</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span><span class="operator">&gt;</span> lrange list <span class="number">0</span> <span class="number">-1</span></span><br><span class="line"><span class="number">1</span>) &quot;item4&quot;</span><br><span class="line"><span class="number">2</span>) &quot;item3&quot;</span><br><span class="line"><span class="number">3</span>) &quot;item2&quot;</span><br><span class="line"><span class="number">4</span>) &quot;item1&quot;</span><br></pre></td></tr></table></figure><p><code>linsert list before|after pivot value</code>元素pivot前面before或者后面after插入一个元素值为value</p><blockquote><p>小结：</p><p>​        list本质是一个链表，左右都可以插入</p><p>​        在两边插入或者改动值 效率最高 中间元素 相对来说效率低一点</p></blockquote><h2 id="Set（无序集合）"><a href="#Set（无序集合）" class="headerlink" title="Set（无序集合）"></a>Set（无序集合）</h2><p>set中的值不能重复</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span><span class="operator">&gt;</span> sadd myset &quot;member1&quot;  #往集合中添加元素</span><br><span class="line">(<span class="type">integer</span>) <span class="number">1</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span><span class="operator">&gt;</span> sadd myset &quot;member2&quot;</span><br><span class="line">(<span class="type">integer</span>) <span class="number">1</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span><span class="operator">&gt;</span> sadd myset &quot;member3&quot;</span><br><span class="line">(<span class="type">integer</span>) <span class="number">1</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span><span class="operator">&gt;</span> smembers myset  # 查看指定<span class="keyword">set</span>的所有元素</span><br><span class="line"><span class="number">1</span>) &quot;member3&quot;</span><br><span class="line"><span class="number">2</span>) &quot;member1&quot;</span><br><span class="line"><span class="number">3</span>) &quot;member2&quot;</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span><span class="operator">&gt;</span> sadd myset &quot;member3&quot;</span><br><span class="line">(<span class="type">integer</span>) <span class="number">0</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span><span class="operator">&gt;</span> smembers myset</span><br><span class="line"><span class="number">1</span>) &quot;member3&quot;</span><br><span class="line"><span class="number">2</span>) &quot;member1&quot;</span><br><span class="line"><span class="number">3</span>) &quot;member2&quot;</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span><span class="operator">&gt;</span> SISMEMBER myset member2  # 判断元素是否在<span class="keyword">set</span>中</span><br><span class="line">(<span class="type">integer</span>) <span class="number">1</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span><span class="operator">&gt;</span> scard myset  # 查看<span class="keyword">set</span>集合中的元素个数</span><br><span class="line">(<span class="type">integer</span>) <span class="number">3</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span><span class="operator">&gt;</span> srem myset member2  # 移除某个元素</span><br><span class="line">(<span class="type">integer</span>) <span class="number">1</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span><span class="operator">&gt;</span> smembers myset</span><br><span class="line"><span class="number">1</span>) &quot;member3&quot;</span><br><span class="line"><span class="number">2</span>) &quot;member1&quot;</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span><span class="operator">&gt;</span> SRANDMEMBER myset  # 随机选出一个元素</span><br><span class="line">&quot;member3&quot;</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span><span class="operator">&gt;</span> SRANDMEMBER myset <span class="number">2</span> # 随机选出二个元素</span><br><span class="line"><span class="number">1</span>) &quot;member3&quot;</span><br><span class="line"><span class="number">2</span>) &quot;member1&quot;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span><span class="operator">&gt;</span> SMEMBERS myset</span><br><span class="line"><span class="number">1</span>) &quot;member3&quot;</span><br><span class="line"><span class="number">2</span>) &quot;member1&quot;</span><br><span class="line"><span class="number">3</span>) &quot;lala&quot;</span><br><span class="line"><span class="number">4</span>) &quot;hello&quot;</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span><span class="operator">&gt;</span> spop myset <span class="number">2</span></span><br><span class="line"><span class="number">1</span>) &quot;lala&quot;</span><br><span class="line"><span class="number">2</span>) &quot;hello&quot;</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span><span class="operator">&gt;</span> SMEMBERS myset</span><br><span class="line"><span class="number">1</span>) &quot;member3&quot;</span><br><span class="line"><span class="number">2</span>) &quot;member1&quot;</span><br></pre></td></tr></table></figure><p><code>spop key count</code>随机弹出key集合中的count个元素</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span><span class="operator">&gt;</span> SMEMBERS myset</span><br><span class="line"><span class="number">1</span>) &quot;member3&quot;</span><br><span class="line"><span class="number">2</span>) &quot;member1&quot;</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span><span class="operator">&gt;</span> SMOVE myset myset2 member3</span><br><span class="line">(<span class="type">integer</span>) <span class="number">1</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span><span class="operator">&gt;</span> smembers myset2</span><br><span class="line"><span class="number">1</span>) &quot;member3&quot;</span><br></pre></td></tr></table></figure><p><code>smove source target member</code>将source集合中的member元素移动到target集合中</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span><span class="operator">&gt;</span> sadd set1 a</span><br><span class="line">(<span class="type">integer</span>) <span class="number">1</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span><span class="operator">&gt;</span> sadd set1 b</span><br><span class="line">(<span class="type">integer</span>) <span class="number">1</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span><span class="operator">&gt;</span> sadd set1 c</span><br><span class="line">(<span class="type">integer</span>) <span class="number">1</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span><span class="operator">&gt;</span> sadd set2 c</span><br><span class="line">(<span class="type">integer</span>) <span class="number">1</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span><span class="operator">&gt;</span> sadd set2 d</span><br><span class="line">(<span class="type">integer</span>) <span class="number">1</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span><span class="operator">&gt;</span> sadd set2 e</span><br><span class="line">(<span class="type">integer</span>) <span class="number">1</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span><span class="operator">&gt;</span> sdiff set1 set2</span><br><span class="line"><span class="number">1</span>) &quot;b&quot;</span><br><span class="line"><span class="number">2</span>) &quot;a&quot;</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span><span class="operator">&gt;</span> sinter set1 set2</span><br><span class="line"><span class="number">1</span>) &quot;c&quot;</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span><span class="operator">&gt;</span> sunion set1 set2</span><br><span class="line"><span class="number">1</span>) &quot;b&quot;</span><br><span class="line"><span class="number">2</span>) &quot;a&quot;</span><br><span class="line"><span class="number">3</span>) &quot;c&quot;</span><br><span class="line"><span class="number">4</span>) &quot;d&quot;</span><br><span class="line"><span class="number">5</span>) &quot;e&quot;</span><br></pre></td></tr></table></figure><p>分别表示差集 交集和并集  一眼就能看出来了</p><h2 id="Hash（集合）"><a href="#Hash（集合）" class="headerlink" title="Hash（集合）"></a>Hash（集合）</h2><p>Map集合，他的值是一个键值对的集合，key-map</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span><span class="operator">&gt;</span> hset myhash name zhangsan</span><br><span class="line">(<span class="type">integer</span>) <span class="number">1</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span><span class="operator">&gt;</span> hget myhash name</span><br><span class="line">&quot;zhangsan&quot;</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span><span class="operator">&gt;</span> hmset myhash name zhangsan age <span class="number">18</span></span><br><span class="line">OK</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span><span class="operator">&gt;</span> hmget myhash name age</span><br><span class="line"><span class="number">1</span>) &quot;zhangsan&quot;</span><br><span class="line"><span class="number">2</span>) &quot;18&quot;</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span><span class="operator">&gt;</span> hgetall myhash</span><br><span class="line"><span class="number">1</span>) &quot;name&quot;</span><br><span class="line"><span class="number">2</span>) &quot;zhangsan&quot;</span><br><span class="line"><span class="number">3</span>) &quot;age&quot;</span><br><span class="line"><span class="number">4</span>) &quot;18&quot;</span><br></pre></td></tr></table></figure><p>跟String相似 只是value是一个key-value类型 这里多了一个hgetall 也是很清晰</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span><span class="operator">&gt;</span> hdel myhash name</span><br><span class="line">(<span class="type">integer</span>) <span class="number">1</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span><span class="operator">&gt;</span> hgetall myhash</span><br><span class="line"><span class="number">1</span>) &quot;age&quot;</span><br><span class="line"><span class="number">2</span>) &quot;18&quot;</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span><span class="operator">&gt;</span> hlen myhash</span><br><span class="line">(<span class="type">integer</span>) <span class="number">1</span></span><br></pre></td></tr></table></figure><p>删除某个值和查看元素个数</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span><span class="operator">&gt;</span> HEXISTS myhash name</span><br><span class="line">(<span class="type">integer</span>) <span class="number">0</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span><span class="operator">&gt;</span> HEXISTS myhash age</span><br><span class="line">(<span class="type">integer</span>) <span class="number">1</span></span><br></pre></td></tr></table></figure><p>判断hash某个元素的key是否存在</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span><span class="operator">&gt;</span> hkeys myhash</span><br><span class="line"><span class="number">1</span>) &quot;age&quot;</span><br><span class="line"><span class="number">2</span>) &quot;name&quot;</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span><span class="operator">&gt;</span> HVALS myhash</span><br><span class="line"><span class="number">1</span>) &quot;18&quot;</span><br><span class="line"><span class="number">2</span>) &quot;lwl&quot;</span><br></pre></td></tr></table></figure><p>获取所有的key和value值</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span><span class="operator">&gt;</span> hincrby myhash age <span class="number">2</span></span><br><span class="line">(<span class="type">integer</span>) <span class="number">20</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span><span class="operator">&gt;</span> hsetnx myhash name lwl2</span><br><span class="line">(<span class="type">integer</span>) <span class="number">0</span></span><br></pre></td></tr></table></figure><p>同样和String类似的还有指定增量 如果有值就不更新的操作 类别String就可以 </p><p>Hash更适合对象的存储</p><h2 id="Zset-有序集合"><a href="#Zset-有序集合" class="headerlink" title="Zset(有序集合)"></a>Zset(有序集合)</h2><p>在set的基础上，增加一个排序的值</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span><span class="operator">&gt;</span> zadd salary <span class="number">5000</span> zhangsan</span><br><span class="line">(<span class="type">integer</span>) <span class="number">1</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span><span class="operator">&gt;</span> zadd salary <span class="number">6500</span> lisi</span><br><span class="line">(<span class="type">integer</span>) <span class="number">1</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span><span class="operator">&gt;</span> zadd salary <span class="number">5500</span> wangwu</span><br><span class="line">(<span class="type">integer</span>) <span class="number">1</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span><span class="operator">&gt;</span> zrangebyscore salary <span class="operator">-</span>inf <span class="operator">+</span>inf</span><br><span class="line"><span class="number">1</span>) &quot;zhangsan&quot;</span><br><span class="line"><span class="number">2</span>) &quot;wangwu&quot;</span><br><span class="line"><span class="number">3</span>) &quot;lisi&quot;</span><br></pre></td></tr></table></figure><p><code>zrangebyscore set start stop </code>按照score（添加元素的第三项）在start到stop范围内的排序</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span><span class="operator">&gt;</span> zrange myset <span class="number">0</span> <span class="number">-1</span></span><br><span class="line"><span class="number">1</span>) &quot;xiaohong&quot;</span><br><span class="line"><span class="number">2</span>) &quot;xiaoming&quot;</span><br><span class="line"><span class="number">3</span>) &quot;xiaolan&quot;</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span><span class="operator">&gt;</span> ZRANGEBYSCORE myset <span class="number">60</span> <span class="number">90</span></span><br><span class="line"><span class="number">1</span>) &quot;xiaoming&quot;</span><br><span class="line"><span class="number">2</span>) &quot;xiaolan&quot;</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span><span class="operator">&gt;</span> ZRANGEBYSCORE myset <span class="operator">-</span>inf <span class="operator">+</span>inf withscores</span><br><span class="line"><span class="number">1</span>) &quot;xiaohong&quot;</span><br><span class="line"><span class="number">2</span>) &quot;50&quot;</span><br><span class="line"><span class="number">3</span>) &quot;xiaoming&quot;</span><br><span class="line"><span class="number">4</span>) &quot;60&quot;</span><br><span class="line"><span class="number">5</span>) &quot;xiaolan&quot;</span><br><span class="line"><span class="number">6</span>) &quot;70&quot;</span><br></pre></td></tr></table></figure><p><code>withscores</code>排序并且携带成绩值</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span><span class="operator">&gt;</span> zrevrange myset <span class="number">0</span> <span class="number">-1</span></span><br><span class="line"><span class="number">1</span>) &quot;xiaolan&quot;</span><br><span class="line"><span class="number">2</span>) &quot;xiaoming&quot;</span><br><span class="line"><span class="number">3</span>) &quot;xiaohong&quot;</span><br></pre></td></tr></table></figure><p>降序排列<code>zrevrange</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span><span class="operator">&gt;</span> zrange myset <span class="number">0</span> <span class="number">-1</span></span><br><span class="line"><span class="number">1</span>) &quot;xiaohong&quot;</span><br><span class="line"><span class="number">2</span>) &quot;xiaoming&quot;</span><br><span class="line"><span class="number">3</span>) &quot;xiaolan&quot;</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span><span class="operator">&gt;</span> zrem myset xiaohong</span><br><span class="line">(<span class="type">integer</span>) <span class="number">1</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span><span class="operator">&gt;</span> zcard myset</span><br><span class="line">(<span class="type">integer</span>) <span class="number">2</span></span><br></pre></td></tr></table></figure><p><code>zrem</code>移除某个元素，以及查看集合中的元素的个数</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span><span class="operator">&gt;</span> zcount myset <span class="number">20</span> <span class="number">90</span></span><br><span class="line">(<span class="type">integer</span>) <span class="number">2</span></span><br></pre></td></tr></table></figure><p><code>zcount myset min max</code>统计myset集合中score的值再min和max之间的个数，其余的API在有需要的时候进行查看使用</p><h1 id="三种特殊类型"><a href="#三种特殊类型" class="headerlink" title="三种特殊类型"></a>三种特殊类型</h1><h2 id="geospatial-地理位置"><a href="#geospatial-地理位置" class="headerlink" title="geospatial(地理位置)"></a>geospatial(地理位置)</h2><p>这个功能可以推算地理位置信息、两地距离；</p><p>在这里可以进行<a href="http://www.jsons.cn/lngcode/">城市经纬度查询-国内城市经度纬度在线查询工具 (jsons.cn)</a></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span><span class="operator">&gt;</span> geoadd china:city <span class="number">116.40</span> <span class="number">39.90</span> beijing</span><br><span class="line">(<span class="type">integer</span>) <span class="number">1</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span><span class="operator">&gt;</span> geoadd china:city <span class="number">121.47</span> <span class="number">31.23</span> shanghai</span><br><span class="line">(<span class="type">integer</span>) <span class="number">1</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span><span class="operator">&gt;</span> geoadd china:city <span class="number">106.50</span> <span class="number">29.53</span> chongqing</span><br><span class="line">(<span class="type">integer</span>) <span class="number">1</span></span><br></pre></td></tr></table></figure><p>key为china：city ，value分别为经度 纬度 名称</p><p>有效的经度值为-180到180度 纬度为-85到85度 超过这两个值的话就会报错</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span><span class="operator">&gt;</span> geopos china:city beijing</span><br><span class="line"><span class="number">1</span>) <span class="number">1</span>) &quot;116.39999896287918091&quot;</span><br><span class="line">   <span class="number">2</span>) &quot;39.90000009167092543&quot;</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span><span class="operator">&gt;</span> geopos china:city shanghai</span><br><span class="line"><span class="number">1</span>) <span class="number">1</span>) &quot;121.47000163793563843&quot;</span><br><span class="line">   <span class="number">2</span>) &quot;31.22999903975783553&quot;</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span><span class="operator">&gt;</span> </span><br></pre></td></tr></table></figure><p>geopos获取某个member的经纬度</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span><span class="operator">&gt;</span> geodist china:city beijing shanghai m</span><br><span class="line">&quot;1067378.7564&quot;</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span><span class="operator">&gt;</span> geodist china:city beijing shanghai km</span><br><span class="line">&quot;1067.3788&quot;</span><br></pre></td></tr></table></figure><p><code>geodist key member1 member2 unit</code>获取member</p><p>1和member2之间的距离，单位为unit可以写m（米）、km（千米）</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span><span class="operator">&gt;</span> georadius china:city <span class="number">130</span> <span class="number">30</span> <span class="number">1000</span> km</span><br><span class="line"><span class="number">1</span>) &quot;shanghai&quot;</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span><span class="operator">&gt;</span> georadius china:city <span class="number">130</span> <span class="number">30</span> <span class="number">10000</span> km</span><br><span class="line"><span class="number">1</span>) &quot;chongqing&quot;</span><br><span class="line"><span class="number">2</span>) &quot;shanghai&quot;</span><br><span class="line"><span class="number">3</span>) &quot;beijing&quot;</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span><span class="operator">&gt;</span> georadius china:city <span class="number">130</span> <span class="number">30</span> <span class="number">10000</span> km withdist withcoord count <span class="number">1</span></span><br><span class="line"><span class="number">1</span>) <span class="number">1</span>) &quot;shanghai&quot;</span><br><span class="line">   <span class="number">2</span>) &quot;827.6683&quot;</span><br><span class="line">   <span class="number">3</span>) <span class="number">1</span>) &quot;121.47000163793563843&quot;</span><br><span class="line">      <span class="number">2</span>) &quot;31.22999903975783553&quot;</span><br></pre></td></tr></table></figure><p><code>georadius key longitude latitude value unit</code>获取在以经纬度为中心半径value+unit内的元素名称,withdist表示距离，withcoord显示经纬度count显示出来的数量</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span><span class="operator">&gt;</span> GEORADIUSBYMEMBER china:city shanghai <span class="number">10000</span> km</span><br><span class="line"><span class="number">1</span>) &quot;chongqing&quot;</span><br><span class="line"><span class="number">2</span>) &quot;shanghai&quot;</span><br><span class="line"><span class="number">3</span>) &quot;beijing&quot;</span><br></pre></td></tr></table></figure><p><code>groradiusbymember key member radius unit </code>以member为中心寻找半径为radius单位为unit的元素</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span><span class="operator">&gt;</span> geohash china:city beijing shanghai</span><br><span class="line"><span class="number">1</span>) &quot;wx4fbxxfke0&quot;</span><br><span class="line"><span class="number">2</span>) &quot;wtw3sj5zbj0&quot;</span><br></pre></td></tr></table></figure><p><code>geohash key member</code>返回一个或多个元素的geohash表示，即将二维的经纬度转换成一维的字符串 如果这两个字符串越接近 表示距离越近</p><p>geo底层的实现原理就是zset 可以使用zset操作geo，例如</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span><span class="operator">&gt;</span> zrange china:city <span class="number">0</span> <span class="number">-1</span></span><br><span class="line"><span class="number">1</span>) &quot;chongqing&quot;</span><br><span class="line"><span class="number">2</span>) &quot;shanghai&quot;</span><br><span class="line"><span class="number">3</span>) &quot;beijing&quot;</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span><span class="operator">&gt;</span> zrem china:city beijing</span><br><span class="line">(<span class="type">integer</span>) <span class="number">1</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span><span class="operator">&gt;</span> zrange china:city <span class="number">0</span> <span class="number">-1</span></span><br><span class="line"><span class="number">1</span>) &quot;chongqing&quot;</span><br><span class="line"><span class="number">2</span>) &quot;shanghai&quot;</span><br></pre></td></tr></table></figure><h2 id="Hyperloglog-基数统计"><a href="#Hyperloglog-基数统计" class="headerlink" title="Hyperloglog(基数统计)"></a>Hyperloglog(基数统计)</h2><p>网站的uv（一个人访问一个网站多次、但还是算作一个人）传统的方式使用set但会占用内存</p><p>优点：占用内存是固定的，2^64不同的元素的技术，只需要占用12kb内存。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span><span class="operator">&gt;</span> pfadd key1 a b c d e f g h j k l</span><br><span class="line">(<span class="type">integer</span>) <span class="number">1</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span><span class="operator">&gt;</span> pfcount key1</span><br><span class="line">(<span class="type">integer</span>) <span class="number">11</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span><span class="operator">&gt;</span> pfadd key2 h j k l w r o x</span><br><span class="line">(<span class="type">integer</span>) <span class="number">1</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span><span class="operator">&gt;</span> pfcount key2</span><br><span class="line">(<span class="type">integer</span>) <span class="number">8</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span><span class="operator">&gt;</span> pfmerge key3 key1 key2</span><br><span class="line">OK</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span><span class="operator">&gt;</span> pfcount key3</span><br><span class="line">(<span class="type">integer</span>) <span class="number">15</span></span><br></pre></td></tr></table></figure><p><code>pfadd key member</code>向key中添加一个或多个元素（不会添加重复元素）</p><p><code>pfcount key</code>查看key中拥有的个数</p><p><code>pfmerge key3 key1 key2</code>合并key1和key2为key3（重复的元素只会统计一次）</p><h2 id="Bitmap（位存储）"><a href="#Bitmap（位存储）" class="headerlink" title="Bitmap（位存储）"></a>Bitmap（位存储）</h2><p>Bitmap位图，是一种数据结构 都是操作二进制位来进行记录，就只有0和1两个状态</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span><span class="operator">&gt;</span> setbit sign <span class="number">0</span> <span class="number">1</span></span><br><span class="line">(<span class="type">integer</span>) <span class="number">0</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span><span class="operator">&gt;</span> setbit sign <span class="number">1</span> <span class="number">0</span></span><br><span class="line">(<span class="type">integer</span>) <span class="number">0</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span><span class="operator">&gt;</span> setbit sign <span class="number">2</span> <span class="number">1</span></span><br><span class="line">(<span class="type">integer</span>) <span class="number">0</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span><span class="operator">&gt;</span> setbit sign <span class="number">3</span> <span class="number">1</span></span><br><span class="line">(<span class="type">integer</span>) <span class="number">0</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span><span class="operator">&gt;</span> setbit sign <span class="number">4</span> <span class="number">0</span></span><br><span class="line">(<span class="type">integer</span>) <span class="number">0</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span><span class="operator">&gt;</span> setbit sign <span class="number">5</span> <span class="number">1</span></span><br><span class="line">(<span class="type">integer</span>) <span class="number">0</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span><span class="operator">&gt;</span> setbit sign <span class="number">6</span> <span class="number">0</span></span><br><span class="line">(<span class="type">integer</span>) <span class="number">0</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span><span class="operator">&gt;</span> getbit sign <span class="number">0</span></span><br><span class="line">(<span class="type">integer</span>) <span class="number">1</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span><span class="operator">&gt;</span> getbit sign <span class="number">1</span></span><br><span class="line">(<span class="type">integer</span>) <span class="number">0</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span><span class="operator">&gt;</span> bitcount sign</span><br><span class="line">(<span class="type">integer</span>) <span class="number">4</span></span><br></pre></td></tr></table></figure><p><code>setbit key offset value</code>value的值只能为0或者1 上面表示周一到周日打卡情况 1表示打卡0表示未打开 <code>getbit key offset</code>查看某一天的打卡情况<code>bitcount key[start stop]</code>查看打卡情况(可以设置开始结束时间)返回4表示打卡了4天</p><h1 id="Redis的事务"><a href="#Redis的事务" class="headerlink" title="Redis的事务"></a>Redis的事务</h1><p>Redis单条命令是保存原子性的 但是事务不保证原子性！</p><p>Redis事务没有隔离级别的概念，所有的命令在事务中，并没有直接被执行，只有发起执行命令的时候才会执行；</p><p>Redis 的事务：</p><ol><li><p>开启事务(multi)</p></li><li><p>命令入队</p></li><li><p>执行事务(exec)</p><blockquote><p>正常执行事务</p></blockquote></li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span><span class="operator">&gt;</span> multi</span><br><span class="line">OK</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span><span class="operator">&gt;</span> <span class="keyword">set</span> name zhangsan</span><br><span class="line">QUEUED</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span><span class="operator">&gt;</span> <span class="keyword">set</span> password <span class="number">123</span></span><br><span class="line">QUEUED</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span><span class="operator">&gt;</span> <span class="keyword">get</span> name</span><br><span class="line">QUEUED</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span><span class="operator">&gt;</span> <span class="keyword">get</span> password</span><br><span class="line">QUEUED</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span><span class="operator">&gt;</span> <span class="keyword">exec</span></span><br><span class="line"><span class="number">1</span>) OK</span><br><span class="line"><span class="number">2</span>) OK</span><br><span class="line"><span class="number">3</span>) &quot;zhangsan&quot;</span><br><span class="line"><span class="number">4</span>) &quot;123&quot;</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span><span class="operator">&gt;</span> </span><br></pre></td></tr></table></figure><blockquote><p>放弃事务(discard)</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span><span class="operator">&gt;</span> multi</span><br><span class="line">OK</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span><span class="operator">&gt;</span> <span class="keyword">set</span> key4 key4</span><br><span class="line">QUEUED</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span><span class="operator">&gt;</span> discard</span><br><span class="line">OK</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span><span class="operator">&gt;</span> <span class="keyword">get</span> key4</span><br><span class="line">(nil)</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span><span class="operator">&gt;</span> </span><br></pre></td></tr></table></figure><blockquote><p>编译时异常</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span><span class="operator">&gt;</span> multi</span><br><span class="line">OK</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span><span class="operator">&gt;</span> <span class="keyword">set</span> name zhangsan</span><br><span class="line">QUEUED</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span><span class="operator">&gt;</span> getset password</span><br><span class="line">(error) ERR wrong number <span class="keyword">of</span> arguments <span class="keyword">for</span> <span class="string">&#x27;getset&#x27;</span> command</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span><span class="operator">&gt;</span> <span class="keyword">set</span> password <span class="number">123</span></span><br><span class="line">QUEUED</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span><span class="operator">&gt;</span> <span class="keyword">exec</span></span><br><span class="line">(error) EXECABORT Transaction discarded because <span class="keyword">of</span> previous errors.</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span><span class="operator">&gt;</span> <span class="keyword">get</span> password</span><br><span class="line">(nil)</span><br></pre></td></tr></table></figure><p>当发生编译时异常 比如语法错误 整个事务都不会执行</p><blockquote><p>运行时异常</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span><span class="operator">&gt;</span> multi</span><br><span class="line">OK</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span><span class="operator">&gt;</span> <span class="keyword">set</span> name zhangsan</span><br><span class="line">QUEUED</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span><span class="operator">&gt;</span> incr name</span><br><span class="line">QUEUED</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span><span class="operator">&gt;</span> <span class="keyword">exec</span></span><br><span class="line"><span class="number">1</span>) OK</span><br><span class="line"><span class="number">2</span>) (error) ERR <span class="keyword">value</span> <span class="keyword">is</span> <span class="keyword">not</span> an <span class="type">integer</span> <span class="keyword">or</span> <span class="keyword">out</span> <span class="keyword">of</span> <span class="keyword">range</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span><span class="operator">&gt;</span> <span class="keyword">get</span> name</span><br><span class="line">&quot;zhangsan&quot;</span><br></pre></td></tr></table></figure><p>当发生运行时异常时 执行成功的事务会执行</p><h3 id="悲观锁"><a href="#悲观锁" class="headerlink" title="悲观锁"></a>悲观锁</h3><p>认为什么时候都会出现问题，无论做什么都会加锁</p><h3 id="乐观锁"><a href="#乐观锁" class="headerlink" title="乐观锁"></a>乐观锁</h3><p>很乐观，认为什么时候都不会出问题，所以不会上锁，更新数据的时候判断，在此期间是否有人修改过数据，获取version， 更新的时候比较version</p><blockquote><p>Redis监视测试</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span><span class="operator">&gt;</span> keys <span class="operator">*</span></span><br><span class="line"><span class="number">1</span>) &quot;money&quot;</span><br><span class="line"><span class="number">2</span>) &quot;out&quot;</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span><span class="operator">&gt;</span> watch money #使用watch实现乐观锁</span><br><span class="line">OK</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span><span class="operator">&gt;</span> multi</span><br><span class="line">OK</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span><span class="operator">&gt;</span> decrby money <span class="number">20</span></span><br><span class="line">QUEUED</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span><span class="operator">&gt;</span> incrby <span class="keyword">out</span> <span class="number">20</span></span><br><span class="line">QUEUED</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span><span class="operator">&gt;</span> <span class="keyword">exec</span></span><br><span class="line"><span class="number">1</span>) (<span class="type">integer</span>) <span class="number">80</span></span><br><span class="line"><span class="number">2</span>) (<span class="type">integer</span>) <span class="number">20</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span><span class="operator">&gt;</span> unwatch  #解除监视</span><br><span class="line">OK</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span><span class="operator">&gt;</span> watch money #重新监视  获取最新的值</span><br><span class="line">OK</span><br></pre></td></tr></table></figure><p>如果执行过程 另外一个线程修改了我们的值 这个时候 事务就会执行失败</p><p>执行失败 我们先<code>unwatch</code>解锁，重新监视（获取最新的值）</p><h1 id="Jedis"><a href="#Jedis" class="headerlink" title="Jedis"></a>Jedis</h1><p>使用java来操作redis</p><blockquote><p>Jedis是Redis官方推荐的java连接开发工具，使用java操作redis中间件</p></blockquote><p>添加依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>redis.clients<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jedis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后把本地的redis打开<img src="https://gcore.jsdelivr.net/gh/code-anan/image/20220705204450.png" alt="image-20220705204443601"></p><p>基本的使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Jedis jedis = <span class="keyword">new</span> Jedis(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">6379</span>);</span><br><span class="line">        System.out.println(jedis.ping());</span><br><span class="line">        jedis.flushDB();</span><br><span class="line">        jedis.exists(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">        jedis.set(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;zhangsan&quot;</span>);</span><br><span class="line">        jedis.set(<span class="string">&quot;password&quot;</span>,<span class="string">&quot;123&quot;</span>);</span><br><span class="line">        String name = jedis.get(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">        System.out.println(name);</span><br><span class="line">        Set&lt;String&gt; keys = jedis.keys(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">        System.out.println(keys);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>输入结果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">PONG</span><br><span class="line">zhangsan</span><br><span class="line">[password, name]</span><br></pre></td></tr></table></figure><p>可以看到这些语法和我们的linux上操作的是一模一样的  对照着上面的语法使用即可</p><h1 id="SpringBoot集成Redis"><a href="#SpringBoot集成Redis" class="headerlink" title="SpringBoot集成Redis"></a>SpringBoot集成Redis</h1><p>SpringBoot2.x之后 jedis被替换成了letture</p><p>jedis：采用的直连方式 多个线程操作不安全 如果想要避免不安全 需要使用jedis pool连接池！BIO</p><p>lettuce：采用netty，实例可以在多个线程中进行共享，不存在线程不安全的情况，可以减少线程数据 NIO模式</p><p>首先还是导入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后是配置连接在<code>RedisAutoConfiguration</code>类中的<code>RedisProperties.class</code>可以看到有哪些配置项</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">spring.redis.host</span>=<span class="string">127.0.0.1</span></span><br><span class="line"><span class="meta">spring.redis.database</span>=<span class="string">0</span></span><br><span class="line"><span class="meta">spring.redis.port</span>=<span class="string">6379</span></span><br></pre></td></tr></table></figure><p>最后简单的测试一下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        redisTemplate.opsForValue().set(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;lwl&quot;</span>);</span><br><span class="line">        redisTemplate.opsForValue().set(<span class="string">&quot;password&quot;</span>,<span class="string">&quot;233&quot;</span>);</span><br><span class="line">        Object name = redisTemplate.opsForValue().get(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">        Object password = redisTemplate.opsForValue().get(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">        System.out.println(name);</span><br><span class="line">        System.out.println(password);</span><br><span class="line">        redisTemplate.getConnectionFactory().getConnection().flushDb();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><img src="https://gcore.jsdelivr.net/gh/code-anan/image/20220705214040.png" alt="image-20220705214040298"></p><p>opsfor可以获取不同的类型进行操作，然而在实际开发中我们不会使用自带的RedisTemplate,所以我们需要自己定义一个Template来使用</p><h2 id="自定义RedisTemplate"><a href="#自定义RedisTemplate" class="headerlink" title="自定义RedisTemplate"></a>自定义RedisTemplate</h2><p>首先，redis存放的对象必须要是经过序列化的 不序列话的话会直接报错<img src="https://gcore.jsdelivr.net/gh/code-anan/image/20220706205735.png" alt="image-20220706205728339"></p><p>实现<code>Serializable</code>接口之后就会发现不报错了 但是他默认的jdk序列化 我们想要自定义的序列化方式 就需要自定义我们的template，下面是一个最常见的模板可以涵盖大部分应用场景</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisConfig</span> </span>&#123;</span><br><span class="line">    <span class="comment">//固定模板</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;all&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RedisTemplate&lt;String, Object&gt; <span class="title">redisTemplate</span><span class="params">(RedisConnectionFactory factory)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//我们为方便开发，一般直接使用&lt;String, Object&gt;</span></span><br><span class="line">        RedisTemplate&lt;String, Object&gt; template = <span class="keyword">new</span> RedisTemplate();</span><br><span class="line">        template.setConnectionFactory(factory);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//Json序列化配置</span></span><br><span class="line">        Jackson2JsonRedisSerializer jackson2JsonRedisSerializer = <span class="keyword">new</span> Jackson2JsonRedisSerializer(Object.class);</span><br><span class="line">        ObjectMapper om = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">        om.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);</span><br><span class="line">        om.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);</span><br><span class="line">        jackson2JsonRedisSerializer.setObjectMapper(om);</span><br><span class="line">        <span class="comment">//string的序列化</span></span><br><span class="line">        StringRedisSerializer stringRedisSerializer = <span class="keyword">new</span> StringRedisSerializer();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//Key采用String的序列化方式</span></span><br><span class="line">        template.setKeySerializer(stringRedisSerializer);</span><br><span class="line">        <span class="comment">//hash的key也采用String的序列化方式</span></span><br><span class="line">        template.setHashKeySerializer(stringRedisSerializer);</span><br><span class="line">        <span class="comment">//value序列化方式采用jackson</span></span><br><span class="line">        template.setValueSerializer(jackson2JsonRedisSerializer);</span><br><span class="line">        <span class="comment">//hash的value序列化方式采用jackson</span></span><br><span class="line">        template.setHashValueSerializer(jackson2JsonRedisSerializer);</span><br><span class="line">        template.afterPropertiesSet();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> template;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以及常用的自定义工具类，操作redis更加的方便快捷</p><h2 id="Redis的工具类"><a href="#Redis的工具类" class="headerlink" title="Redis的工具类"></a>Redis的工具类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisUtils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate&lt;String, Object&gt; redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">double</span> size = Math.pow(<span class="number">2</span>, <span class="number">32</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 写入缓存</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> offset 位 8Bit=1Byte</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">setBit</span><span class="params">(String key, <span class="keyword">long</span> offset, <span class="keyword">boolean</span> isShow)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> result = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ValueOperations&lt;String, Object&gt; operations = redisTemplate.opsForValue();</span><br><span class="line">            operations.setBit(key, offset, isShow);</span><br><span class="line">            result = <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 写入缓存</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> offset</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">getBit</span><span class="params">(String key, <span class="keyword">long</span> offset)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> result = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ValueOperations&lt;String, Object&gt; operations = redisTemplate.opsForValue();</span><br><span class="line">            result = operations.getBit(key, offset);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 写入缓存</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">set</span><span class="params">(<span class="keyword">final</span> String key, Object value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> result = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ValueOperations&lt;String, Object&gt; operations = redisTemplate.opsForValue();</span><br><span class="line">            operations.set(key, value);</span><br><span class="line">            result = <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 写入缓存设置失效时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">set</span><span class="params">(<span class="keyword">final</span> String key, Object value, Long expireTime)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> result = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ValueOperations&lt;String, Object&gt; operations = redisTemplate.opsForValue();</span><br><span class="line">            operations.set(key, value);</span><br><span class="line">            redisTemplate.expire(key, expireTime, TimeUnit.SECONDS);</span><br><span class="line">            result = <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 批量删除对应的value</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> keys</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">(<span class="keyword">final</span> String... keys)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (String key : keys) &#123;</span><br><span class="line">            remove(key);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除对应的value</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">(<span class="keyword">final</span> String key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (exists(key)) &#123;</span><br><span class="line">            redisTemplate.delete(key);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断缓存中是否有对应的value</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">exists</span><span class="params">(<span class="keyword">final</span> String key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.hasKey(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 读取缓存</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">get</span><span class="params">(<span class="keyword">final</span> String key)</span> </span>&#123;</span><br><span class="line">        Object result = <span class="keyword">null</span>;</span><br><span class="line">        ValueOperations&lt;String, Object&gt; operations = redisTemplate.opsForValue();</span><br><span class="line">        result = operations.get(key);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 哈希 添加</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> hashKey</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hmSet</span><span class="params">(String key, Object hashKey, Object value)</span> </span>&#123;</span><br><span class="line">        HashOperations&lt;String, Object, Object&gt; hash = redisTemplate.opsForHash();</span><br><span class="line">        hash.put(key, hashKey, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 哈希获取数据</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> hashKey</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">hmGet</span><span class="params">(String key, Object hashKey)</span> </span>&#123;</span><br><span class="line">        HashOperations&lt;String, Object, Object&gt; hash = redisTemplate.opsForHash();</span><br><span class="line">        <span class="keyword">return</span> hash.get(key, hashKey);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 列表添加</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> k</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> v</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">lPush</span><span class="params">(String k, Object v)</span> </span>&#123;</span><br><span class="line">        ListOperations&lt;String, Object&gt; list = redisTemplate.opsForList();</span><br><span class="line">        list.rightPush(k, v);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 列表获取</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> k</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> l</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> l1</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Object&gt; <span class="title">lRange</span><span class="params">(String k, <span class="keyword">long</span> l, <span class="keyword">long</span> l1)</span> </span>&#123;</span><br><span class="line">        ListOperations&lt;String, Object&gt; list = redisTemplate.opsForList();</span><br><span class="line">        <span class="keyword">return</span> list.range(k, l, l1);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 集合添加</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(String key, Object value)</span> </span>&#123;</span><br><span class="line">        SetOperations&lt;String, Object&gt; set = redisTemplate.opsForSet();</span><br><span class="line">        set.add(key, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 集合获取</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Set&lt;Object&gt; <span class="title">setMembers</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        SetOperations&lt;String, Object&gt; set = redisTemplate.opsForSet();</span><br><span class="line">        <span class="keyword">return</span> set.members(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 有序集合添加</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> scoure</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">zAdd</span><span class="params">(String key, Object value, <span class="keyword">double</span> scoure)</span> </span>&#123;</span><br><span class="line">        ZSetOperations&lt;String, Object&gt; zset = redisTemplate.opsForZSet();</span><br><span class="line">        zset.add(key, value, scoure);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 有序集合获取</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> scoure</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> scoure1</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Set&lt;Object&gt; <span class="title">rangeByScore</span><span class="params">(String key, <span class="keyword">double</span> scoure, <span class="keyword">double</span> scoure1)</span> </span>&#123;</span><br><span class="line">        ZSetOperations&lt;String, Object&gt; zset = redisTemplate.opsForZSet();</span><br><span class="line">        redisTemplate.opsForValue();</span><br><span class="line">        <span class="keyword">return</span> zset.rangeByScore(key, scoure, scoure1);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//第一次加载的时候将数据加载到redis中</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveDataToRedis</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">double</span> index = Math.abs(name.hashCode() % size);</span><br><span class="line">        <span class="keyword">long</span> indexLong = <span class="keyword">new</span> Double(index).longValue();</span><br><span class="line">        <span class="keyword">boolean</span> availableUsers = setBit(<span class="string">&quot;availableUsers&quot;</span>, indexLong, <span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//第一次加载的时候将数据加载到redis中</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">getDataToRedis</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">double</span> index = Math.abs(name.hashCode() % size);</span><br><span class="line">        <span class="keyword">long</span> indexLong = <span class="keyword">new</span> Double(index).longValue();</span><br><span class="line">        <span class="keyword">return</span> getBit(<span class="string">&quot;availableUsers&quot;</span>, indexLong);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 有序集合获取排名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 集合名称</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">zRank</span><span class="params">(String key, Object value)</span> </span>&#123;</span><br><span class="line">        ZSetOperations&lt;String, Object&gt; zset = redisTemplate.opsForZSet();</span><br><span class="line">        <span class="keyword">return</span> zset.rank(key,value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 有序集合获取排名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Set&lt;ZSetOperations.TypedTuple&lt;Object&gt;&gt; zRankWithScore(String key, <span class="keyword">long</span> start,<span class="keyword">long</span> end) &#123;</span><br><span class="line">        ZSetOperations&lt;String, Object&gt; zset = redisTemplate.opsForZSet();</span><br><span class="line">        Set&lt;ZSetOperations.TypedTuple&lt;Object&gt;&gt; ret = zset.rangeWithScores(key,start,end);</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 有序集合添加</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Double <span class="title">zSetScore</span><span class="params">(String key, Object value)</span> </span>&#123;</span><br><span class="line">        ZSetOperations&lt;String, Object&gt; zset = redisTemplate.opsForZSet();</span><br><span class="line">        <span class="keyword">return</span> zset.score(key,value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 有序集合添加分数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> scoure</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">incrementScore</span><span class="params">(String key, Object value, <span class="keyword">double</span> scoure)</span> </span>&#123;</span><br><span class="line">        ZSetOperations&lt;String, Object&gt; zset = redisTemplate.opsForZSet();</span><br><span class="line">        zset.incrementScore(key, value, scoure);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 有序集合获取排名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Set&lt;ZSetOperations.TypedTuple&lt;Object&gt;&gt; reverseZRankWithScore(String key, <span class="keyword">long</span> start,<span class="keyword">long</span> end) &#123;</span><br><span class="line">        ZSetOperations&lt;String, Object&gt; zset = redisTemplate.opsForZSet();</span><br><span class="line">        Set&lt;ZSetOperations.TypedTuple&lt;Object&gt;&gt; ret = zset.reverseRangeByScoreWithScores(key,start,end);</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 有序集合获取排名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Set&lt;ZSetOperations.TypedTuple&lt;Object&gt;&gt; reverseZRankWithRank(String key, <span class="keyword">long</span> start, <span class="keyword">long</span> end) &#123;</span><br><span class="line">        ZSetOperations&lt;String, Object&gt; zset = redisTemplate.opsForZSet();</span><br><span class="line">        Set&lt;ZSetOperations.TypedTuple&lt;Object&gt;&gt; ret = zset.reverseRangeWithScores(key, start, end);</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用变得非常的便捷</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">   <span class="keyword">private</span> RedisUtils redisUtils;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span></span>&#123;</span><br><span class="line">           redisUtils.set(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;lwl&quot;</span>);</span><br><span class="line">           System.out.println(redisUtils.get(<span class="string">&quot;name&quot;</span>));</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h1 id="Redis配置文件"><a href="#Redis配置文件" class="headerlink" title="Redis配置文件"></a>Redis配置文件</h1><blockquote><p>网络配置</p></blockquote><p><img src="https://gcore.jsdelivr.net/gh/code-anan/image/20220708204209.png" alt="image-20220708204201970"></p><p>默认的127.0.0.1  如果想让任何机器访问设置<code>0.0.0.0</code>即可</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">bind</span> 127.0.0.0  <span class="comment">#绑定端口</span></span><br><span class="line">protected-mode yes <span class="comment">#保护模式</span></span><br><span class="line">port 6379 <span class="comment">#默认的服务端口</span></span><br></pre></td></tr></table></figure><blockquote><p>通用Genaral</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">daemonize no <span class="comment">#以守护进程的方式运行、默认为no</span></span><br><span class="line"></span><br><span class="line">pidfile /var/run/redis_6379.pid  <span class="comment">#如果以后台的方式运行，我们就需要指定pdi文件</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Specify the server verbosity level.日志等级</span></span><br><span class="line"><span class="comment"># This can be one of:</span></span><br><span class="line"><span class="comment"># debug (a lot of information, useful for development/testing)</span></span><br><span class="line"><span class="comment"># verbose (many rarely useful info, but not a mess like the debug level)</span></span><br><span class="line"><span class="comment"># notice (moderately verbose, what you want in production probably)</span></span><br><span class="line"><span class="comment"># warning (only very important / critical messages are logged)</span></span><br><span class="line">loglevel notice</span><br><span class="line"></span><br><span class="line">logfile <span class="string">&quot;&quot;</span>  <span class="comment">#日志文件位置 默认为空没有日志</span></span><br><span class="line"></span><br><span class="line">database 16 <span class="comment">#数据库数量</span></span><br><span class="line">always-show-logo yes  <span class="comment">#是否显示logo</span></span><br></pre></td></tr></table></figure><blockquote><p>SNAPSHOTTING快照</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># redis是内存数据库，如果没有持久化，那么数据就会断电丢失</span></span><br><span class="line">save 900 1 <span class="comment">##如果900s内 如果至少有一个key进行修改 那么我们就进行持久化操作</span></span><br><span class="line">save 300 10 <span class="comment">##如果300s内 如果至少有10个key进行了修改 我们就会进行持久化操作</span></span><br><span class="line">save 60 10000</span><br><span class="line">stop-writes-on-bgsave-error yes <span class="comment">#持久化如果出错 是否还要继续工作 默认为yes</span></span><br><span class="line">rdbcompression yes <span class="comment">#是否压缩rdb文件、需要消耗cpu资源</span></span><br><span class="line">rdbchecksum yes <span class="comment">#保存rdb文件时 进行错误的交叉校验</span></span><br><span class="line">dir ./  <span class="comment">#rdb文件保存的目录 默认当前文件夹下</span></span><br></pre></td></tr></table></figure><blockquote><p> REPLICATION 复制 ，后面讲解主从配置再进行讲解</p></blockquote><blockquote><p>SECURITY安全</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#这里我们主要用来设置密码（默认没有密码）</span></span><br><span class="line">127.0.0.1:6379&gt; config get requirepass</span><br><span class="line">1) <span class="string">&quot;requirepass&quot;</span></span><br><span class="line">2) <span class="string">&quot;&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; config <span class="built_in">set</span> requirepass 233</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; ping</span><br><span class="line">(error) NOAUTH Authentication required.</span><br><span class="line">127.0.0.1:6379&gt; auth 233</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; config get requirepass</span><br><span class="line">1) <span class="string">&quot;requirepass&quot;</span></span><br><span class="line">2) <span class="string">&quot;233&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; </span><br><span class="line"><span class="comment"># 或者直接在配置文件中设置 `requirepass 233`</span></span><br></pre></td></tr></table></figure><blockquote><p>CLIENTS </p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">maxclients 10000  <span class="comment">#设置能连接上redis的最大客户端的数量</span></span><br><span class="line">maxmemory &lt;bytes&gt;  <span class="comment">#redis配置最大的内存容量</span></span><br><span class="line">maxmemory-policy noeviction <span class="comment">#内存达到上限之后的处理策略</span></span><br><span class="line">1、volatile-lru：只对设置了过期时间的key进行LRU（默认值） </span><br><span class="line">2、allkeys-lru ： 删除lru算法的key   </span><br><span class="line">3、volatile-random：随机删除即将过期key   </span><br><span class="line">4、allkeys-random：随机删除   </span><br><span class="line">5、volatile-ttl ： 删除即将过期的   </span><br><span class="line">6、noeviction ： 永不过期，返回错误</span><br></pre></td></tr></table></figure><blockquote><p>APPEND ONLY MODE aof配置</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">appendonly no  <span class="comment">#默认不开启aof模式 默认使用rdb方式持久化  大部分情况下 rdb够用</span></span><br><span class="line">appendfilename <span class="string">&quot;appendonly.aof&quot;</span> <span class="comment">#持久化文件的名字</span></span><br><span class="line"><span class="comment"># appendfsync always  #每次修改都会写入 消耗性能</span></span><br><span class="line">appendfsync everysec  <span class="comment">#每秒执行一次 可能会丢失这一秒的数据</span></span><br><span class="line"><span class="comment"># appendfsync no   #不同步 不执行 操作系统自己同步 速度最快</span></span><br></pre></td></tr></table></figure><h1 id="Redis持久化"><a href="#Redis持久化" class="headerlink" title="Redis持久化"></a>Redis持久化</h1><p>无论是面试还是工作 持久化都是一个重点，Redis是内存数据库 如果不将内存中的数据库状态保存到硬盘 那么服务器一旦出现问题 数据库信息状态就会丢失 所以redis提供了持久化功能</p><h2 id="RDB（Redis-DataBase）"><a href="#RDB（Redis-DataBase）" class="headerlink" title="RDB（Redis DataBase）"></a>RDB（Redis DataBase）</h2><p>含义：在指定的时间间隔间隔内将内存中的数据集快照写入到磁盘 也就是行话说的snapshot快照，他恢复时将快照文件直接读到内存中；</p><p>Redis会单独创建一个fork（一个子进程来进行持久化，会先将数据写到一个临时文件，等到持久化过程结束，再用这个临时文件替换上次持久化好的文件。整个过程中，主进程不进行任何io操作，这样就保证了极高的性能、如果需要进行大规模数据的回复，且对于数据恢复的完整性不是非常敏感、那么RDB方式比AOF更加的高效，他的缺点是最后一次持久化的数据可能丢失，比如服务器宕机 我们默认使用的就是RDB 一般情况不需要修改这个配置）</p><p>文件保存的文件是dump.rdb文件，在配置文件中可以设置！</p><blockquote><p>触发机制</p></blockquote><ol><li>save的规则满足的情况下 会自动触发rdb规则</li><li>执行flushall命令 也会触发</li><li>退出redis 也会产生rdb文件</li></ol><p>备份自动生成dump.rdb</p><blockquote><p>恢复rdb文件里面的数据</p></blockquote><ol><li>只要将rdb文件放到我们redis的启动目录即可 redis启动会自动检查dump.rdb恢复其中数据</li><li>查看需要存在的位置</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; config get dir</span><br><span class="line">1) <span class="string">&quot;dir&quot;</span></span><br><span class="line">2) <span class="string">&quot;/var/lib/redis/6379&quot;</span> <span class="comment">##如果这个目录下存在dump.rdb文件 启动就会自动恢复其中的数据</span></span><br></pre></td></tr></table></figure><p>优点：适合大规模的数据恢复，对数据的完整性要求不高</p><p>缺点：需要一定的时间间隔进程操作，如果redis意外宕机 最后一次修改的数据就会丢失 fork进程的时候，会占用一定的空间</p><h2 id="AOF-Append-Only-File"><a href="#AOF-Append-Only-File" class="headerlink" title="AOF(Append Only File)"></a>AOF(Append Only File)</h2><p>将所有命令记录下来，恢复（history）的时候把文件执行一遍，不包含读操作</p><blockquote><p>开启</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">appendonly no</span><br></pre></td></tr></table></figure><p>默认是不开启的 改为yes则进行开启，生成的文件为<code>appendonly.aof</code></p><p>如果aof文件有错误，那么redis客户端连接不了，我们需要修复这个aof文件<code>redis-check-aof --fix appendonly.aof</code></p><p>优点：每一次修改都同步，文件完整性更好，每秒同步一次，可能会丢失一秒的数据，从不同步 效率最高</p><p>缺点：相对于数据文件来说，aof远远大于rdb 修改速度也比rdb慢</p><p>Aof运行效率也比rdb慢 所以redis默认持久化选的是rdb</p><h1 id="Redis发布订阅"><a href="#Redis发布订阅" class="headerlink" title="Redis发布订阅"></a>Redis发布订阅</h1><p>Redis发布订阅(pub/sub)是一种消息通信模式：发送者（pub）发送消息、订阅者（sub）接收消息；Redis客户端可以订阅任意数量的频道</p><p><img src="https://gcore.jsdelivr.net/gh/code-anan/image/20220710190412.png" alt="image-20220710190405205"></p><blockquote><p>测试</p></blockquote><p>订阅者：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; subscribe lwl</span><br><span class="line">Reading messages... (press Ctrl-C to quit)</span><br><span class="line">1) <span class="string">&quot;subscribe&quot;</span></span><br><span class="line">2) <span class="string">&quot;lwl&quot;</span></span><br><span class="line">3) (<span class="built_in">integer</span>) 1</span><br><span class="line">1) <span class="string">&quot;message&quot;</span></span><br><span class="line">2) <span class="string">&quot;lwl&quot;</span></span><br><span class="line">3) <span class="string">&quot;hello,dog&quot;</span></span><br></pre></td></tr></table></figure><p>发布者：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; publish lwl hello,dog</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br></pre></td></tr></table></figure><h1 id="Redis主从复制"><a href="#Redis主从复制" class="headerlink" title="Redis主从复制"></a>Redis主从复制</h1><h2 id="概念-1"><a href="#概念-1" class="headerlink" title="概念"></a>概念</h2><p>主从复制，是指将一台redis服务器的数据复制到其他的redis服务器。前者成为主节点（master），后者称为从节点（slave），数据的复制是单向的，只能从主节点到从节点，mater以写为主，slave以读为主</p><p>默认情况下，每台redis服务器都是单节点；且一个主节点可以有多个从节点或者没有从节点，但一个从节点只能有一个主节点</p><p>主从复制，读写分离！80%的操作都是读操作，这样可以减轻服务器的压力，架构中经常使用</p><h2 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h2><ol><li>数据冗余：主从复制实现了数据的热备份，是持久化之外的一种数据冗余方式</li><li>故障恢复：当主节点出现问题时，可以由从节点提供服务，实现快速的故障恢复；实际上是一种服务的冗余</li><li>负载均衡：在主从复制的基础上，配合读写分离，可以由主节点提供写服务，从节点提供读服务（即写redis数据时应用连接主节点、读Redis数据时应用连接从节点），分担服务器负载；尤其是在写少读多的场景下，通过多个从节点分担读负载，可以大大提高Redis服务器的并发量</li><li>高可用基石：除了上述作用之外，主从复制还是哨兵和集群能够实施的基础，因此说主从复制是Redis高可用的基础</li></ol><h2 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h2><p>只配置从库，不需要配置主库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; info replication</span><br><span class="line"><span class="comment"># Replication</span></span><br><span class="line">role:master</span><br><span class="line">connected_slaves:0</span><br><span class="line">master_replid:51733d45fc7a2bce5acc99d6447b83cb128edc99</span><br><span class="line">master_replid2:0000000000000000000000000000000000000000</span><br><span class="line">master_repl_offset:0</span><br><span class="line">second_repl_offset:-1</span><br><span class="line">repl_backlog_active:0</span><br><span class="line">repl_backlog_size:1048576</span><br><span class="line">repl_backlog_first_byte_offset:0</span><br><span class="line">repl_backlog_histlen:0</span><br></pre></td></tr></table></figure><p>下面 模拟Redis的集群 一主二从 我们通过修改端口启动的方式 复制三个配置文件 然后修改对应的信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">root@localhost lwlredisconfig]<span class="comment"># cp redis.conf redis79.conf</span></span><br><span class="line">[root@localhost lwlredisconfig]<span class="comment"># cp redis.conf redis80.conf</span></span><br><span class="line">[root@localhost lwlredisconfig]<span class="comment"># cp redis.conf redis81.conf</span></span><br></pre></td></tr></table></figure><p>1.端口 分别为6379 6380 6381</p><p>2.pid名字</p><p>3.log文件名字</p><p>4.dump.rdb名字 启动之后效果如下</p><p><img src="https://gcore.jsdelivr.net/gh/code-anan/image/20220710203101.png" alt="image-20220710203101046"></p><p>这样就成功的模拟了一个小集群</p><h2 id="一主二从"><a href="#一主二从" class="headerlink" title="一主二从"></a>一主二从</h2><p>上面我们说了 只需要配置从节点即可(在6380和6381端口上执行)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost lwlredisconfig]<span class="comment"># redis-cli -p 6380</span></span><br><span class="line">127.0.0.1:6380&gt; info replication</span><br><span class="line"><span class="comment"># Replication</span></span><br><span class="line">role:master</span><br><span class="line">connected_slaves:0</span><br><span class="line">master_replid:8261d164635c5c5e3ea04adf8ea26ebd037c95a3</span><br><span class="line">master_replid2:0000000000000000000000000000000000000000</span><br><span class="line">master_repl_offset:0</span><br><span class="line">second_repl_offset:-1</span><br><span class="line">repl_backlog_active:0</span><br><span class="line">repl_backlog_size:1048576</span><br><span class="line">repl_backlog_first_byte_offset:0</span><br><span class="line">repl_backlog_histlen:0</span><br><span class="line">127.0.0.1:6380&gt; slaveof 127.0.0.1 6379</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6381&gt; info replication</span><br><span class="line"><span class="comment"># Replication</span></span><br><span class="line">role:slave</span><br><span class="line">master_host:127.0.0.1</span><br><span class="line">master_port:6379</span><br><span class="line">master_link_status:up</span><br><span class="line">master_last_io_seconds_ago:5</span><br><span class="line">master_sync_in_progress:0</span><br><span class="line">slave_repl_offset:70</span><br><span class="line">slave_priority:100</span><br><span class="line">slave_read_only:1</span><br><span class="line">connected_slaves:0</span><br><span class="line">master_replid:dcc904eb6026b4ea356b12e82b396f63be8ddefa</span><br><span class="line">master_replid2:0000000000000000000000000000000000000000</span><br><span class="line">master_repl_offset:70</span><br><span class="line">second_repl_offset:-1</span><br><span class="line">repl_backlog_active:1</span><br><span class="line">repl_backlog_size:1048576</span><br><span class="line">repl_backlog_first_byte_offset:71</span><br><span class="line">repl_backlog_histlen:0</span><br></pre></td></tr></table></figure><p>使用<code>slaveof host port</code>命令即可，可以看到role角色也变成了slave，在查看主机,可以看到从机的信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; info replication</span><br><span class="line"><span class="comment"># Replication</span></span><br><span class="line">role:master</span><br><span class="line">connected_slaves:0</span><br><span class="line">master_replid:a50f3c2a618c08b7b1c6d9392629d2647220d792</span><br><span class="line">master_replid2:0000000000000000000000000000000000000000</span><br><span class="line">master_repl_offset:0</span><br><span class="line">second_repl_offset:-1</span><br><span class="line">repl_backlog_active:0</span><br><span class="line">repl_backlog_size:1048576</span><br><span class="line">repl_backlog_first_byte_offset:0</span><br><span class="line">repl_backlog_histlen:0</span><br><span class="line">127.0.0.1:6379&gt; info replication</span><br><span class="line"><span class="comment"># Replication</span></span><br><span class="line">role:master</span><br><span class="line">connected_slaves:2</span><br><span class="line">slave0:ip=127.0.0.1,port=6380,state=online,offset=308,lag=0</span><br><span class="line">slave1:ip=127.0.0.1,port=6381,state=online,offset=308,lag=1</span><br><span class="line">master_replid:dcc904eb6026b4ea356b12e82b396f63be8ddefa</span><br><span class="line">master_replid2:0000000000000000000000000000000000000000</span><br><span class="line">master_repl_offset:308</span><br><span class="line">second_repl_offset:-1</span><br><span class="line">repl_backlog_active:1</span><br><span class="line">repl_backlog_size:1048576</span><br><span class="line">repl_backlog_first_byte_offset:1</span><br><span class="line">repl_backlog_histlen:308</span><br><span class="line">127.0.0.1:6379&gt; </span><br></pre></td></tr></table></figure><p>真实的主配置应该在配置文件中修改，那样的话是永久的 使用上面的命令 只是暂时的；主机只能写 从机只能读</p><p><img src="https://gcore.jsdelivr.net/gh/code-anan/image/20220711201856.png" alt="image-20220711201849638"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6380&gt; get k1</span><br><span class="line"><span class="string">&quot;v1&quot;</span></span><br><span class="line">127.0.0.1:6380&gt; <span class="built_in">set</span> k2 v2</span><br><span class="line">(error) READONLY You can<span class="string">&#x27;t write against a read only replica.</span></span><br></pre></td></tr></table></figure><p>主机写 从机只能读 主机宕机 从机依然可以读数据并且连接到主机，如果主机回来 从机依然可以直接获取主机的数据；从机宕机 主机重新set值 从机重连查不到值 发现它又变成了主机 但是再次设置为从机 又可以获取到值；</p><blockquote><p>复制原理</p></blockquote><p>slave启动成功连接到master后会发送一个sync同步命令</p><p>Master接到命令，启动后台的存盘进程，同时收集所有接收到的用于修改数据集命令，在后台进程执行完毕之后，master将传送整个数据文件到slave，并完成一次完全同步</p><p>全量复制：而slave服务在接收到数据库文件数据后，将其存盘并加载到内存中</p><p>增量复制：Master继续将新的所有收集到的修改命令依次传给slave完成同步，但是只要重新连接master，一次完全同步（全量复制）会被自动执行，在从机中一定可以看到主机的数据</p><p><code>slaveof no one</code>可以自己变成主节点</p><h1 id="哨兵模式"><a href="#哨兵模式" class="headerlink" title="哨兵模式"></a>哨兵模式</h1><p>一种自动选举老大的模式，能够后台监控主机是否故障，如果故障了根据投票数自动将从库转换为主库；</p><p>哨兵模式是一种特殊的模式，首先Redis提供了哨兵的命令，哨兵是一个独立的进程，作为进程，它会独立运行，其原理是哨兵通过发送命令，等待Redis服务器响应，从而监控运行的多个Redis实例</p><blockquote><p>测试</p></blockquote><p>1.配置哨兵配置文件sentinel.conf（不止这一个配置）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sentinel monitor myredis 127.0.0.1 6379 1</span><br><span class="line">后面的数字1 代表主机挂了 slave投票看让谁接替成为主机 票最多的就会成为主机</span><br></pre></td></tr></table></figure><p>2.启动哨兵</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost lwlredisconfig]<span class="comment"># redis-sentinel sentinel.conf</span></span><br><span class="line">3907:X 11 Jul 2022 06:01:56.968 <span class="comment"># oO0OoO0OoO0Oo Redis is starting oO0OoO0OoO0Oo</span></span><br><span class="line">3907:X 11 Jul 2022 06:01:56.968 <span class="comment"># Redis version=5.0.8, bits=64, commit=00000000, modified=0, pid=3907, just started</span></span><br><span class="line">3907:X 11 Jul 2022 06:01:56.968 <span class="comment"># Configuration loaded</span></span><br><span class="line">3907:X 11 Jul 2022 06:01:56.969 * Increased maximum number of open files to 10032 (it was originally <span class="built_in">set</span> to 1024).</span><br><span class="line">                _._                                                  </span><br><span class="line">           _.-``__ <span class="string">&#x27;&#x27;</span>-._                                             </span><br><span class="line">      _.-``    `.  `_.  <span class="string">&#x27;&#x27;</span>-._           Redis 5.0.8 (00000000/0) 64 bit</span><br><span class="line">  .-`` .-```.  ```\/    _.,_ <span class="string">&#x27;&#x27;</span>-._                                   </span><br><span class="line"> (    <span class="string">&#x27;      ,       .-`  | `,    )     Running in sentinel mode</span></span><br><span class="line"><span class="string"> |`-._`-...-` __...-.``-._|&#x27;</span>` _.-<span class="string">&#x27;|     Port: 26379</span></span><br><span class="line"><span class="string"> |    `-._   `._    /     _.-&#x27;</span>    |     PID: 3907</span><br><span class="line">  `-._    `-._  `-./  _.-<span class="string">&#x27;    _.-&#x27;</span>                                   </span><br><span class="line"> |`-._`-._    `-.__.-<span class="string">&#x27;    _.-&#x27;</span>_.-<span class="string">&#x27;|                                  </span></span><br><span class="line"><span class="string"> |    `-._`-._        _.-&#x27;</span>_.-<span class="string">&#x27;    |           http://redis.io        </span></span><br><span class="line"><span class="string">  `-._    `-._`-.__.-&#x27;</span>_.-<span class="string">&#x27;    _.-&#x27;</span>                                   </span><br><span class="line"> |`-._`-._    `-.__.-<span class="string">&#x27;    _.-&#x27;</span>_.-<span class="string">&#x27;|                                  </span></span><br><span class="line"><span class="string"> |    `-._`-._        _.-&#x27;</span>_.-<span class="string">&#x27;    |                                  </span></span><br><span class="line"><span class="string">  `-._    `-._`-.__.-&#x27;</span>_.-<span class="string">&#x27;    _.-&#x27;</span>                                   </span><br><span class="line">      `-._    `-.__.-<span class="string">&#x27;    _.-&#x27;</span>                                       </span><br><span class="line">          `-._        _.-<span class="string">&#x27;                                           </span></span><br><span class="line"><span class="string">              `-.__.-&#x27;</span>                                               </span><br><span class="line"></span><br><span class="line">3907:X 11 Jul 2022 06:01:56.970 <span class="comment"># WARNING: The TCP backlog setting of 511 cannot be enforced because /proc/sys/net/core/somaxconn is set to the lower value of 128.</span></span><br><span class="line">3907:X 11 Jul 2022 06:01:56.971 <span class="comment"># Sentinel ID is 117052e5211488f43bd6cf6d84f616661444f0b3</span></span><br><span class="line">3907:X 11 Jul 2022 06:01:56.971 <span class="comment"># +monitor master myredis 127.0.0.1 6379 quorum 1</span></span><br><span class="line">3907:X 11 Jul 2022 06:01:56.973 * +slave slave 127.0.0.1:6380 127.0.0.1 6380 @ myredis 127.0.0.1 6379</span><br><span class="line">3907:X 11 Jul 2022 06:01:56.975 * +slave slave 127.0.0.1:6381 127.0.0.1 6381 @ myredis 127.0.0.1 6379</span><br></pre></td></tr></table></figure><p><code>redis-sentinel sentinel.conf</code>即可启动</p><p>如果Master主节点断开，这个时候就会从从机中随机选择一个服务器（里面有一个算法）</p><p>这时候主机重连 发现变成了从机 这就是哨兵模式的规则</p><p>优点：哨兵集群，基于主从复制，所有的主从配置优点 他都有，主从可以切换 故障可以转移 系统的可用性会更好 ，哨兵模式就是主从模式的升级 手动到自动 更加健壮</p><p>缺点：redis不好在线扩容 集群容量一旦到达上限 在线扩容十分麻烦 实现哨兵模式的配置比较复杂 里面有很多选择 可以搜索一下哨兵的所有配置</p><h1 id="Redis缓存穿透和雪崩"><a href="#Redis缓存穿透和雪崩" class="headerlink" title="Redis缓存穿透和雪崩"></a>Redis缓存穿透和雪崩</h1><h2 id="缓存穿透"><a href="#缓存穿透" class="headerlink" title="缓存穿透"></a>缓存穿透</h2><blockquote><p>概念</p></blockquote><p>用户想要查询一个数据，发现redis内存数据库没有，也就是缓存没有命中 于是向持久层数据库查询 但是发现持久层数据库也没有，于是本次查询失败。当用户很多的时候，缓存都没有命中 于是都去请求了持久层数据库 这会给持久层数据库造成很大的压力 这时候就相当于出现了缓存穿透</p><blockquote><p>解决方案</p></blockquote><p>1.布隆过滤器</p><p>布隆过滤器是一种数据结构，对所有可能查询的参数以hash形式存储，在控制层先进行校验，不符合则丢弃，从而避免了对底层存储系统的查询压力</p><p>2.缓存空对象</p><p>当存储层不命中后，即使返回的空对象也将其缓存起来，同时设置一个过期时间，之后再访问这个数据将会从缓存中获取，保护了后端数据源</p><p>但是这种方法会有两个问题：</p><p>1.如果空值能够被缓存起来，这就意味着缓存需要更多的空间存储更多的键，因为这当中可能会有很多的空值的键</p><p>2.即使对空值设置了过期时间，还是会存在缓存层和存储层的数据会有一段时间窗口的不一致，这对于需要保持一致性的业务有影响</p><blockquote><p>缓存击穿（量太大，缓存过期）</p></blockquote><p>缓存击穿，是指一个key非常热点，在不停的扛着大并发，大并发集中对这一个点进行访问，当这个key在失效的瞬间，持续的大并发就穿破缓存，直接请求数据库，就像在屏障上凿开了一个洞；</p><p>当某个key在过期的瞬间，有大量的请求并发访问，这类数据一般是热点数据，由于缓存过期，会同时访问数据库来查询最新数据并且回写缓存，会导致数据库瞬间压力过大</p><blockquote><p>解决方案</p></blockquote><p><strong>设置热点数据永不过期</strong></p><p><strong>加互斥锁</strong></p><p>分布式锁：使用分布式锁，保证对于某个key同时只有一个线程去查询后端服务，其他线程没有获得分布式锁的权限，因此只需要等待即可。这种方式将高并发的压力转移到了分布式锁，因此对分布式锁的考验很大</p><h2 id="缓存雪崩"><a href="#缓存雪崩" class="headerlink" title="缓存雪崩"></a>缓存雪崩</h2><p>缓存雪崩，是指在某一个时间段，缓存集中过期失效，Redis宕机</p><blockquote><p>结局方案</p></blockquote><p><strong>redis高可用</strong></p><p>这个思想的含义是，既然reids有可能会挂掉，那我多增设几台redis，这样一台挂掉之后其他的还可以正常工作，其实这就是搭建的集群</p><p><strong>限流降级</strong></p><p>在缓存失效后，通过加锁或者队列来控制读数据库写缓存的线程数量，比如对某个key只允许一个线程查询和写缓存，其他线程等待</p><p><strong>数据加热</strong></p><p>数据加热的含义是在正式部署之前，先把可能的数据先预先访问一边，这样部分可能大量访问的数据就会加载到缓存中，在即将发生大并发访问前手动触发加载缓存不同的key，设置不同的过期时间，让缓存失效的时间点尽量均匀</p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前后端分离项目部署</title>
      <link href="post/projectpublish/"/>
      <url>post/projectpublish/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>羊哥的服务器部署项目是在太精彩、所以这里记录一下部署过程方便以后温习，首先是<a href="https://www.bilibili.com/video/BV1uK411p7Bp?spm_id_from=333.337.search-card.all.click">视频教程</a></p><h1 id="机器准备"><a href="#机器准备" class="headerlink" title="机器准备"></a>机器准备</h1><p>首先我们要准备三台虚拟机，这里为了演示方便我们分别把他们叫做一号机二号机三号机，需要注意的是虚拟机的环境需要提前安装才可以，首先得话得有<a href="https://weilong98.com/post/CentOSInstall/">虚拟机的安装</a><img src="https://gcore.jsdelivr.net/gh/code-anan/image/20220511220542.png">(注意硬盘大小最少要30g以上,血的教训)</p><p>以及咱们机器环境的安装在羊哥的pdf里面已经介绍的无比详细，直接照着配置即可<a href="https://www.aliyundrive.com/s/tX5SmNKbAwP">PDF版地址</a>我这里配置的三台ip分别为<code>192.168.1.103</code>、<code>192.168.1.104</code>、<code>192.168.1.105</code></p><p>第一台机子需要安装好mysql数据库、redis和nginx以及nodejs，因为第一台机器我们用来部署前端项目和数据库，后面两台只需要maven的环境就可以了（建议先在一台把该有的环境全都部署上然后克隆用dhclient修改ip地址即可）</p><h1 id="使用的项目以及配置"><a href="#使用的项目以及配置" class="headerlink" title="使用的项目以及配置"></a>使用的项目以及配置</h1><p>这里使用的项目是<a href="https://gitee.com/y_project/RuoYi-Vue">RuoYi-Vue</a>，注意这里我们演示的是<code>2.3</code>版本的</p><p><img src="https://gcore.jsdelivr.net/gh/code-anan/image/20220511222405.png"></p><p>然后我们在idea中打开后端项目<img src="https://gcore.jsdelivr.net/gh/code-anan/image/20220512203203.png"></p><p>下面需要先修改必要的配置</p><h2 id="主数据库配置"><a href="#主数据库配置" class="headerlink" title="主数据库配置"></a>主数据库配置</h2><p>上面已经说了，我们的数据库放在第一台机器上，所以首先修改配置如下，这里需要注意的是把useSSL=true改成false(搞了好久才发现)</p><p><img src="https://gcore.jsdelivr.net/gh/code-anan/image/20220512203440.png"></p><p>看到后面的数据库是<code>ry-vue</code> 所以我们先创建这个数据库</p><p><img src="https://gcore.jsdelivr.net/gh/code-anan/image/20220512203618.png"></p><p>我这里使用的是<a href="http://www.dbeaver.io/">Dbeaver</a>大家使用别的navicat什么的也都行然后 运行sql脚本（脚本文件在项目根路径下的sql文件夹下）即可得到所有的数据库表<img src="https://gcore.jsdelivr.net/gh/code-anan/image/20220512204546.png"></p><h2 id="redis配置"><a href="#redis配置" class="headerlink" title="redis配置"></a>redis配置</h2><p><img src="https://gcore.jsdelivr.net/gh/code-anan/image/20220512213646.png"></p><p>在<code>applicayion.yml</code>文件中修改我们的主机地址、端口以及redis数据库的密码，这里需要我们提前在一号机上安装好redis哦</p><h2 id="日志配置"><a href="#日志配置" class="headerlink" title="日志配置"></a>日志配置</h2><p><img src="https://gcore.jsdelivr.net/gh/code-anan/image/20220513221435.png"></p><p>日志这边就没什么好配置的 主要就是修改存放路径（这里是为了在本地先跑起来后面部署了改到一号机的路径当然不改也可以） 以及所有的输出我们都设置一下编码格式 防止出现乱码 上面这些配置好之后就可以本地启动了<img src="https://gcore.jsdelivr.net/gh/code-anan/image/20220513221609.png"></p><p>前端项目的话不需要任何配置  上面的修改完毕就可以在本地跑起来了</p><p>PS：这里需要注意 如果redis或者主数据库不通我们最好先用telnet看一下服务器端口是不是对外开放 这里可以设置对外开放的端口 下面的配置可能会经常用到这几条指令（先看一下是否放开 没放开的话指定放开端口并重载一下）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">查看想开的端口是否已开：firewall-cmd --query-port=6379/tcp</span><br><span class="line">添加指定需要开放的端口：firewall-cmd --add-port=6379/tcp --permanent</span><br><span class="line">重载入添加的端口：firewall-cmd --reload</span><br></pre></td></tr></table></figure><h1 id="前端项目打包部署"><a href="#前端项目打包部署" class="headerlink" title="前端项目打包部署"></a>前端项目打包部署</h1><p>首先把我们的前端项目压缩一下<img src="https://gcore.jsdelivr.net/gh/code-anan/image/20220513221954.png"></p><p>然后拖到我们的workspace文件夹（需要新建）下，在workspace下解压得到文件夹<code>unzip ruoyi-ui.zip</code><img src="https://gcore.jsdelivr.net/gh/code-anan/image/20220513222503.png"></p><p><code>rm -rf ruoyi-ui.zip</code>这里我们可以把压缩包删掉，并进入到<code>ruoyi-ui</code>文件夹下</p><p>然后输入<code>npm install --unsafe-perm --registry=https://registry.npm.taobao.org</code>进行前端依赖的下载</p><p>最后<code>npm run build:prod</code>进行生产环境的打包,然后可以看到打包生成的dist<img src="https://gcore.jsdelivr.net/gh/code-anan/image/20220514151747.png"></p><p>打包到这里就完成了，最后只剩下部署这里我们用nginx进行部署（需要提前安好nginx环境）</p><p>首先我们要修改nginx的配置文件在<code>/usr/local/nginx/conf</code>下的nginx.conf</p><p><img src="https://gcore.jsdelivr.net/gh/code-anan/image/20220514160317.png"></p><p>根目录配置为我们前端项目打包的dist路径</p><p><img src="https://gcore.jsdelivr.net/gh/code-anan/image/20220514160412.png"></p><p>以及用户设为root防止出现403等权限问题 然后在<code>/usr/local/nginx/sbin</code>目录下启动nginx即可</p><p>启动命令：<code>./nginx</code><img src="https://gcore.jsdelivr.net/gh/code-anan/image/20220514161959.png"></p><p>可以看到启动成功了</p><h1 id="后端项目打包部署"><a href="#后端项目打包部署" class="headerlink" title="后端项目打包部署"></a>后端项目打包部署</h1><p><img src="https://gcore.jsdelivr.net/gh/code-anan/image/20220513223444.png"></p><p>这里我们直接拖过来就行，2和3都放上去，然后来到ruoyi目录下</p><h2 id="jar包方式"><a href="#jar包方式" class="headerlink" title="jar包方式"></a>jar包方式</h2><p>我们知道springboot项目都是内嵌Tomcat的  所以我们不用tomcat直接打jar包也是可以的，只需要一条指令<code>mvn package</code>即可打包完成，前提是得安装好咱们的maven环境，打包完成之后把target目录下的jar包放到上一层中进行保存<img src="https://gcore.jsdelivr.net/gh/code-anan/image/20220514153237.png"></p><p>部署的话直接用<code>nohup java -jar ruoyi.jar &amp;</code> 我们可以使用指令<img src="https://gcore.jsdelivr.net/gh/code-anan/image/20220514184627.png"></p><p>看一下运行的进程 可以看到确实有进程在运行 但是这时候前端页面还没有跟后端关联起来 还需要进行相应的配置<img src="https://gcore.jsdelivr.net/gh/code-anan/image/20220514184859.png"></p><p>这里我们可以看到他请求的url  所以这时候还需要加上一号机的nginx代理，在location为<code>/</code>的下方新增一个</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"> location /prod-api/&#123;</span><br><span class="line">         proxy_set_header Host $http_host;</span><br><span class="line"> proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line"> proxy_set_header REMOTE-HOST $remote_addr;</span><br><span class="line"> proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line"> proxy_pass http:<span class="comment">//192.168.1.104:8080/;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这里我先部署的是我刚才启动的二号机的地址，这里根据你实际的地址进行改动，注意这里第二台实例8080端口一定要对外开放<img src="https://gcore.jsdelivr.net/gh/code-anan/image/20220514190928.png"></p><p>可以看到验证码出现 也可以正常的登陆了</p><h2 id="war包方式"><a href="#war包方式" class="headerlink" title="war包方式"></a>war包方式</h2><p>在打war包之前，我们需要对代码进行一些修改</p><p>首先肯定是打包方式改为<code>war</code><img src="https://gcore.jsdelivr.net/gh/code-anan/image/20220514153457.png"></p><p>然后是加上这个依赖他表示的含义是在编译测试的时候会用内嵌的tomcat但是发布的时候会将其剔除<img src="https://gcore.jsdelivr.net/gh/code-anan/image/20220514153855.png"></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>最后是我们需要在定义一个启动类，因为默认的启动类用的是内嵌的tomcat<img src="https://gcore.jsdelivr.net/gh/code-anan/image/20220514154353.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RuoYiApplicationWar</span> <span class="keyword">extends</span> <span class="title">SpringBootServletInitializer</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> SpringApplicationBuilder <span class="title">configure</span><span class="params">(SpringApplicationBuilder builder)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> builder.sources(RuoYiApplication.class);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改完之后我们也要把服务器上的<code>pom.xml</code>和新添加的启动类加上才可以，记得两台服务器都要替换加上！</p><p>然后就可以进行打包了，首先到ruoyi这个文件夹下进行<code>mvn clean</code>把target打包内容清除掉 再使用<code>mvn package</code>打包 可以看到这次打出来的就是war包了<img src="https://gcore.jsdelivr.net/gh/code-anan/image/20220514155507.png"></p><p>同样 我们也在上一层进行备份 到这里我们需要的jar包war包 都已经操作完毕 下面可以正式进行部署</p><p>上面我们使用了jar包的方式在二号机成功调通，下面使用war包的方式进行部署，首先关闭我们刚才jar包启动的实例<img src="https://gcore.jsdelivr.net/gh/code-anan/image/20220514191318.png"></p><p>来到我们的tomcat文件夹下<code>cd /usr/local/tomcat/apache-tomcat-8.5.55</code></p><p>把打包完成的war包扔到webapps文件夹下 我们这里可以选择用指令(在webapps目录下)拷过来<code>cp /root/workspace/ruoyi/ruoyi.war ./</code></p><p>然后启动tomcat即可(在bin目录下)<code>sh startup.sh</code><img src="https://gcore.jsdelivr.net/gh/code-anan/image/20220514194823.png"></p><p>但是这时候我们发现需要加上后缀<code>/ruoyi</code></p><p>才可以正常访问，所以这里需要修改一下tomcat的文件，目录是在<code>/usr/local/tomcat/apache-tomcat-8.5.55/conf</code>下的<code>server.xml</code>添<code>&lt;Context path=&quot;/&quot; docBase=&quot;/usr/local/tomcat/apache-tomcat-8.5.55/webapps/ruoyi&quot; reloadable=&quot;false&quot;/&gt;</code>加到如图所示位置  意思也很明了就是在根目录下访问后面的资源<img src="https://gcore.jsdelivr.net/gh/code-anan/image/20220514195427.png"></p><p>重新启动一下服务器 可以看到确实有效果了<img src="https://gcore.jsdelivr.net/gh/code-anan/image/20220514195540.png"></p><h2 id="集群部署"><a href="#集群部署" class="headerlink" title="集群部署"></a>集群部署</h2><p>我们把三号机也跟二号机做一样的配置 确保他可以正常打开<img src="https://gcore.jsdelivr.net/gh/code-anan/image/20220514200457.png"></p><p>然后就可以用到我们的nginx做负载均衡了，还要回到一号机，修改nginx.conf,在server上新增一个upstream</p><p><img src="https://gcore.jsdelivr.net/gh/code-anan/image/20220514201331.png"></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">upstream ruoyi&#123;</span><br><span class="line">server 192.168.1.104:<span class="number">8080</span> weight=<span class="number">5</span>;</span><br><span class="line">server <span class="number">192.168</span><span class="number">.1</span><span class="number">.105</span>:<span class="number">8080</span> weight=<span class="number">3</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以及转发的地址为刚才的ruoyi,然后reload一下nginx就可以啦<code>/usr/local/nginx/sbin/nginx -s reload</code></p><p>ok 到这里所有的配置就大功告成了 有了这次的实操以后的服务器部署也都是大差不差了 感谢羊哥！！</p>]]></content>
      
      
      <categories>
          
          <category> 记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Nginx </tag>
            
            <tag> 项目部署 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解决MD5遇到的bug</title>
      <link href="post/MD5bug/"/>
      <url>post/MD5bug/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>最近公司做的一个功能有人反馈有问题，仔细看了看代码打断点才发现原来是md5加密的bug后来看了<a href="https://blog.csdn.net/liaoxiaoyi121121/article/details/80408479">这篇文章</a>才解决，为了更直观我把代码抽离出来方便演示</p><h1 id="出现bug的原因"><a href="#出现bug的原因" class="headerlink" title="出现bug的原因"></a>出现bug的原因</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    String password=<span class="string">&quot;300655&quot;</span>;</span><br><span class="line">    String md5 = getMD5(password);</span><br><span class="line">    System.out.println(getMD5(md5));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getMD5</span><span class="params">(String str)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">// 生成一个MD5加密计算摘要</span></span><br><span class="line">    MessageDigest md = MessageDigest.getInstance(<span class="string">&quot;MD5&quot;</span>);</span><br><span class="line">    <span class="comment">// 计算md5函数</span></span><br><span class="line">    md.update(str.getBytes());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> BigInteger(<span class="number">1</span>, md.digest()).toString(<span class="number">16</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种方式应该是常见的写法了，可是问题是计算出md5转化为String类型的时候，如果md5的结果是0开头的，那么你会发现开头的0被抛弃了，那么校验的时候一定会报错，下面我用个例子演示，公司使用md5一般都是两次加密，比如我这里使用<code>300655</code>这个值进行加密，在线<a href="https://www.cmd5.com/hash.aspx">加解密网站</a>上测试的结果如下<img src="https://gcore.jsdelivr.net/gh/code-anan/image/20220106143551.png"></p><p>这个表示加密两次的结果</p><p>而用上面的代码测试出来的结果为<img src="https://gcore.jsdelivr.net/gh/code-anan/image/20220106143804.png"></p><p>可以看到结果是不一样的</p><h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><p>使用下面这种方式即可解决</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    String password = <span class="string">&quot;300655&quot;</span>;</span><br><span class="line">    String md5 = getMD5(password);</span><br><span class="line">    System.out.println(getMD5(md5));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getMD5</span><span class="params">(String str)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">// 生成一个MD5加密计算摘要</span></span><br><span class="line">    MessageDigest md = MessageDigest.getInstance(<span class="string">&quot;MD5&quot;</span>);</span><br><span class="line">    <span class="comment">// 计算md5函数</span></span><br><span class="line">    md.update(str.getBytes());</span><br><span class="line">    <span class="keyword">return</span> toHexString(md.digest());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">toHexString</span><span class="params">(<span class="keyword">byte</span>[] bytes)</span> </span>&#123;</span><br><span class="line">    Formatter formatter = <span class="keyword">new</span> Formatter();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">byte</span> b : bytes) &#123;</span><br><span class="line">        formatter.format(<span class="string">&quot;%02x&quot;</span>, b);</span><br><span class="line">    &#125;</span><br><span class="line">    String res = formatter.toString();</span><br><span class="line">    formatter.close();</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>原理就是利用<code>formatter</code>将字节一个个的转为十六进制的形式即可，可以看到这次的结果为<img src="https://gcore.jsdelivr.net/gh/code-anan/image/20220106144148.png"></p><p>大功告成！(￣▽￣)~*</p>]]></content>
      
      
      <categories>
          
          <category> 加密 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MD5 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>大前端进阶</title>
      <link href="post/prefrontkeys/"/>
      <url>post/prefrontkeys/</url>
      
        <content type="html"><![CDATA[<h1 id="VScode的安装"><a href="#VScode的安装" class="headerlink" title="VScode的安装"></a>VScode的安装</h1><p>下载地址我们直接到<a href="https://code.visualstudio.com/">官网</a>进行下载即可，安装没什么好说的一直下一步即可，最好先汉化一下，插件里面搜索<code>chinese</code>即可</p><h1 id="NodeJS"><a href="#NodeJS" class="headerlink" title="NodeJS"></a>NodeJS</h1><h2 id="Nodejs快速安装和了解"><a href="#Nodejs快速安装和了解" class="headerlink" title="Nodejs快速安装和了解"></a>Nodejs快速安装和了解</h2><p>安装的话直接到官网无脑下一步即可<a href="http://www.nodejs.cn/download/">下载 | Node.js 中文网 (nodejs.cn)</a></p><p>cmd输入<code>node -v</code>出现版本号 表示安装成功</p><p>运行第一条node指令<img src="https://gcore.jsdelivr.net/gh/code-anan/image/20220406111906.png"></p><h2 id="Nodejs实现HttpServlet服务"><a href="#Nodejs实现HttpServlet服务" class="headerlink" title="Nodejs实现HttpServlet服务"></a>Nodejs实现HttpServlet服务</h2><p><img src="https://gcore.jsdelivr.net/gh/code-anan/image/20220406113349.png"></p><p><img src="https://gcore.jsdelivr.net/gh/code-anan/image/20220406113406.png"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 导入http模块 这里使用require关键字</span></span><br><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//1.创建httpserver服务</span></span><br><span class="line">http.createServer(<span class="function"><span class="keyword">function</span>(<span class="params">request,response</span>)</span>&#123;</span><br><span class="line">    response.writeHead(<span class="number">200</span>,&#123;<span class="string">&quot;Content-type&quot;</span>:<span class="string">&quot;text/plain&quot;</span>&#125;);</span><br><span class="line">    response.end(<span class="string">&quot;Hello mygod!&quot;</span>);</span><br><span class="line">&#125;).listen(<span class="number">8888</span>);</span><br><span class="line"><span class="comment">//2.监听端口配置为8888</span></span><br><span class="line"><span class="comment">//3.启动服务 node指令</span></span><br><span class="line"><span class="comment">//4.在浏览器访问</span></span><br></pre></td></tr></table></figure><h2 id="Nodejs操作mysql数据库"><a href="#Nodejs操作mysql数据库" class="headerlink" title="Nodejs操作mysql数据库"></a>Nodejs操作mysql数据库</h2><p>首先需要下载mysql的资源<code>npm install mysql</code></p><p>执行之后会发现我们的项目中新增了一个<code>node_modules</code>文件夹，然后我们就可以使用了</p><p><img src="https://gcore.jsdelivr.net/gh/code-anan/image/20220406132403.png"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//导入mysql依赖 mysql属于第三方的模块</span></span><br><span class="line"><span class="keyword">var</span> mysql=<span class="built_in">require</span>(<span class="string">&quot;mysql&quot;</span>);</span><br><span class="line"><span class="comment">//1.创建mysql的连接对象</span></span><br><span class="line"><span class="comment">//2.配置数据连接的信息</span></span><br><span class="line"><span class="keyword">var</span> connection=mysql.createConnection(&#123;</span><br><span class="line">    <span class="attr">host</span>:<span class="string">&quot;127.0.0.1&quot;</span>,</span><br><span class="line">    <span class="attr">user</span>:<span class="string">&quot;root&quot;</span>,</span><br><span class="line">    <span class="attr">password</span>:<span class="string">&quot;233&quot;</span>,</span><br><span class="line">    <span class="attr">database</span>:<span class="string">&quot;test&quot;</span>,</span><br><span class="line">    <span class="attr">port</span>:<span class="number">3306</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//3.开辟连接</span></span><br><span class="line">connection.connect();</span><br><span class="line"><span class="comment">//4.执行sql</span></span><br><span class="line">connection.query(<span class="string">&quot;select * from user&quot;</span>,<span class="function"><span class="keyword">function</span>(<span class="params">err,results,filed</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(err) <span class="keyword">throw</span> err;</span><br><span class="line">    <span class="built_in">console</span>.log(results);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//5.关闭连接</span></span><br><span class="line">connection.end();</span><br></pre></td></tr></table></figure><h1 id="ES6"><a href="#ES6" class="headerlink" title="ES6"></a>ES6</h1><h2 id="let和const命令"><a href="#let和const命令" class="headerlink" title="let和const命令"></a>let和const命令</h2><p>ES6之前，定义常量和变量都是使用var关键字，let和const的出现是为了解决变量穿透和变量的值可以改变的问题</p><p><img src="https://gcore.jsdelivr.net/gh/code-anan/image/20220406134144.png"></p><p>如果使用let<img src="https://gcore.jsdelivr.net/gh/code-anan/image/20220406134223.png"></p><p>const则是不能改变变量的值，需要注意的是有些低版本的浏览器不支持let和const语法也就是不支持es6</p><h2 id="模板字符串"><a href="#模板字符串" class="headerlink" title="模板字符串"></a>模板字符串</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">       <span class="keyword">var</span> me=&#123;</span></span><br><span class="line"><span class="javascript">           <span class="attr">name</span>:<span class="string">&quot;lwl&quot;</span>,</span></span><br><span class="line"><span class="javascript">           <span class="attr">address</span>:<span class="string">&quot;济南&quot;</span>,</span></span><br><span class="line"><span class="javascript">           <span class="attr">link</span>:<span class="string">&quot;http://weilong98.com&quot;</span></span></span><br><span class="line"><span class="javascript">       &#125;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> chuantong=me.name+<span class="string">&quot;的网站是&quot;</span>+me.link+<span class="string">&quot;,在&quot;</span>+me.address+<span class="string">&quot;上班&quot;</span>;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(chuantong)</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> es6=<span class="string">`<span class="subst">$&#123;me.name&#125;</span>的网站是<span class="subst">$&#123;me.link&#125;</span>,在<span class="subst">$&#123;me.address&#125;</span>上班`</span>;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(es6)</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>简单来说使用`和${}的方式来拼接字符串，并且他可以识别换行</p><h2 id="函数默认参数与箭头函数"><a href="#函数默认参数与箭头函数" class="headerlink" title="函数默认参数与箭头函数"></a>函数默认参数与箭头函数</h2><p>默认参数比较好理解，就是声明函数的时候默认给形参赋值</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">function sum(a=0,b=0)&#123;</span><br><span class="line">            return a+b;</span><br><span class="line">       &#125;</span><br><span class="line">console.log(sum(100));</span><br></pre></td></tr></table></figure><p>如果不赋默认值那么结果为NAN</p><p>箭头函数：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">     <span class="keyword">var</span> sum=<span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a+b;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="comment">//使用箭头函数</span></span><br><span class="line">     <span class="comment">//1.去掉function</span></span><br><span class="line">     <span class="comment">//2.在括号后面加箭头</span></span><br><span class="line">     <span class="comment">//3.如果逻辑代码仅有return可以直接省去(如果有逻辑体不能省略)</span></span><br><span class="line">     <span class="comment">//4.如果参数只有一个，可以把括号也省去（多个或者没有参数不能省）</span></span><br><span class="line">     <span class="comment">//所以上面的函数可以改写为</span></span><br><span class="line">     <span class="keyword">var</span> sum=<span class="function">(<span class="params">a,b</span>)=&gt;</span>a+b;</span><br><span class="line"></span><br><span class="line">    &lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="对象初始化"><a href="#对象初始化" class="headerlink" title="对象初始化"></a>对象初始化</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">     <span class="keyword">var</span> name=<span class="string">&quot;展示干&quot;</span>;</span></span><br><span class="line"><span class="javascript">     <span class="keyword">var</span> id=<span class="string">&quot;123&quot;</span>;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">     <span class="keyword">let</span> person=&#123;</span></span><br><span class="line"><span class="javascript">         <span class="attr">name</span>:name,</span></span><br><span class="line"><span class="javascript">         <span class="attr">id</span>:id,</span></span><br><span class="line"><span class="javascript">         <span class="attr">go</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">             <span class="built_in">console</span>.log(<span class="string">&quot;我是小狗勾&quot;</span>);</span></span><br><span class="line"><span class="javascript">         &#125;</span></span><br><span class="line"><span class="javascript">     &#125;</span></span><br><span class="line"><span class="javascript"> <span class="comment">//ES6的语法</span></span></span><br><span class="line"><span class="javascript">     <span class="keyword">let</span> person2=&#123;</span></span><br><span class="line"><span class="javascript">         name,</span></span><br><span class="line"><span class="javascript">         id,</span></span><br><span class="line"><span class="javascript">         <span class="function"><span class="title">go</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">&quot;我是小狗勾&quot;</span>); </span></span><br><span class="line"><span class="javascript">         &#125;</span></span><br><span class="line"><span class="javascript">     &#125;</span></span><br><span class="line"><span class="javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如果key和变量的名字一致，可以只定义一次，如果value是一个函数可以把<code>:funbction</code>去掉</p><h2 id="对象解构"><a href="#对象解构" class="headerlink" title="对象解构"></a>对象解构</h2><p>可以快捷获取对象的属性和行为</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">     <span class="keyword">var</span> name=<span class="string">&quot;展示干&quot;</span>;</span></span><br><span class="line"><span class="javascript">     <span class="keyword">var</span> id=<span class="string">&quot;123&quot;</span>;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">     <span class="keyword">let</span> person=&#123;</span></span><br><span class="line"><span class="javascript">         <span class="attr">name</span>:name,</span></span><br><span class="line"><span class="javascript">         <span class="attr">id</span>:id,</span></span><br><span class="line"><span class="javascript">         <span class="attr">go</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">             <span class="built_in">console</span>.log(<span class="string">&quot;我是小狗勾&quot;</span>);</span></span><br><span class="line"><span class="javascript">         &#125;</span></span><br><span class="line"><span class="javascript">     &#125;</span></span><br><span class="line"><span class="javascript">     <span class="comment">//之前的方式</span></span></span><br><span class="line"><span class="javascript">     <span class="comment">//var name=person.name;</span></span></span><br><span class="line"><span class="javascript">     <span class="comment">//var id=person.id;</span></span></span><br><span class="line"><span class="javascript">     <span class="comment">//或者</span></span></span><br><span class="line"><span class="javascript">     <span class="comment">//var name=person[&quot;name&quot;];</span></span></span><br><span class="line"><span class="javascript">     <span class="comment">//var id=person[&quot;id&quot;];</span></span></span><br><span class="line"><span class="javascript">     <span class="comment">//person[&quot;go&quot;]();</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">     <span class="comment">//ES6对接解构，语法可以写成</span></span></span><br><span class="line"><span class="javascript">     <span class="keyword">var</span> &#123;name,id&#125; =person;</span></span><br><span class="line"><span class="javascript">     <span class="built_in">console</span>.log(name,id)</span></span><br><span class="line"><span class="javascript">     </span></span><br><span class="line"><span class="javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这样可以快速的获取对象的属性和方法</p><h2 id="传播操作符"><a href="#传播操作符" class="headerlink" title="传播操作符"></a>传播操作符</h2><p>快速把对象的值赋值给另外一个对象</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">     <span class="keyword">var</span> name=<span class="string">&quot;展示干&quot;</span>;</span></span><br><span class="line"><span class="javascript">     <span class="keyword">var</span> id=<span class="string">&quot;123&quot;</span>;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">     <span class="keyword">let</span> person=&#123;</span></span><br><span class="line"><span class="javascript">         <span class="attr">name</span>:name,</span></span><br><span class="line"><span class="javascript">         <span class="attr">id</span>:id,</span></span><br><span class="line"><span class="javascript">         <span class="attr">go</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">             <span class="built_in">console</span>.log(<span class="string">&quot;我是小狗勾&quot;</span>);</span></span><br><span class="line"><span class="javascript">         &#125;,</span></span><br><span class="line"><span class="javascript">         <span class="attr">phone</span>:<span class="number">1234</span></span></span><br><span class="line"><span class="javascript">     &#125;</span></span><br><span class="line"><span class="javascript">     <span class="keyword">var</span> &#123;name,...newperson&#125;=person;</span></span><br><span class="line"><span class="javascript">     <span class="built_in">console</span>.log(newperson)</span></span><br><span class="line"><span class="javascript">     </span></span><br><span class="line"><span class="javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://gcore.jsdelivr.net/gh/code-anan/image/20220406145409.png"></p><p>可以看到除了我们取出来的name的值，person的其他的值赋值给了newperson，这个的使用具有特定的场景只有有这个需求的时候才能理解他的作用</p><h2 id="Map和Reduce数组"><a href="#Map和Reduce数组" class="headerlink" title="Map和Reduce数组"></a>Map和Reduce数组</h2><p>map数组：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">     <span class="keyword">var</span> arr=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span></span><br><span class="line"><span class="javascript">     <span class="keyword">var</span> newarr=arr.map(<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> e*e;</span></span><br><span class="line"><span class="javascript">     &#125;)</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">     <span class="keyword">var</span> newarr2=arr.map(<span class="function"><span class="params">e</span>=&gt;</span>e*e)</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">     <span class="keyword">var</span> studentlist=[&#123;<span class="attr">name</span>:<span class="string">&quot;小红&quot;</span>,<span class="attr">age</span>:<span class="number">1</span>&#125;,&#123;<span class="attr">name</span>:<span class="string">&quot;小白&quot;</span>,<span class="attr">age</span>:<span class="number">5</span>&#125;,&#123;<span class="attr">name</span>:<span class="string">&quot;小蓝&quot;</span>,<span class="attr">age</span>:<span class="number">31</span>&#125;]</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">     <span class="keyword">var</span> newlist=studentlist.map(<span class="function"><span class="params">student</span>=&gt;</span>&#123;</span></span><br><span class="line"><span class="javascript">         student.age=student.age+<span class="number">1</span>;</span></span><br><span class="line"><span class="javascript">         student.check=<span class="literal">true</span>;</span></span><br><span class="line"><span class="javascript">         <span class="keyword">return</span> student;</span></span><br><span class="line"><span class="javascript">     &#125;)</span></span><br><span class="line"><span class="javascript">     <span class="built_in">console</span>.log(newarr2)</span></span><br><span class="line"><span class="javascript">     <span class="built_in">console</span>.log(newlist)</span></span><br><span class="line"><span class="javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Reduce数组：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">     <span class="keyword">var</span> arr=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span></span><br><span class="line"><span class="javascript">     <span class="keyword">var</span> sum=arr.reduce(<span class="function">(<span class="params">a,b</span>)=&gt;</span>a+b)</span></span><br><span class="line"><span class="javascript">     <span class="built_in">console</span>.log(sum)</span></span><br><span class="line"><span class="javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>计算方式是先算前两个 然后合并成一个值再和后面的值进行计算</p><p><code>总结：这些ES6的语法可以在nodejs、uniapp、微信小程序中使用</code></p><h1 id="NPM包管理器"><a href="#NPM包管理器" class="headerlink" title="NPM包管理器"></a>NPM包管理器</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>官网<a href="https://www.npmjs.com/">npm (npmjs.com)</a></p><p>npm全称Node Package Manager，是NodeJS的包管理工具，里面所有的模块都是开源免费的，也是Node的包管理工具，相当于前端的maven</p><p>作用：1.快速构建nodejs工程 2.快速安装和依赖第三方模块 上面用的mysql redis等</p><h2 id="构建nodejs工程"><a href="#构建nodejs工程" class="headerlink" title="构建nodejs工程"></a>构建nodejs工程</h2><p>只需要输入指令<code>npm init</code>，然后会让你输入包名版本等按照默认的确定即可(后面加上-y 会生成默认的属性)，最后会生成一个<code>package.json</code>的文件，也可以在这里修改刚才定义的属性</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;dependencies&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;mysql&quot;</span>: <span class="string">&quot;^2.18.1&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;src&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;version&quot;</span>: <span class="string">&quot;1.0.0&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;main&quot;</span>: <span class="string">&quot;db.js&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;devDependencies&quot;</span>: &#123;&#125;,</span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;test&quot;</span>: <span class="string">&quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;author&quot;</span>: <span class="string">&quot;lwl&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;license&quot;</span>: <span class="string">&quot;ISC&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;description&quot;</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其作用类似于maven项目中的pom.xml</p><h2 id="快速安装和依赖第三方模块"><a href="#快速安装和依赖第三方模块" class="headerlink" title="快速安装和依赖第三方模块"></a>快速安装和依赖第三方模块</h2><p>安装第三方模块的指令为<code>npm install xxx</code>或者<code>npm i xxx</code>参考上面使用的<code>npm install mysql</code>具体某个版本号在后面加上@即可</p><p>安装路径可以看到在项目node_modules下同样在<code>package.json</code>中可以看到安装的版本，在node中使用只需要<code>require</code>关键字即可</p><p>package.json中的依赖 使用<code>npm install</code>命令可以直接全部下载</p><p>卸载模块<code>nom uninstall vue jquery</code></p><h1 id="Babel"><a href="#Babel" class="headerlink" title="Babel"></a>Babel</h1><h2 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h2><p>ES6中的有些语法在浏览器或者Node.js中无法执行，Babel是一个广泛使用的转码器可以将ES6的代码转为ES5的代码从而在现有环境使用</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>安装命令行代码工具</p><p><code>npm install -g babel-cli</code></p><p>查看版本<code>babel --version</code></p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><ol><li><p>创建babel文件夹</p></li><li><p>初始化项目<code>npm init -y</code></p></li><li><p>创建node文件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="keyword">const</span> newarr=arr.map(<span class="function"><span class="params">res</span>=&gt;</span>res*<span class="number">2</span>);</span><br><span class="line"><span class="built_in">console</span>.log(newarr)</span><br><span class="line"><span class="string">``</span></span><br><span class="line"><span class="number">4.</span> 配置.babelrc，在项目根目录下，改文件用来设置转码规则和插件，基本格式为</span><br><span class="line"></span><br><span class="line"><span class="string">``</span><span class="string">`proper</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">    &quot;presets&quot;:[&quot;es2015&quot;],</span></span><br><span class="line"><span class="string">    &quot;plugins&quot;: []</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure></li><li><p>安装转码器，在项目中安装<code>npm install --save-dev babel-preset-es2015</code></p></li><li><p>执行（最好在cmd下）<code>babel src -d dist</code>表示把src下所有的node文件都转换到dist目录下<img src="https://gcore.jsdelivr.net/gh/code-anan/image/20220408114146.png"></p></li></ol><p>在dist下可以看到确实转换成es5的语法了</p><h2 id="自定义脚本"><a href="#自定义脚本" class="headerlink" title="自定义脚本"></a>自定义脚本</h2><p>通过上面的执行命令虽然可以运行，但是比较繁琐，还可以通过改写<code>package.json</code>的方式实现</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;build&quot;</span>: <span class="string">&quot;babel src -d dist&quot;</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>然后执行<code>npm run build</code>即可运行，原理其实是一样的</p><h1 id="模块化"><a href="#模块化" class="headerlink" title="模块化"></a>模块化</h1><h2 id="CommentJS规范"><a href="#CommentJS规范" class="headerlink" title="CommentJS规范"></a>CommentJS规范</h2><p>先定义一个js，然后把他导出</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> sum=<span class="function">(<span class="params">a,b</span>)=&gt;</span>a+b;</span><br><span class="line"><span class="keyword">var</span> sub=<span class="function">(<span class="params">a,b</span>)=&gt;</span>a-b;</span><br><span class="line"><span class="keyword">var</span> mul=<span class="function">(<span class="params">a,b</span>)=&gt;</span>a*b;</span><br><span class="line"><span class="keyword">var</span> div=<span class="function">(<span class="params">a,b</span>)=&gt;</span>a/b;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports=&#123;</span><br><span class="line">    sum,sub,mul,div</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://gcore.jsdelivr.net/gh/code-anan/image/20220408141120.png"></p><p>然后像引入第三方模块一样导入即可使用，与面向对象相似了</p><h2 id="ES6规范"><a href="#ES6规范" class="headerlink" title="ES6规范"></a>ES6规范</h2><p>同样先创建一个js文件使用ES6语法格式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">getuserlist</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;获取列表&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">getuser</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;获取用户&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//下面是第二种写法</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span>&#123;</span><br><span class="line">    <span class="function"><span class="title">getuserlist</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;获取列表&quot;</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="title">getuser</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;获取用户&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://gcore.jsdelivr.net/gh/code-anan/image/20220408143025.png"></p><p>如果上面使用第二种方式应写为</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> user <span class="keyword">from</span> <span class="string">&quot;./userApi&quot;</span>;</span><br><span class="line">user.getuser();</span><br><span class="line">user.getuserlist();</span><br></pre></td></tr></table></figure><p>需要注意的是node默认不支持es6的语法 所以需要使用babel进行降级，这里不再重复演示了</p><h1 id="Webpack"><a href="#Webpack" class="headerlink" title="Webpack"></a>Webpack</h1><p>Webpack是一个前端资源加载、打包工具，他能根据模块的依赖关系进行静态分析，然后将这些模块按照指定的规则生成相应的静态资源，简单来说就是可以将多种静态资源js、css、less转换成一个静态文件，减少页面请求</p><h2 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h2><p>执行指令<code>npm install -g webpack webpack-cli</code></p><p>安装后查看版本号<code>webpack -v</code></p><h2 id="使用-1"><a href="#使用-1" class="headerlink" title="使用"></a>使用</h2><p>首先创建一个新的文件夹项目webpack并且src下生成<code>main.js</code>,<code>common.js</code>,<code>util.js</code>并且使用<code>npm init -y</code>生成一个nodejs项目</p><p><img src="https://gcore.jsdelivr.net/gh/code-anan/image/20220408162736.png"></p><p>util.js我们使用上面的即可</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> sum=<span class="function">(<span class="params">a,b</span>)=&gt;</span>a+b;</span><br><span class="line"><span class="keyword">var</span> sub=<span class="function">(<span class="params">a,b</span>)=&gt;</span>a-b;</span><br><span class="line"><span class="keyword">var</span> mul=<span class="function">(<span class="params">a,b</span>)=&gt;</span>a*b;</span><br><span class="line"><span class="keyword">var</span> div=<span class="function">(<span class="params">a,b</span>)=&gt;</span>a/b;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports=&#123;</span><br><span class="line">    sum,sub,mul,div</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>common.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports.info=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;啦啦啦&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">module</span>.exports.log=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;我是日志&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>main.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> util=<span class="built_in">require</span>(<span class="string">&quot;./util&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> common=<span class="built_in">require</span>(<span class="string">&quot;./common&quot;</span>);</span><br><span class="line"></span><br><span class="line">common.info();</span><br><span class="line"><span class="built_in">console</span>.log(util.sub(<span class="number">4</span>,<span class="number">1</span>));</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>接着创建一个<code>webpack.config.js</code>文件配置打包规则</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path=<span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>)</span><br><span class="line"><span class="comment">//定义js打包的规则</span></span><br><span class="line"><span class="built_in">module</span>.exports=&#123;</span><br><span class="line">    <span class="comment">//编译打包的入口</span></span><br><span class="line">    <span class="attr">entry</span>:<span class="string">&quot;./src/main.js&quot;</span>,</span><br><span class="line">    <span class="attr">output</span>:&#123;</span><br><span class="line">        <span class="comment">//定义输出的指定目录</span></span><br><span class="line">        <span class="attr">path</span>:path.resolve(__dirname,<span class="string">&quot;./dist&quot;</span>),</span><br><span class="line">        <span class="comment">//合并的js文件名称</span></span><br><span class="line">        <span class="attr">filename</span>:<span class="string">&quot;bundle.js&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后执行<code>webpack</code>就可以得到合并的js文件，并且生成一个html页进行测试得到确实生成为一个js文件了<img src="https://gcore.jsdelivr.net/gh/code-anan/image/20220408164835.png"></p><h2 id="Webpack合并css文件"><a href="#Webpack合并css文件" class="headerlink" title="Webpack合并css文件"></a>Webpack合并css文件</h2><p>Webpack本身只能处理JavaScript模块，如果要处理其他类型的文件，需要使用loader进行转换</p><p>css-loader是将css装载到JavaScript ；style-loader是让JavaScript认识css</p><p>安装命令<code>npm install --save-dev style-loader css-loader</code></p><p>然后修改<code>webpack.config.js</code>文件如下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path=<span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>)</span><br><span class="line"><span class="comment">//定义js打包的规则</span></span><br><span class="line"><span class="built_in">module</span>.exports=&#123;</span><br><span class="line">    <span class="comment">//编译打包的入口</span></span><br><span class="line">    <span class="attr">entry</span>:<span class="string">&quot;./src/main.js&quot;</span>,</span><br><span class="line">    <span class="attr">output</span>:&#123;</span><br><span class="line">        <span class="comment">//定义输出的指定目录</span></span><br><span class="line">        <span class="attr">path</span>:path.resolve(__dirname,<span class="string">&quot;./dist&quot;</span>),</span><br><span class="line">        <span class="comment">//合并的js文件名称</span></span><br><span class="line">        <span class="attr">filename</span>:<span class="string">&quot;bundle.js&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">module</span>:&#123;</span><br><span class="line">        <span class="attr">rules</span>:[&#123;</span><br><span class="line">            <span class="attr">test</span>:<span class="regexp">/\.css$/</span>,<span class="comment">//把项目中所有的css文件打包</span></span><br><span class="line">            use:[<span class="string">&quot;style-loader&quot;</span>,<span class="string">&quot;css-loader&quot;</span>]</span><br><span class="line">        &#125;]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在src下创建一个css文件</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span>&#123;</span><br><span class="line">    <span class="attribute">background</span>: yellow;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>main.js中加入这个css文件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">require</span>(<span class="string">&quot;./style.css&quot;</span>);</span><br></pre></td></tr></table></figure><p><code>package.json</code>中加入webpack的执行脚本 方便执行</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;webpack&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;version&quot;</span>: <span class="string">&quot;1.0.0&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;description&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;main&quot;</span>: <span class="string">&quot;index.js&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;test&quot;</span>: <span class="string">&quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;dev&quot;</span>: <span class="string">&quot;webpack -w&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;keywords&quot;</span>: [],</span><br><span class="line">  <span class="attr">&quot;author&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;license&quot;</span>: <span class="string">&quot;ISC&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;devDependencies&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;css-loader&quot;</span>: <span class="string">&quot;^6.7.1&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;style-loader&quot;</span>: <span class="string">&quot;^3.3.1&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;webpack-cli&quot;</span>: <span class="string">&quot;^4.9.2&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>使用<code>npm run dev</code> 即可看到效果，如果打包其他类型的文件需要下载不同的loader文件即可</p><h1 id="Vue-element-admin初体验"><a href="#Vue-element-admin初体验" class="headerlink" title="Vue-element-admin初体验"></a>Vue-element-admin初体验</h1><p>首先是项目地址，克隆到本地即可<code>git clone https://github.com/PanJiaChen/vue-element-admin.git</code></p><p>然后使用vscode打开此文件夹之后终端输入<code>npm install</code>即可把所有的依赖下载完毕，启动的话本地<code>npm run dev</code>然后<a href="http://localhost:9527/">http://localhost:9527</a> 即可打开，观察源码可以看到上面的知识点大部分都用到了</p>]]></content>
      
      
      <categories>
          
          <category> 记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NodeJS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Swagger技术学习</title>
      <link href="post/swagger/"/>
      <url>post/swagger/</url>
      
        <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><ul><li>号称世界上最流行的API框架</li><li>Restful api文档在线自动生成工具=》Api文档与API定义同步更新</li><li>直接运行，可以在线测试API接口</li></ul><p>官网：<a href="https://swagger.io/">API Documentation &amp; Design Tools for Teams | Swagger</a></p><h1 id="SpringBoot集成swagger"><a href="#SpringBoot集成swagger" class="headerlink" title="SpringBoot集成swagger"></a>SpringBoot集成swagger</h1><ol><li>新建springboot项目</li><li>导入相关依赖</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger-ui<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="3"><li>编写一个hellocontroller</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello world!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>配置swagger（一般都在config目录下）</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableSwagger2</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SwaggerConfig</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="5"><li>测试运行：<a href="http://localhost:8999/swagger-ui.html">http://localhost:8999/swagger-ui.html</a></li></ol><p><img src="https://gcore.jsdelivr.net/gh/code-anan/image/20220421143722.png"></p><p>需要注意的是springboot版本不能太高，我这里换成了2.4.0版本的springboot</p><p>swagger的ui页面我们也可以换用bottstrap的 更好看一点</p><p>将上面的<code>springfox-swagger-ui</code>依赖换成下面的</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.xiaoymin<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>swagger-bootstrap-ui<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.9.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>访问路径变成<code>/doc.html</code><img src="https://gcore.jsdelivr.net/gh/code-anan/image/d08b5c578071398bb42d31ac31ab36d.png"></p><h1 id="配置Swagger"><a href="#配置Swagger" class="headerlink" title="配置Swagger"></a>配置Swagger</h1><p>Swagger的bean实例Docket</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableSwagger2</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SwaggerConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建了一个docket的bean实例</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Docket <span class="title">docket</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.SWAGGER_2).apiInfo(apiInfo());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> ApiInfo <span class="title">apiInfo</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Contact contact = <span class="keyword">new</span> Contact(<span class="string">&quot;lwl&quot;</span>, <span class="string">&quot;https://weilong98.com/&quot;</span>, <span class="string">&quot;719603766@qq.com&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>  <span class="keyword">new</span> ApiInfo(<span class="string">&quot;我的swagger文档&quot;</span>,</span><br><span class="line">               <span class="string">&quot;gogogo&quot;</span>,</span><br><span class="line">               <span class="string">&quot;1.0&quot;</span>,</span><br><span class="line">               <span class="string">&quot;https://weilong98.com/&quot;</span>,</span><br><span class="line">                contact,</span><br><span class="line">               <span class="string">&quot;Apache 2.0&quot;</span>,</span><br><span class="line">               <span class="string">&quot;http://www.apache.org/licenses/LICENSE-2.0&quot;</span>,</span><br><span class="line">                <span class="keyword">new</span> ArrayList());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这里我们可以配置自己的一些信息<img src="https://gcore.jsdelivr.net/gh/code-anan/image/20220421151359.png"></p><h1 id="Swagger配置扫描接口"><a href="#Swagger配置扫描接口" class="headerlink" title="Swagger配置扫描接口"></a>Swagger配置扫描接口</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableSwagger2</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SwaggerConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建了一个docket的bean实例</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Docket <span class="title">docket</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.SWAGGER_2)</span><br><span class="line">                .apiInfo(apiInfo())</span><br><span class="line">                .select()</span><br><span class="line">                <span class="comment">//RequestHandlerSelectors.basePackage 设置扫描接口的方式（基于包的方式扫描）</span></span><br><span class="line">                <span class="comment">//any  扫描全部</span></span><br><span class="line">                <span class="comment">//none  全都不扫描</span></span><br><span class="line">                <span class="comment">//withMethodAnnotation 在有某个注解的方法上才扫描</span></span><br><span class="line">                <span class="comment">//withClassAnnotation 在有某个注解的类上才扫描</span></span><br><span class="line">                .apis(RequestHandlerSelectors.basePackage(<span class="string">&quot;com.weilong.swagger.controller&quot;</span>))</span><br><span class="line">                <span class="comment">//过滤的路径</span></span><br><span class="line">                <span class="comment">//ant过滤设置的某些路径 还有any none的可以忽略掉</span></span><br><span class="line">                .paths(PathSelectors.ant(<span class="string">&quot;com.weilong.swagger.controller&quot;</span>))</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> ApiInfo <span class="title">apiInfo</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Contact contact = <span class="keyword">new</span> Contact(<span class="string">&quot;lwl&quot;</span>, <span class="string">&quot;https://weilong98.com/&quot;</span>, <span class="string">&quot;719603766@qq.com&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>  <span class="keyword">new</span> ApiInfo(<span class="string">&quot;我的swagger文档&quot;</span>,</span><br><span class="line">               <span class="string">&quot;gogogo&quot;</span>,</span><br><span class="line">               <span class="string">&quot;1.0&quot;</span>,</span><br><span class="line">               <span class="string">&quot;https://weilong98.com/&quot;</span>,</span><br><span class="line">                contact,</span><br><span class="line">               <span class="string">&quot;Apache 2.0&quot;</span>,</span><br><span class="line">               <span class="string">&quot;http://www.apache.org/licenses/LICENSE-2.0&quot;</span>,</span><br><span class="line">                <span class="keyword">new</span> ArrayList());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>设置哪些扫描成接口</p><h2 id="设置swagger是否自己启动"><a href="#设置swagger是否自己启动" class="headerlink" title="设置swagger是否自己启动"></a>设置swagger是否自己启动</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">return new Docket(DocumentationType.SWAGGER_2)</span><br><span class="line">        .apiInfo(apiInfo())</span><br><span class="line">        .enable(false)</span><br><span class="line">        .select()</span><br></pre></td></tr></table></figure><p>默认为true，如果为false那么无法在浏览器中访问</p><h2 id="小题目"><a href="#小题目" class="headerlink" title="小题目"></a>小题目</h2><p>如何在生产环境中可以访问，正式环境无法访问swagger？</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">public Docket docket(Environment environment)&#123;</span><br><span class="line">    Profiles profiles = Profiles.of(&quot;dev&quot;,&quot;test&quot;);</span><br><span class="line">    boolean flag = environment.acceptsProfiles(profiles);</span><br><span class="line">    return new Docket(DocumentationType.SWAGGER_2)</span><br><span class="line">            .apiInfo(apiInfo())</span><br><span class="line">            .enable(flag)</span><br><span class="line">            .select()</span><br><span class="line">            //RequestHandlerSelectors.basePackage 设置扫描接口的方式（基于包的方式扫描）</span><br><span class="line">            //any  扫描全部</span><br><span class="line">            //none  全都不扫描</span><br><span class="line">            //withMethodAnnotation 在有某个注解的方法上才扫描</span><br><span class="line">            //withClassAnnotation 在有某个注解的类上才扫描</span><br><span class="line">            .apis(RequestHandlerSelectors.basePackage(&quot;com.weilong.swagger.controller&quot;))</span><br><span class="line">            .build();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>思路就是设置可以使用的环境，再获取到当前的环境进行动态的改变</p><h1 id="分组和注解"><a href="#分组和注解" class="headerlink" title="分组和注解"></a>分组和注解</h1><h2 id="分组"><a href="#分组" class="headerlink" title="分组"></a>分组</h2><p>分组的话也非常简单，只需要创建多个Docket实例即可,给groupname赋值即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> Docket <span class="title">docket1</span><span class="params">()</span></span>&#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.SWAGGER_2).groupName(<span class="string">&quot;A&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Bean</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> Docket <span class="title">docket2</span><span class="params">()</span></span>&#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.SWAGGER_2).groupName(<span class="string">&quot;B&quot;</span>);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p><img src="https://gcore.jsdelivr.net/gh/code-anan/image/20220421164953.png"></p><h2 id="一些常用的注解"><a href="#一些常用的注解" class="headerlink" title="一些常用的注解"></a>一些常用的注解</h2><p>实体类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//@Api(注释一般放在模块中)</span></span><br><span class="line"><span class="meta">@ApiModel(&quot;用户实体类&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;姓名&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;用户id&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接口中：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Api(value = &quot;HelloController&quot;,tags = &#123;&quot;第一个controller&quot;&#125;)</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="meta">@ApiOperation(&quot;输入hello&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello world!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/user&quot;)</span></span><br><span class="line">    <span class="meta">@ApiOperation(&quot;获取用户信息&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">getuser</span><span class="params">(<span class="meta">@ApiParam(&quot;用户id&quot;)</span> Integer id)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> User();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>效果：</p><p><img src="https://gcore.jsdelivr.net/gh/code-anan/image/20220421180514.png"></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>可以给一些属性和接口增加注释，接口文档可以实时更新，企业中使用较多</p>]]></content>
      
      
      <categories>
          
          <category> Swagger </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Swagger </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringMVC知识点回顾</title>
      <link href="post/SpringMVCkeys/"/>
      <url>post/SpringMVCkeys/</url>
      
        <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>基于spring的一个框架，实际上是spring的一个模块专门用来做web开发，底层是servlet</p><p>SpringMVC能够创建对象放入到容器中，springMVC中存放的就是控制器对象，springMVC中有一个对象是DispatcherServlet（中央调度器）：他负责接收用户的所有请求，然后把请求转发给我们的Controller对象，最后Controller对象处理请求</p><h1 id="初步了解"><a href="#初步了解" class="headerlink" title="初步了解"></a>初步了解</h1><p>通过示例可以最直观的理解它的运行步骤和模式</p><h2 id="新建一个项目"><a href="#新建一个项目" class="headerlink" title="新建一个项目"></a>新建一个项目</h2><p><img src="https://gcore.jsdelivr.net/gh/code-anan/image/20211230184240.png"></p><p>并创建需要的java、resources文件夹</p><h2 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--jsp servlet依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--springmvc的依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="web-xml配置"><a href="#web-xml配置" class="headerlink" title="web.xml配置"></a>web.xml配置</h2><p>创建中央调度器对象DispatcherServlet，它是一个servlet 父类继承HttpServlet它也叫做前端控制器，负责接收用户发起的请求调用其他的控制器对象并把请求的处理结果显示给用户</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">&quot;4.0&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:springmvc.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>*.do<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在DispatcherServlet对象创建过程中，会同时创建好springmvc容器对象读取springmvc的配置文件，把这个配置文件中的对象都创建好，当用户发起请求时就可以直接使用对象了</p><p>servlet的初始化会执行init（）方法，DispatcherServlet在init中创建容器读取配置文件并把容器对象放入到servletContext中</p><p><load-on-startup>表示tomcat启动后创建对象的顺序，数值越小tomcat创建对象的时间越早，但是要大于等于0</p><p>init-param标签的值为指定springmvc配置文件的属性和文件位置，否则springmvc创建容器对象会默认读取/WEB-INF/<servlet-name>-servlet.xml文件</p><p>url-pattern表示的是路由的地址，他的值可以有两种方式，第一种是像上面一样使用扩展名的方式*.do表示访问路由为这个值时才会把请求都交给该中央调度器处理；第二种方式是使用’/‘；下面会详细介绍</p><h2 id="创建发起请求的页面"><a href="#创建发起请求的页面" class="headerlink" title="创建发起请求的页面"></a>创建发起请求的页面</h2><p>这里简单创建一个jsp页面即可</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; %&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>这是我发起请求的测试<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;some.do&quot;</span>&gt;</span>点击发起请求<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="创建控制器类"><a href="#创建控制器类" class="headerlink" title="创建控制器类"></a>创建控制器类</h2><p>控制器类使用@Controller注解用来创建对象，把对象放入到springmvc容器中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/some.do&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">doSome</span><span class="params">()</span></span>&#123;</span><br><span class="line">        ModelAndView modelAndView = <span class="keyword">new</span> ModelAndView();</span><br><span class="line">        modelAndView.addObject(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;lwl&quot;</span>);</span><br><span class="line">        modelAndView.addObject(<span class="string">&quot;age&quot;</span>,<span class="string">&quot;23&quot;</span>);</span><br><span class="line">        modelAndView.setViewName(<span class="string">&quot;/show.jsp&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> modelAndView;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>doSome方法用来处理some.do的请求， @RequestMapping:请求映射，作用是把一个请求地址和一个方法绑定在一起，一个请求指定一个方法处理；该注解的位置可以放到方法上面也可以放到类;@RequestMapping的属性值value可以省略并且可以有多个值,例如</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &#123;&quot;/some.do&quot;,&quot;/other.do&quot;&#125;)</span></span><br></pre></td></tr></table></figure><p>属性method可以指定请求方式，值为get或者post不写默认get请求</p><p>modelAndView.setViewName表示指定识图的路径，执行forward操作，等同于servlet的request.getRequestDispatcher().forward()</p><h2 id="展示页面"><a href="#展示页面" class="headerlink" title="展示页面"></a>展示页面</h2><p>简单写个展示页面即可</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; %&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h4</span>&gt;</span>$&#123;name&#125;的年龄为$&#123;age&#125;<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="创建springmvc的配置文件"><a href="#创建springmvc的配置文件" class="headerlink" title="创建springmvc的配置文件"></a>创建springmvc的配置文件</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line">     <span class="comment">&lt;!--声明组件扫描器--&gt;</span>   </span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.weilong.controller&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="测试结果"><a href="#测试结果" class="headerlink" title="测试结果"></a>测试结果</h2><p><img src="https://gcore.jsdelivr.net/gh/code-anan/image/20220104182825.png"></p><p><img src="https://gcore.jsdelivr.net/gh/code-anan/image/20220104182851.png"></p><p>这样一个最基本的springmvc的使用就完成了</p><h1 id="加深理解"><a href="#加深理解" class="headerlink" title="加深理解"></a>加深理解</h1><h2 id="视图解析器"><a href="#视图解析器" class="headerlink" title="视图解析器"></a>视图解析器</h2><p>为了防止用户可以直接访问资源文件，我们可以把资源文件放到/WEB-INF下<img src="https://gcore.jsdelivr.net/gh/code-anan/image/20220105153417.png"></p><p>但是这样的问题是,我们在controller中指定资源文件的路径会变得麻烦，所以这里引入<code>视图解析器</code>的使用</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--添加视图解析器，方便开发人员设置视图文件的路径--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/WEB-INF/pages/&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.jsp&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>所以这里控制器类的路径就可以改写成</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">modelAndView.setViewName(<span class="string">&quot;show&quot;</span>);</span><br></pre></td></tr></table></figure><h2 id="处理器映射器（用注解的方式不要）"><a href="#处理器映射器（用注解的方式不要）" class="headerlink" title="处理器映射器（用注解的方式不要）"></a>处理器映射器（用注解的方式不要）</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--处理器映射器--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>这个映射器会根据bean的名字进行映射，所以需要同时添加uri的bean标签用来匹配对应的controller，这种方式只适用于Controller中是实现Controller接口的方式</p><h2 id="处理器适配器（用注解的方式不要）"><a href="#处理器适配器（用注解的方式不要）" class="headerlink" title="处理器适配器（用注解的方式不要）"></a>处理器适配器（用注解的方式不要）</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--处理器适配器--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>跟处理器映射器同时存在，根据uri的class值找到对应的controller接口实现类，使用注解的方式可以直接不用写</p><h2 id="RestController"><a href="#RestController" class="headerlink" title="RestController"></a>RestController</h2><p>@RestController放在类的上面，表示这个类不会被试图解析器解析，这样方法中返回值类型是String时，那么就只会返回一个字符串</p><h2 id="RestFul风格"><a href="#RestFul风格" class="headerlink" title="RestFul风格"></a>RestFul风格</h2><blockquote><p>Restful是一种软件架构风格、设计风格，而不是标准，只是提供了一组设计原则和约束条件。它主要用于客户端和服务器交互类的软件。基于这个风格设计的软件可以更简洁，更有层次，更易于实现缓存等机制。 ——百度百科</p></blockquote><p>第一种效果是如下图</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/get/&#123;name&#125;/&#123;age&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">(<span class="meta">@PathVariable</span> String name, <span class="meta">@PathVariable</span> Integer age, Model model)</span></span>&#123;</span><br><span class="line">        model.addAttribute(<span class="string">&quot;mg&quot;</span>,name+<span class="string">&quot;的年龄为&quot;</span>+age);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;showNameAge&quot;</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><img src="https://gcore.jsdelivr.net/gh/code-anan/image/20220109120839.png"></p><p>如果使用以前的方式那么url的写法是<a href="http://localhost:8088/get/?name=zhangsan&amp;&amp;age=18,%E8%BF%99%E7%A7%8D%E9%A3%8E%E6%A0%BC%E7%9C%8B%E8%B5%B7%E6%9D%A5%E6%9B%B4%E7%AE%80%E6%B4%81%E6%9C%89%E5%B1%82%E6%AC%A1%EF%BC%8C%E5%90%8C%E6%97%B6%E4%B9%9F%E6%9B%B4%E5%8A%A0%E5%AE%89%E5%85%A8">http://localhost:8088/get/?name=zhangsan&amp;&amp;age=18,这种风格看起来更简洁有层次，同时也更加安全</a></p><p>第二种是根据不同的请求方式，即便路由地址一样但是可以执行不同的操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;/operate&quot;,method = RequestMethod.GET)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">useGetMethod</span><span class="params">(Model model)</span></span>&#123;</span><br><span class="line">        model.addAttribute(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;发起了get请求&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;operate&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/operate&quot;,method = RequestMethod.POST)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">usePostMethod</span><span class="params">(Model model)</span></span>&#123;</span><br><span class="line">        model.addAttribute(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;发起了post请求&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;operate&quot;</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="转发和重定向"><a href="#转发和重定向" class="headerlink" title="转发和重定向"></a>转发和重定向</h2><p>forward：表示转发，实现request.getRequestDispatcher(“xx.jsp”).forward();使用forward不能和视图解析器一起使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> <span class="string">&quot;forward:/WEB-INF/pages/operate.jsp&quot;</span>;</span><br></pre></td></tr></table></figure><p>如果返回的是ModelAndView类型，则是下面的方式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">modelAndView.setViewName(<span class="string">&quot;forward:/WEB-INF/pages/operate.jsp&quot;</span>);</span><br></pre></td></tr></table></figure><p>redirect：重定向，实现respose.sendRedirect(“xx.jsp”)</p><p>同样不和识图解析器一起使用，并且重定向不能访问WEB-INF下的资源文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">modelAndView.setViewName(<span class="string">&quot;redirect:/operate.jsp&quot;</span>);</span><br></pre></td></tr></table></figure><p>并且重定向时，两次的request作用域不同，数据无法共享</p><h2 id="接收参数"><a href="#接收参数" class="headerlink" title="接收参数"></a>接收参数</h2><h3 id="提交的域名称和处理方法的参数名一致"><a href="#提交的域名称和处理方法的参数名一致" class="headerlink" title="提交的域名称和处理方法的参数名一致"></a>提交的域名称和处理方法的参数名一致</h3><p>提交数据：<a href="http://localhost:8080/hello?name=lwl">http://localhost:8080/hello?name=lwl</a></p><p>处理方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hrllo</span><span class="params">(String name,Model model)</span></span>&#123;</span><br><span class="line">        model.addAttribute(<span class="string">&quot;msg&quot;</span>,name);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;operate&quot;</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="提交的域名称和处理方法的参数名不一致"><a href="#提交的域名称和处理方法的参数名不一致" class="headerlink" title="提交的域名称和处理方法的参数名不一致"></a>提交的域名称和处理方法的参数名不一致</h3><p>提交数据：<a href="http://localhost:8080/hello?username=lwl">http://localhost:8080/hello?username=lwl</a></p><p>处理方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hrllo</span><span class="params">(<span class="meta">@RequestParam(&quot;username&quot;)</span> String name, Model model)</span></span>&#123;</span><br><span class="line">        model.addAttribute(<span class="string">&quot;msg&quot;</span>,name);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;operate&quot;</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>@RequestParam:逐个接受请求参数中，解决请求中参数名和形参名称不一样的问题</p><p>属性：1.value 请求中的参数名称</p><p>2.required 默认为true：表示请求中必须包含此参数 位置一般放到形参前面</p><h3 id="提交的是一个对象"><a href="#提交的是一个对象" class="headerlink" title="提交的是一个对象"></a>提交的是一个对象</h3><p>提交数据：<a href="http://localhost:8080/hello?name=zhangsan&amp;id=3&amp;age=15">http://localhost:8080/hello?name=zhangsan&amp;id=3&amp;age=15</a></p><p>需要先创建一个实体类包含上面的参数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br></pre></td></tr></table></figure><p>处理方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/user&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">(User user)</span></span>&#123;</span><br><span class="line">        System.out.println(user);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;operate&quot;</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>当然提交的数据也可以少部分字段，但是不能有封装实体类没有的属性,否则该字段为null，用对象接收时，不能用@RequestParam注解</p><h2 id="乱码问题"><a href="#乱码问题" class="headerlink" title="乱码问题"></a>乱码问题</h2><p>当我们在jsp上发起post请求时，经常能看到乱码问题<img src="https://gcore.jsdelivr.net/gh/code-anan/image/20220109183239.png"></p><p>这里我们可以选择在web.xml中注册声明过滤器</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--声明过滤器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>characterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--设置项目中使用的编码--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>utf-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--强制请求对象（HttpServletRequest）使用编码的值--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>forceRequestEncoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--强制请求对象（HttpServletResponse）使用编码的值--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>forceResponseEncoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>characterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--表示所有的请求都要经过过滤器过滤--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://gcore.jsdelivr.net/gh/code-anan/image/20220109183908.png"></p><p>可以看到确实起作用了</p><h2 id="处理器方法的返回值"><a href="#处理器方法的返回值" class="headerlink" title="处理器方法的返回值"></a>处理器方法的返回值</h2><ul><li>ModelAndView：有数据和视图，对试图执行forward操作</li><li>Stirng：一般表示视图名称，有@RestController表示一个字符串</li><li>void ：不能表示数据也不能表示视图，在处理ajax的时候可以使用void返回值，通过HttpServletResponse输出数据</li><li>Object：String、Integer、Map、List、User等都是对象，一般把他们作为数据用来相应ajax的请求</li></ul><h2 id="Jackson的使用"><a href="#Jackson的使用" class="headerlink" title="Jackson的使用"></a>Jackson的使用</h2><h3 id="依赖导入"><a href="#依赖导入" class="headerlink" title="依赖导入"></a>依赖导入</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.13.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="代码使用"><a href="#代码使用" class="headerlink" title="代码使用"></a>代码使用</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;/user&quot;,produces = &quot;application/json;charset=utf-8&quot;)</span></span><br><span class="line">   <span class="meta">@ResponseBody</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span> <span class="keyword">throws</span> JsonProcessingException </span>&#123;</span><br><span class="line">       ObjectMapper mapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">       User user = <span class="keyword">new</span> User();</span><br><span class="line">       user.setAge(<span class="number">12</span>);</span><br><span class="line">       user.setId(<span class="number">1</span>);</span><br><span class="line">       user.setName(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">       System.out.println(user);</span><br><span class="line">       String value = mapper.writeValueAsString(user);</span><br><span class="line">       <span class="keyword">return</span> value;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>produces属性是为了防止json串中乱码， @ResponseBody一般和@controller配合使用，加上ResponseBody表示返回的是一个字符串不再走视图解析器</p><p>得到结果如下</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="attr">&quot;id&quot;</span>:<span class="number">1</span>,<span class="attr">&quot;name&quot;</span>:<span class="string">&quot;张三&quot;</span>,<span class="attr">&quot;age&quot;</span>:<span class="number">12</span>&#125;</span><br></pre></td></tr></table></figure><p>上面的produces注解虽然也可以解决，但是如果有多个就会变得麻烦，所以这里我们也可以在springmvc配置文件里面进行配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:message-converters</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.http.converter.StringHttpMessageConverter&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">&quot;UTF-8&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.http.converter.json.MappingJackson2HttpMessageConverter&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;objectMapper&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.http.converter.json.Jackson2ObjectMapperFactoryBean&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;failOnEmptyBeans&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mvc:message-converters</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:annotation-driven</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Fastjson使用"><a href="#Fastjson使用" class="headerlink" title="Fastjson使用"></a>Fastjson使用</h2><h3 id="依赖导入-1"><a href="#依赖导入-1" class="headerlink" title="依赖导入"></a>依赖导入</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.79<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="代码使用-1"><a href="#代码使用-1" class="headerlink" title="代码使用"></a>代码使用</h3><p>把上面的代码稍作修改</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;/user&quot;,produces = &quot;application/json;charset=utf-8&quot;)</span></span><br><span class="line">   <span class="meta">@ResponseBody</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span></span>&#123;</span><br><span class="line">       User user = <span class="keyword">new</span> User();</span><br><span class="line">       user.setAge(<span class="number">12</span>);</span><br><span class="line">       user.setId(<span class="number">1</span>);</span><br><span class="line">       user.setName(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">       System.out.println(user);</span><br><span class="line">       <span class="keyword">return</span> JSON.toJSONString(user);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>得到结果如下</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="attr">&quot;age&quot;</span>:<span class="number">12</span>,<span class="attr">&quot;id&quot;</span>:<span class="number">1</span>,<span class="attr">&quot;name&quot;</span>:<span class="string">&quot;张三&quot;</span>&#125;</span><br></pre></td></tr></table></figure><p>可以看到阿里开发的fastjson还是更符合中国人的习惯</p><h2 id="mvc-annotation-driven驱动"><a href="#mvc-annotation-driven驱动" class="headerlink" title="mvc:annotation-driven驱动"></a>mvc:annotation-driven驱动</h2><p>如果我们controller的返回值类型想转换成是json、xml等数据类型，必须要加上此驱动，它能够完成java对象到json、xml等数据格式的转换</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;/user&quot;,produces = &quot;application/json;charset=utf-8&quot;)</span></span><br><span class="line">  <span class="meta">@ResponseBody</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> User <span class="title">hello</span><span class="params">()</span></span>&#123;</span><br><span class="line">      User user = <span class="keyword">new</span> User();</span><br><span class="line">      user.setAge(<span class="number">12</span>);</span><br><span class="line">      user.setId(<span class="number">1</span>);</span><br><span class="line">      user.setName(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">      System.out.println(user);</span><br><span class="line">      <span class="keyword">return</span> user;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>如果springmvc配置文件不添加此注解驱动</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>那么会报500的错误<img src="https://gcore.jsdelivr.net/gh/code-anan/image/20220109201839.png"></p><p>加上之后，结果变成json形式</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="attr">&quot;id&quot;</span>:<span class="number">1</span>,<span class="attr">&quot;name&quot;</span>:<span class="string">&quot;张三&quot;</span>,<span class="attr">&quot;age&quot;</span>:<span class="number">12</span>&#125;</span><br></pre></td></tr></table></figure><h2 id="url-pattern的第二种值"><a href="#url-pattern的第二种值" class="headerlink" title="url-pattern的第二种值"></a>url-pattern的第二种值</h2><p>url-pattern的值为<code>/</code>时，需要想办法处理静态资源文件</p><p>第一种方式： 配合<a href="mvc:annotation-driven">mvc:annotation-driven</a>和<a href="mvc:default-servlet-handler">mvc:default-servlet-handler</a>使用，这样既可以处理静态资源文件又能处理动态资源文件</p><p>处理静态资源访问还有第二种方式：&lt;mvc:resources mapping=” “ location=”” &gt;</p><p>mvc:resources加入后框架会创建ResourcesHttpRequestHandler这个处理器对象处理静态资源的访问，不依赖tomcat服务器；</p><p>mapping：访问静态资源的uri地址，可以使用通配符**</p><p>location:静态资源在项目中的目录位置</p><p>例如：&lt;mvc:resources mapping=”/images/**” location=”/images/“&gt;</p><p>&lt;mvc:resources mapping=”/js/**” location=”/js/“&gt;</p><h1 id="整合SSM框架"><a href="#整合SSM框架" class="headerlink" title="整合SSM框架"></a>整合SSM框架</h1><p>SSM整合也叫作SSI（Ibatis是mybatis的前身），整合中有容器。第一个容器叫做SpringMVC容器，管理Controller控制器对象，第二个容器Spring容器，管理Service、dao工具类对象；</p><p>service、dao对象定义在spring的配置文件中，让spring管理这些对象；springmvc容器是spring容器的子容器类似于java中的继承，子可以访问父中的内容，在子容器中的Controller可以访问父容器中的service对象，就可以实现controller使用service对象</p><h2 id="实现步骤"><a href="#实现步骤" class="headerlink" title="实现步骤"></a>实现步骤</h2><h3 id="新建项目"><a href="#新建项目" class="headerlink" title="新建项目"></a>新建项目</h3><p><img src="https://gcore.jsdelivr.net/gh/code-anan/image/20220110142643.png"></p><p>这里我们就用自带的webapp项目即可</p><h3 id="添加依赖-1"><a href="#添加依赖-1" class="headerlink" title="添加依赖"></a>添加依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.9<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.13.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>主要添加三个框架依赖、druid连接池，fastjson、mysql驱动还有jsp servlet依赖,spring整合mybatis依赖、jdbc依赖等，然后还有pom.xml文件中build标签下需要添加以下代码</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>false<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br></pre></td></tr></table></figure><p>因为maven工程在默认情况下src/main/java目录下的所有资源文件是不发布到target目录下的，不添加无法编译xml文件</p><h3 id="web-xml配置-1"><a href="#web-xml配置-1" class="headerlink" title="web.xml配置"></a>web.xml配置</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">&quot;4.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--注册DispatcherServlet--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:springmvc.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--spring的监视器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:application.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--注册字符集过滤器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>characterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>utf-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>forceRequestEncoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>forceResponseEncoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>characterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><p>创建DispatcherServlet对象用来创建Controller类对象才能接收用户的请求；注册Spring的监听器ContextLoaderListener才能创建service、dao对象，字符集过滤器为了解决post请求可能出现的乱码问题</p><h3 id="创建需要的包"><a href="#创建需要的包" class="headerlink" title="创建需要的包"></a>创建需要的包</h3><p>创建好需要的Controller、model、dao和service的包</p><p><img src="https://gcore.jsdelivr.net/gh/code-anan/image/20220110145840.png"></p><p>controller包下的StudentController:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StudentService studentService;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/get&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Student&gt; <span class="title">getStudent</span><span class="params">()</span></span>&#123;</span><br><span class="line">        List&lt;Student&gt; list = studentService.selectAllStudent();</span><br><span class="line">        <span class="keyword">for</span>(Student student:list)&#123;</span><br><span class="line">            System.out.println(student);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里我们就以一个查询所有学生信息为例</p><p>dao包下的StudentDao和StudentDao.xml</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">StudentDao</span> </span>&#123;</span><br><span class="line">    <span class="function">List&lt;Student&gt; <span class="title">queryAllStudent</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.weilong.dao.StudentDao&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;queryAllStudent&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.weilong.model.Student&quot;</span>&gt;</span></span><br><span class="line">       select * from student;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><p>model下的实体类对象，还是经典student类（需要跟数据库字段保持一致）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Student&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;id=&quot;</span> + id +</span><br><span class="line">                <span class="string">&quot;, name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>service包下的StudentService和他的实现类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">StudentService</span> </span>&#123;</span><br><span class="line">    <span class="function">List&lt;Student&gt; <span class="title">selectAllStudent</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">studentServiceImpl</span> <span class="keyword">implements</span> <span class="title">StudentService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StudentDao studentDao;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Student&gt; <span class="title">selectAllStudent</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;Student&gt; list = studentDao.queryAllStudent();</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="配置文件填写"><a href="#配置文件填写" class="headerlink" title="配置文件填写"></a>配置文件填写</h3><ul><li>springmvc配置文件</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:mvc</span>=<span class="string">&quot;http://www.springframework.org/schema/mvc&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.weilong.controller&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/WEB-INF/pages&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.jsp&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">mvc:annotation-driven</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>组件扫描器跟识图解析器不需要解释，创建controller和返回视图需要的，mvc:annotation-driven的作用一个是相应ajax请求返回json还有就是可以解决静态资源访问不到的问题</p><ul><li>application.xml(spring的配置文件)</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--声明jdbc.properties文件的位置--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;classpath:jdbc.properties&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--声明数据源，连接数据库--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">init-method</span>=<span class="string">&quot;init&quot;</span> <span class="attr">destroy-method</span>=<span class="string">&quot;close&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.url&#125;&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.username&#125;&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.password&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--创建sqlsessionFactory--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;sqlSessionFactory&quot;</span>  <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;configLocation&quot;</span> <span class="attr">value</span>=<span class="string">&quot;classpath:mybatis.xml&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--创建dao对象--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sqlSessionFactoryBeanName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;sqlSessionFactory&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;basePackage&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.weilong.dao&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--声明service包的位置--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.weilong.service&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>mybatis.xml</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.weilong.dao&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这里我们需要指定映射文件的位置，直接使用包的方式更方便</p><ul><li>jdbc.properties</li></ul><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">jdbc.driver</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="meta">jdbc.url</span>=<span class="string">jdbc:mysql://localhost:3306/lwl</span></span><br><span class="line"><span class="meta">jdbc.username</span>=<span class="string">root</span></span><br><span class="line"><span class="meta">jdbc.password</span>=<span class="string">233</span></span><br></pre></td></tr></table></figure><p>数据库的信息文件，方便修改降低耦合度</p><h3 id="测试结果-1"><a href="#测试结果-1" class="headerlink" title="测试结果"></a>测试结果</h3><p><img src="https://gcore.jsdelivr.net/gh/code-anan/image/20220110164117.png"></p><h1 id="拦截器"><a href="#拦截器" class="headerlink" title="拦截器"></a>拦截器</h1><p>拦截器是AOP思想的具体应用，并且SpringMVC拦截器是SpringMVC框架自己的只有使用SpringMVC框架的工程才能使用；</p><p>拦截器只会拦截访问的控制器方法，静态资源js html等不会拦截;</p><p>拦截器是全局的，可以对多个controller进行拦截，一个项目中可以有多个拦截器，拦截器常用在：用户登录处理、权限检查、记录日志</p><h2 id="使用步骤"><a href="#使用步骤" class="headerlink" title="使用步骤"></a>使用步骤</h2><p>创建一个普通类实现<code>HandlerInterceptor</code>接口，并重写他的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;=====拦截前&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;=====清理&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;=====拦截后&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后在springmvc配置文件中配置拦截器</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置拦截器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:interceptors</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">&quot;/**&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.weilong.interceptor.MyInterceptor&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mvc:interceptors</span>&gt;</span></span><br></pre></td></tr></table></figure><p>path属性表示拦截所有目录 通过MyInterceptor这个controller类进行拦截</p><p>然后我们调用某个controller得到测试结果为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">=====拦截前</span><br><span class="line">Student&#123;id=<span class="number">1</span>, name=<span class="string">&#x27;碳治郎&#x27;</span>, age=<span class="number">13</span>&#125;</span><br><span class="line">Student&#123;id=<span class="number">2</span>, name=<span class="string">&#x27;妳豆子&#x27;</span>, age=<span class="number">12</span>&#125;</span><br><span class="line">Student&#123;id=<span class="number">3</span>, name=<span class="string">&#x27;猪猪&#x27;</span>, age=<span class="number">14</span>&#125;</span><br><span class="line">Student&#123;id=<span class="number">4</span>, name=<span class="string">&#x27;善逸&#x27;</span>, age=<span class="number">15</span>&#125;</span><br><span class="line">Student&#123;id=<span class="number">5</span>, name=<span class="string">&#x27;恋柱&#x27;</span>, age=<span class="number">13</span>&#125;</span><br><span class="line">=====清理</span><br><span class="line">=====拦截后</span><br></pre></td></tr></table></figure><p>可以看到后面两个方法是在目标方法之后执行的，所以我们要验证登陆之类的只需要在preHandle里面进行判断即可,例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Cookie[] cookies = request.getCookies();</span><br><span class="line">        <span class="keyword">for</span>(Cookie cookie:cookies)&#123;</span><br><span class="line">            <span class="keyword">if</span>(cookie.getName().equals(<span class="string">&quot;user&quot;</span>))&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(request.getRequestURI().contains(<span class="string">&quot;login&quot;</span>))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">//request.getRequestDispatcher(&quot;login&quot;).forward(request,response);</span></span><br><span class="line">            response.sendRedirect(<span class="string">&quot;login&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="拦截器和过滤器的区别"><a href="#拦截器和过滤器的区别" class="headerlink" title="拦截器和过滤器的区别"></a>拦截器和过滤器的区别</h2><ul><li>过滤器是servlet中的对象，拦截器是框架中的对象</li><li>过滤器实现Filter接口，拦截器实现HandlerInterceptor接口</li><li>过滤器用来设置request、response的参数属性，侧重对数据的过滤；拦截器是用来验证请求，能截断请求</li><li>过滤器在拦截器之前执行</li><li>过滤器可以处理jsp html等；拦截器拦截Controller的对象</li></ul><h1 id="SpringMVC执行原理"><a href="#SpringMVC执行原理" class="headerlink" title="SpringMVC执行原理"></a>SpringMVC执行原理</h1><ol><li>用户发起一个请求</li><li>DispatcherServlet接收请求并把请求转交给处理器映射器<br>处理器映射器：Springmvc框架中的一种对象，框架把实现了HandlerMapping的类都叫做映射器（可以有多个）<br>处理器映射器作用：根据请求， 从Springmvc容器对象中获取处理器对象，框架把找到的处理器对象放到一个叫做处理器执行链的类（HandlerExecutionChain）保存<br>HandlerExecutionChain：类中保存着处理器对象和项目中所有的拦截器</li><li>DispatcherServlet把HandlerExecutionChain中的处理器对象都交给处理器适配器（可以有多个）<br>处理器适配器：Springmnvc框架中的对象，需要实现HandlerAdapter接口<br>处理器适配作用：执行处理器方法获取返回值</li><li>DispatcherServlet把适配器返回来的值比如ModelAndview交给视图解析器对象<br>视图解析器：Springmvc框架中的对象，需要实现viewResolver接口<br>视图解析器作用：组成视图完整路径，使用前缀后缀并创建view对象，view是一个接口表示视图，在框架中jsp、html不是String表示，而是使用view和他的实现类表示视图<br>InternalResourceView：视图类，表示jsp文件，视图解析器会创建InternalResourceView类对象，这个对象里面有一个属性url</li><li>DispatcherServlet把创建的view对象获取到调用view类自己的方法，把model数据放入到request作用域，执行视图对象的forward，请求结束<br>流程图如下：<img src="https://gcore.jsdelivr.net/gh/code-anan/image/20220115124658.png"></li></ol><h1 id="文件上传与下载"><a href="#文件上传与下载" class="headerlink" title="文件上传与下载"></a>文件上传与下载</h1><h2 id="添加依赖-2"><a href="#添加依赖-2" class="headerlink" title="添加依赖"></a>添加依赖</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注意这里需要引入高版本的servlet依赖把低版本的删掉，否则缺少方法</p><h2 id="前段页面"><a href="#前段页面" class="headerlink" title="前段页面"></a>前段页面</h2><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;文件上传&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;form action=<span class="string">&quot;/upload&quot;</span> enctype=<span class="string">&quot;multipart/form-data&quot;</span> method=<span class="string">&quot;post&quot;</span>&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;file&quot;</span> name=<span class="string">&quot;file&quot;</span>&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;上传&quot;</span>&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>只要有个文件上传功能即可</p><h2 id="Springmvc配置文件"><a href="#Springmvc配置文件" class="headerlink" title="Springmvc配置文件"></a>Springmvc配置文件</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--文件上传配置--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.multipart.commons.CommonsMultipartResolver&quot;</span> <span class="attr">id</span>=<span class="string">&quot;commonsMultipartResolver&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--请求的编码格式，需要和前段页面保持一致，默认为ISO-8859-1--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;defaultEncoding&quot;</span> <span class="attr">value</span>=<span class="string">&quot;utf-8&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--上传文件大小上限，单位是字节，（1M=10485760）--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxUploadSize&quot;</span> <span class="attr">value</span>=<span class="string">&quot;10485760&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxInMemorySize&quot;</span> <span class="attr">value</span>=<span class="string">&quot;40960&quot;</span>/&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="接收处理"><a href="#接收处理" class="headerlink" title="接收处理"></a>接收处理</h2><p>上传文件：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileController</span> </span>&#123;</span><br><span class="line">    <span class="comment">//@RequestParam(&quot;file&quot;)把name=file的控件封装成CommonsMultipartFile对象</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/upload&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">uploadFile</span><span class="params">(<span class="meta">@RequestParam(&quot;file&quot;)</span> CommonsMultipartFile file, HttpServletRequest request)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//获取文件名</span></span><br><span class="line">        String filename = file.getOriginalFilename();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//判断文件名是否为空</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="string">&quot;&quot;</span>.equals(filename))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;redirect:/index.jsp&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;上传文件名&quot;</span>+filename);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//上传路径保存设置</span></span><br><span class="line">        String path = request.getServletContext().getRealPath(<span class="string">&quot;/upload&quot;</span>);</span><br><span class="line">        <span class="comment">//如果路径不存在，创建一个</span></span><br><span class="line">        File realFile = <span class="keyword">new</span> File(path);</span><br><span class="line">        <span class="keyword">if</span>(!realFile.exists())&#123;</span><br><span class="line">            realFile.mkdir();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;上传文件路径：&quot;</span>+realFile);</span><br><span class="line">        <span class="comment">//获取输入输出流</span></span><br><span class="line">        InputStream inputStream = file.getInputStream();</span><br><span class="line">        OutputStream outputStream = <span class="keyword">new</span> FileOutputStream(<span class="keyword">new</span> File(realFile, filename));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//读文件</span></span><br><span class="line">        <span class="keyword">int</span> length=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">byte</span>[] bytes = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="keyword">while</span> ((length=inputStream.read(bytes))!=-<span class="number">1</span>)&#123;</span><br><span class="line">            outputStream.write(bytes,<span class="number">0</span>,length);</span><br><span class="line">            outputStream.flush();</span><br><span class="line">        &#125;</span><br><span class="line">        inputStream.close();</span><br><span class="line">        outputStream.close();</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;redirect:/index.jsp&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下载文件：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/download&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">download</span><span class="params">(HttpServletRequest request, HttpServletResponse response,<span class="meta">@RequestParam(&quot;filename&quot;)</span> String filename)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="comment">//要下载的图片地址</span></span><br><span class="line">    String path = request.getServletContext().getRealPath(<span class="string">&quot;/upload&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置response响应头</span></span><br><span class="line">    response.reset(); <span class="comment">//设置页面不缓存</span></span><br><span class="line">    response.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">    response.setContentType(<span class="string">&quot;multipart/form-data&quot;</span>);</span><br><span class="line"></span><br><span class="line">    response.setHeader(<span class="string">&quot;Content-Disposition&quot;</span>,<span class="string">&quot;attatchment;fileName=&quot;</span>+ URLEncoder.encode(filename,<span class="string">&quot;UTF-8&quot;</span>));</span><br><span class="line">    File file = <span class="keyword">new</span> File(path, filename);</span><br><span class="line">    <span class="comment">//读取文件</span></span><br><span class="line">    InputStream input = <span class="keyword">new</span> FileInputStream(file);</span><br><span class="line">    <span class="comment">//写出文件</span></span><br><span class="line">    OutputStream output = response.getOutputStream();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//读文件</span></span><br><span class="line">    <span class="keyword">int</span> length=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">byte</span>[] bytes = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">    <span class="keyword">while</span> ((length=input.read(bytes))!=-<span class="number">1</span>)&#123;</span><br><span class="line">        output.write(bytes,<span class="number">0</span>,length);</span><br><span class="line">        output.flush();</span><br><span class="line">    &#125;</span><br><span class="line">    input.close();</span><br><span class="line">    output.close();</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;ok&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://gcore.jsdelivr.net/gh/code-anan/image/20220116201701.png"></p><p>好了，Springmvc差不多就这些结束(￣▽￣)~*</p>]]></content>
      
      
      <categories>
          
          <category> 框架 </category>
          
          <category> SpringMVC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringMVC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java实现pdf与base64编码的互转</title>
      <link href="post/pdfToBase64/"/>
      <url>post/pdfToBase64/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>最新刚好有这样的需求，需要实现pdf和base64编码的互转，所以在这里记录一套转换的代码模板方便以后使用，代码主要来源<a href="https://blog.csdn.net/fuyuwei2015/article/details/47264007">孙悟空2015</a>然后稍微做了一下修改 可以直接使用</p><h1 id="base64编码概述"><a href="#base64编码概述" class="headerlink" title="base64编码概述"></a>base64编码概述</h1><blockquote><p>Base64是网络上最常见的用于传输8Bit字节码的编码方式之一，Base64就是一种基于64个可打印字符来表示二进制数据的方法。可查看RFC2045～RFC2049，上面有MIME的详细规范。<br>Base64编码是从二进制到字符的过程，可用于在HTTP环境下传递较长的标识信息。采用Base64编码具有不可读性，需要解码后才能阅读。<br>Base64由于以上优点被广泛应用于计算机的各个领域，然而由于输出内容中包括两个以上“符号类”字符（+, /, =)，不同的应用场景又分别研制了Base64的各种“变种”。为统一和规范化Base64的输出，Base62x被视为无符号化的改进版本。</p></blockquote><p>好吧 这些概述显然不容易理解 所以我把他简单理解为文件的字符串并且在网络中传输且文件大小大概增加三分之一  这里的文件不局限于pdf文件其他类型的文件也同样适用</p><h1 id="PDF转base64的方法代码"><a href="#PDF转base64的方法代码" class="headerlink" title="PDF转base64的方法代码"></a>PDF转base64的方法代码</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">PDFToBase64</span><span class="params">(File file)</span> </span>&#123;</span><br><span class="line">        BASE64Encoder encoder = <span class="keyword">new</span> BASE64Encoder();</span><br><span class="line">        FileInputStream fin =<span class="keyword">null</span>;</span><br><span class="line">        BufferedInputStream bin =<span class="keyword">null</span>;</span><br><span class="line">        ByteArrayOutputStream baos = <span class="keyword">null</span>;</span><br><span class="line">        BufferedOutputStream bout =<span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            fin = <span class="keyword">new</span> FileInputStream(file);</span><br><span class="line">            bin = <span class="keyword">new</span> BufferedInputStream(fin);</span><br><span class="line">            baos = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">            bout = <span class="keyword">new</span> BufferedOutputStream(baos);</span><br><span class="line">            <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">            <span class="keyword">int</span> len = bin.read(buffer);</span><br><span class="line">            <span class="keyword">while</span>(len != -<span class="number">1</span>)&#123;</span><br><span class="line">                bout.write(buffer, <span class="number">0</span>, len);</span><br><span class="line">                len = bin.read(buffer);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//刷新此输出流并强制写出所有缓冲的输出字节</span></span><br><span class="line">            bout.flush();</span><br><span class="line">            <span class="keyword">byte</span>[] bytes = baos.toByteArray();</span><br><span class="line">            <span class="keyword">return</span> encoder.encodeBuffer(bytes).trim();</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                fin.close();</span><br><span class="line">                bin.close();</span><br><span class="line">                bout.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h1 id="Base64编码转PDF文件"><a href="#Base64编码转PDF文件" class="headerlink" title="Base64编码转PDF文件"></a>Base64编码转PDF文件</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">base64StringToPdf</span><span class="params">(String base64Content,String filePath)</span></span>&#123;</span><br><span class="line">        BASE64Decoder decoder = <span class="keyword">new</span> BASE64Decoder();</span><br><span class="line">        BufferedInputStream bis = <span class="keyword">null</span>;</span><br><span class="line">        FileOutputStream fos = <span class="keyword">null</span>;</span><br><span class="line">        BufferedOutputStream bos = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">byte</span>[] bytes = decoder.decodeBuffer(base64Content);<span class="comment">//base64编码内容转换为字节数组</span></span><br><span class="line">            ByteArrayInputStream byteInputStream = <span class="keyword">new</span> ByteArrayInputStream(bytes);</span><br><span class="line">            bis = <span class="keyword">new</span> BufferedInputStream(byteInputStream);</span><br><span class="line">            File file = <span class="keyword">new</span> File(filePath);</span><br><span class="line">            File path = file.getParentFile();</span><br><span class="line">            <span class="keyword">if</span>(!path.exists())&#123;</span><br><span class="line">                path.mkdirs();</span><br><span class="line">            &#125;</span><br><span class="line">            fos = <span class="keyword">new</span> FileOutputStream(file);</span><br><span class="line">            bos = <span class="keyword">new</span> BufferedOutputStream(fos);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">            <span class="keyword">int</span> length = bis.read(buffer);</span><br><span class="line">            <span class="keyword">while</span>(length != -<span class="number">1</span>)&#123;</span><br><span class="line">                bos.write(buffer, <span class="number">0</span>, length);</span><br><span class="line">                length = bis.read(buffer);</span><br><span class="line">            &#125;</span><br><span class="line">            bos.flush();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(bis!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    bis.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(fos!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    fos.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(bos!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    bos.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h1 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        File file = <span class="keyword">new</span> File(<span class="string">&quot;C:\\Users\\admin\\Desktop\\1.pdf&quot;</span>);</span><br><span class="line">        String base64 = PDFToBase64(file);</span><br><span class="line">        base64StringToPdf(base64,<span class="string">&quot;C:\\Users\\admin\\Desktop\\2.pdf&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>先指定一个PDF文件的路径然后将其转换成<code>base64</code>字符串，得到字符串之后调用<code>base64StringToPdf</code>方法传进去目标路径和base64编码即可得到生成的pdf文件</p><p><img src="https://gcore.jsdelivr.net/gh/code-anan/image/20211211122515.png"> </p><p><img src="https://gcore.jsdelivr.net/gh/code-anan/image/20211211122607.png"> </p><p>运行完命令 即可看到生成的pdf文件 大功告成</p><p><img src="https://gcore.jsdelivr.net/gh/code-anan/image/20211211122743.png"></p>]]></content>
      
      
      <categories>
          
          <category> 记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> base64 </tag>
            
            <tag> pdf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git详解</title>
      <link href="post/git/"/>
      <url>post/git/</url>
      
        <content type="html"><![CDATA[<h1 id="版本控制"><a href="#版本控制" class="headerlink" title="版本控制"></a>版本控制</h1><p>对Git有一点了解的都知道Git是一款非常流行的版本控制工具，对于他的概念可以去查阅相关文档，说白了就是为了解决多人开发，方便项目更新</p><h1 id="Git和Svn的区别"><a href="#Git和Svn的区别" class="headerlink" title="Git和Svn的区别"></a>Git和Svn的区别</h1><p>SVN是集中式的版本控制系统，版本库集中放在中央服务器，工作的时候用的都是用的自己的电脑，所以首先需要从中央服务器得到最新的版本然后工作，完成之后把代码再同步到中央服务器，缺点是工作的时候必须保持联网状态，对网络带宽要求较高</p><p>Git的分布式控制系统，没有中央服务器，每个人的电脑就是一个完整的版本库，工作的时候可以不需要联网；协同方式是</p><p>自己在电脑上更改了文件A，其他人也在电脑上更新了文件A，这时可以把各自更新的内容推送给对方，就可以看到对方的修改，Git可以直接看到更新了哪些代码和文件</p><p>Git是目前世界上最先进的分布式版本控制系统</p><h1 id="Git安装"><a href="#Git安装" class="headerlink" title="Git安装"></a>Git安装</h1><p>直接在[Git官网](<a href="https://git-scm.com/">Git (git-scm.com)</a>)无脑下一步即可，如果觉得慢的话可以在淘宝的[镜像地址](<a href="https://registry.npmmirror.com/binary.html?path=git-for-windows/">CNPM Binaries Mirror (npmmirror.com)</a>)下载，下载安装完成之后鼠标右键可以看到<code>Git Gui Here</code>和<code>Git  Bash Here</code>的选项，这样就表示安装完成了</p><p>Git Bash：Unix与linux风格的命令行 使用最多</p><p>Git CMD: Windows风格的命令行</p><p>Git GUI:图形页面的Git，不建议初学者使用</p><h1 id="基本的Linux命令"><a href="#基本的Linux命令" class="headerlink" title="基本的Linux命令"></a>基本的Linux命令</h1><ol><li><p>cd:改变目录 例<code>cd test/test1</code></p></li><li><p>cd.. :回退到上一个目录，直接cd进入默认目录</p></li><li><p>pwd:显示当前所在的目录路径</p></li><li><p>ls：表示列出当前目录下的所有文件</p></li><li><p>touch :新建一个文件 例<code>touch index.html</code></p></li><li><p>rm: 删除一个文件 例<code>rm index.html</code>删除刚才新建的文件</p></li><li><p>mkdir：新建一个文件夹 例·<code>mkdir test2</code></p></li><li><p>rm -r:删除一个文件夹  例<code>rm -r test2</code></p></li><li><p>rm -rf /:删除电脑中所有文件（不可以尝试！）</p></li><li><p>reset :重新初始化终端、清屏</p></li><li><p>clear:清屏</p></li><li><p>history:查看历史命令</p></li><li><p>help：帮助</p></li><li><p>exit: 退出</p></li></ol><p>这些指令全部可以在Git bash中使用</p><h1 id="Git的必要配置"><a href="#Git的必要配置" class="headerlink" title="Git的必要配置"></a>Git的必要配置</h1><p>查看配置<code>git config -l</code></p><p><img src="https://gcore.jsdelivr.net/gh/code-anan/image/20220228111023.png"></p><p>查看系统config <code>git config --system --l</code> 文件是<code>C:\Program Files\Git\etc</code>(安装位置)下的config文件</p><p>查看当前用户global配置 <code>git config --global --l</code> 可以看到用户的账号密码ssl信息等 文件是<code>C:\Users\Admin</code>下的<code>.config</code> </p><p>设置git的账号密码指令本质就是配置上面的文件信息，修改账号邮箱指令</p><p><code>git config --global user.name &quot;code-anan&quot;</code></p><p><code>git config --global user.email &quot;719603766@qq.com&quot;</code></p><h1 id="Git工作原理"><a href="#Git工作原理" class="headerlink" title="Git工作原理"></a>Git工作原理</h1><p><img src="https://gcore.jsdelivr.net/gh/code-anan/image/20220228113101.png"></p><p>Working Directory:工作区，平时我们写代码存放的地方</p><p>Stage/index:暂存区，用于临时存放代码变动，本质上他是一个文件，保存即将存放到文件列表信息</p><p>Repository(History):仓库区，存放数据的位置，这里面有提交的所有版本的数据，其中Head指向最新存放仓库的版本</p><p>Remote：远程仓库，托管代码的服务器即远程保存我们代码的地方</p><h1 id="Git的项目搭建"><a href="#Git的项目搭建" class="headerlink" title="Git的项目搭建"></a>Git的项目搭建</h1><h2 id="本地搭建"><a href="#本地搭建" class="headerlink" title="本地搭建"></a>本地搭建</h2><p>在当前目录创建一个git代码库</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure><p>然后会发现多出来一个git隐藏目录，关于版本等信息都在这个目录里面</p><h2 id="克隆远程仓库"><a href="#克隆远程仓库" class="headerlink" title="克隆远程仓库"></a>克隆远程仓库</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone [url]</span><br></pre></td></tr></table></figure><p>clone后面跟具体的url地址，他就会下载到当前目录，github和gitee的项目地址都可以</p><h1 id="Git基本指令"><a href="#Git基本指令" class="headerlink" title="Git基本指令"></a>Git基本指令</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git init 初始化一个git项目</span><br><span class="line">git status 查看所有文件状态</span><br><span class="line">git add .添加所有问题</span><br><span class="line">git commit -m&quot; &quot; 提交到仓库-m后面添加提交的信息</span><br></pre></td></tr></table></figure><blockquote><p>忽略文件</p></blockquote><p>有的文件不需要纳入到版本控制中，比如一些数据库文件，临时文件，设计文件等，一般目录下都会有<code>.gitignore</code>文件，此文件有以下规则：</p><ol><li>忽略文件中的空格或#开始的行都会被忽略</li><li>可以使用linux通配符；*代表任意多个字符，？代表一个字符，[abc]代表可选字符范围，大括号({string1,string2,..})代表可选的字符串</li><li>如果名称的最前面有一个感叹号(!)，表示例外规则，将不会被忽略</li><li>如果名称的最前面是一个路径分隔符(/),表示要忽略的文件在此目录下，而子目录中的文件不忽略</li><li>如果名称的最后面是一个路径分隔符(/)，表示要忽略的是此目录下该名称的子目录，而非文件（默认文件和目录都忽略）</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#为注释</span><br><span class="line">*.txt  #忽略所有.txt结尾的文件</span><br><span class="line">!lib.txt #但除了lib.txt文件</span><br><span class="line">/temp  #仅忽略项目根目录下的TODO文件，不包括其他，目录temp</span><br><span class="line">build/  #忽略build/目录下的所有文件</span><br><span class="line">doc/*.txt #忽略doc/notes.txt 单不包括doc/server/arch.txt</span><br></pre></td></tr></table></figure><h1 id="码云使用"><a href="#码云使用" class="headerlink" title="码云使用"></a>码云使用</h1><h2 id="添加SSH公钥"><a href="#添加SSH公钥" class="headerlink" title="添加SSH公钥"></a>添加SSH公钥</h2><p>码云也就是我们知道的[gitee](<a href="https://gitee.com/">我的工作台 - Gitee.com</a>)，注册完基本信息之后，我们还可以让本地电脑绑定ssh公钥，实现免密码登录，首先来到我们路径为<code>C:\Users\admin\.ssh</code>,在此路径下输入以下指令并一直回车</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa</span><br></pre></td></tr></table></figure><p>可以看到生成了以下文件<img src="https://gcore.jsdelivr.net/gh/code-anan/image/20220302192259.png"></p><p>后缀pub表示公钥 我们复制到我们的giteee上（设置-SSh公钥）即可<img src="https://gcore.jsdelivr.net/gh/code-anan/image/20220302192520.png"></p><p>这里是默认的 也可以在生成密钥的时候输上咱们的账号密码 </p><h2 id="创建仓库并拷贝到本地"><a href="#创建仓库并拷贝到本地" class="headerlink" title="创建仓库并拷贝到本地"></a>创建仓库并拷贝到本地</h2><p><img src="https://gcore.jsdelivr.net/gh/code-anan/image/20220302193239.png"></p><p>随意创建一个仓库，然后拷贝到本地<code>git clone</code>命令</p><h2 id="IDEA集成git"><a href="#IDEA集成git" class="headerlink" title="IDEA集成git"></a>IDEA集成git</h2><p>上面我们已经把新建的仓库拷贝到了本地，接下来我们要创建一个新的项目并把代码推送到仓库<img src="https://gcore.jsdelivr.net/gh/code-anan/image/20220302194714.png"></p><p>这里我们直接新创建一个springboot项目，新创建之后可以看到他右上角没有任何图标，然后到我们刚才克隆到的项目中<img src="https://gcore.jsdelivr.net/gh/code-anan/image/20220302194900.png"></p><p>直接复制这些文件拷到我们创建的项目中，有重复的替换掉即可，这样就可以看到我们的项目右上角出现了git图标<img src="https://gcore.jsdelivr.net/gh/code-anan/image/20220302195044.png"></p><p>这表示我们的项目和仓库绑定到了一起，当然也可以在这里直接填上git路径<img src="https://gcore.jsdelivr.net/gh/code-anan/image/20220302195128.png"></p><p>位置在上方工具栏<code>VCS</code>-&gt;<code>get from version Controll</code>，这两种方式都可以跟仓库绑定，代码的提交可以选择右上角的git小符号，也可以在下方的<code>Terminal</code>中输入git指令（下面还有个git push指令）</p><p><img src="https://gcore.jsdelivr.net/gh/code-anan/image/20220302195537.png"></p><p>提交之后就可以在仓库中看到我们的代码了<img src="https://gcore.jsdelivr.net/gh/code-anan/image/20220302195615.png"></p><h2 id="Git分支"><a href="#Git分支" class="headerlink" title="Git分支"></a>Git分支</h2><p>熟悉github的朋友都知道，每个项目都可以有多个分支 各个分支之间互不影响 一般用来放不同版本的代码，下面学习一些git分支的常用指令</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 列出所有本地分支</span></span><br><span class="line">git branch</span><br><span class="line"></span><br><span class="line"><span class="comment">// 列出所有远程分支</span></span><br><span class="line">git branch -r</span><br><span class="line"></span><br><span class="line"><span class="comment">// 新建一个分支，但仍停留在当前分支</span></span><br><span class="line">git branch [branch-name] <span class="comment">//例如git branch dev</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//新建一个分支，并切换到该分支</span></span><br><span class="line">git checkout -b [branch] <span class="comment">//例如git checkout -b dev</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//合并指定分支到当前分支</span></span><br><span class="line">git merge [branch]  <span class="comment">//例如当前在master分支 但是dev分支修改了master分支的代码 git merge dev</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//删除分支</span></span><br><span class="line">git branch -d [branch] <span class="comment">//例如git branch -d dev</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//删除远程分支</span></span><br><span class="line">git push origin --delete [branch]</span><br><span class="line">git branch -dr [remote/branch]</span><br></pre></td></tr></table></figure><p>以上就是基本上会用到的git知识 更多内容还可以到gitee的(<a href="https://gitee.com/all-about-git">Git 大全 - Gitee.com</a>)进行更详细的学习(<em>^▽^</em>)</p>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Excel文件的导入和导出</title>
      <link href="post/excelUtil/"/>
      <url>post/excelUtil/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>作为java开发，excel文件的上传和导出应该说是必须要掌握的技能了，但是如果之前没做过的话还是会有一定的难度，这里我记录一下这两个工具的轮子方便以后直接拿过来用</p><h1 id="Excel文件上传和读取"><a href="#Excel文件上传和读取" class="headerlink" title="Excel文件上传和读取"></a>Excel文件上传和读取</h1><p>这里我是默认使用springboot项目进行演示，因为springboot方便，如果不是springboot项目也只需要稍作修改即可</p><h2 id="必要的依赖导入"><a href="#必要的依赖导入" class="headerlink" title="必要的依赖导入"></a>必要的依赖导入</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.hutool<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hutool-all<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.7.21<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.poi<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>poi-ooxml<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.commons<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-lang3<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>都是常规的依赖 没什么好说的了</p><h2 id="前端页面"><a href="#前端页面" class="headerlink" title="前端页面"></a>前端页面</h2><p>这里我们就简单写一个input组件和导出的超链接模拟就行</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;/excel&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span> <span class="attr">enctype</span>=<span class="string">&quot;multipart/form-data&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">id</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;file&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span></span><br><span class="line">        上传</span><br><span class="line">    <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/export&quot;</span>&gt;</span>导出excel<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>需要注意的是我们上传文件中的form标签必须要有<code>enctype=&quot;multipart/form-data&quot;</code>属性，这个作用是设置请求的<code>content-type</code>;并且请求方式为post否则后端无法正常接收</p><h2 id="Controller代码"><a href="#Controller代码" class="headerlink" title="Controller代码"></a>Controller代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ExcelService excelService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/excel&quot;,method = RequestMethod.POST)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title">getexcel</span><span class="params">(<span class="meta">@RequestParam(&quot;file&quot;)</span> MultipartFile file)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> excelService.readExcelByHutool(file);</span><br><span class="line">        <span class="comment">//return excelService.importProfession(file);</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>下面被注释掉的代码是另外一种读取excel文件的方式，两种都可以看看，上面的是使用<code>Hutool</code>工具类的方式</p><h2 id="service代码"><a href="#service代码" class="headerlink" title="service代码"></a>service代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExcelService</span> </span>&#123;</span><br><span class="line">    <span class="comment">//读取Excel文件(第二种方式)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title">importProfession</span><span class="params">(MultipartFile file)</span> </span>&#123;</span><br><span class="line">        Map&lt;String,Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="comment">//获取文件的名称</span></span><br><span class="line">        String fileName = file.getOriginalFilename();</span><br><span class="line">        System.out.println(fileName);</span><br><span class="line">        <span class="comment">//获取文件的后缀名</span></span><br><span class="line">        String pattern = fileName.substring(fileName.lastIndexOf(<span class="string">&quot;.&quot;</span>)+<span class="number">1</span>);</span><br><span class="line">        System.out.println(pattern);</span><br><span class="line">        List&lt;List&lt;String&gt;&gt; listContent = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        String message=<span class="string">&quot;导入成功&quot;</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (file != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="comment">//文件类型判断</span></span><br><span class="line">                <span class="keyword">if</span> (!OtherExcelUtil.isEXCEL(file)) &#123;</span><br><span class="line">                    message = <span class="string">&quot;该文件不是Excel文件&quot;</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    listContent = OtherExcelUtil.readExcelContents(file,pattern);</span><br><span class="line">                    <span class="comment">//文件内容判断</span></span><br><span class="line">                    <span class="keyword">if</span>(listContent.isEmpty())&#123;</span><br><span class="line">                        message=<span class="string">&quot;表格内容为空&quot;</span>;</span><br><span class="line">                    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="comment">//循环遍历</span></span><br><span class="line">                        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i&lt;listContent.size(); i++)&#123;</span><br><span class="line"></span><br><span class="line">                            <span class="comment">//读取excel表格中的内容</span></span><br><span class="line">                            String theme  = listContent.get(i).get(<span class="number">0</span>);</span><br><span class="line">                            String predicate  = listContent.get(i).get(<span class="number">1</span>);</span><br><span class="line">                            String properties  = listContent.get(i).get(<span class="number">2</span>);</span><br><span class="line">                            <span class="comment">//赋值</span></span><br><span class="line">                            System.out.println(theme);</span><br><span class="line">                            System.out.println(predicate);</span><br><span class="line">                            System.out.println(properties);</span><br><span class="line">                            <span class="comment">//插入数据</span></span><br><span class="line"></span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                message = <span class="string">&quot;未选择文件&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        map.put(<span class="string">&quot;code&quot;</span>,<span class="number">200</span>);</span><br><span class="line">        map.put(<span class="string">&quot;msg&quot;</span>,message);</span><br><span class="line">        map.put(<span class="string">&quot;data&quot;</span>,fileName);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//读取excel文件使用Hutool工具类</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title">readExcelByHutool</span><span class="params">(MultipartFile file)</span> </span>&#123;</span><br><span class="line">        InputStream inputStream=<span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            inputStream = file.getInputStream();</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        ExcelReader excelReader = ExcelUtil.getReader(inputStream);</span><br><span class="line">        List&lt;List&lt;Object&gt;&gt; read = excelReader.read(<span class="number">1</span>, excelReader.getRowCount());</span><br><span class="line">        ArrayList&lt;Student&gt; studentArrayList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">int</span> count=read.size();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;count ; i++) &#123;</span><br><span class="line">            Student student = <span class="keyword">new</span> Student();</span><br><span class="line">            student.setName((String) read.get(i).get(<span class="number">0</span>));</span><br><span class="line">            Object o =read.get(i).get(<span class="number">1</span>);</span><br><span class="line">            student.setAge(Integer.valueOf(String.valueOf(o)));</span><br><span class="line">            student.setEmail((String) read.get(i).get(<span class="number">2</span>));</span><br><span class="line">            studentArrayList.add(student);</span><br><span class="line">            <span class="comment">//也可以在这里执行插入数据库的操作 这里我们只简单输出一下</span></span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(studentArrayList);</span><br><span class="line">        Map&lt;String,Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;code&quot;</span>,<span class="number">200</span>);</span><br><span class="line">        map.put(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;导入成功&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;data&quot;</span>,file.getOriginalFilename());</span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>需要注意的是，如果你使用的<code>excelService.importProfession(file);</code>这种方式需要另外添加一个工具类（下方的Util工具类）</p><h2 id="Util工具类"><a href="#Util工具类" class="headerlink" title="Util工具类"></a>Util工具类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OtherExcelUtil</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Workbook <span class="title">readExcel</span><span class="params">(MultipartFile file, String pattern)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//文档对象</span></span><br><span class="line">        Workbook workbook = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (file != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">//获取输入流</span></span><br><span class="line">                InputStream is = file.getInputStream();</span><br><span class="line">                <span class="keyword">if</span> (<span class="string">&quot;xls&quot;</span>.equals(pattern)) &#123;</span><br><span class="line">                    <span class="comment">//2003版格式 -xls</span></span><br><span class="line">                    <span class="keyword">return</span> workbook = <span class="keyword">new</span> HSSFWorkbook(is);</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">&quot;xlsx&quot;</span>.equals(pattern)) &#123;</span><br><span class="line">                    <span class="comment">//2007及以上版本 -xlsx</span></span><br><span class="line">                    <span class="keyword">return</span> workbook = <span class="keyword">new</span> XSSFWorkbook(is);</span><br><span class="line">                &#125; <span class="keyword">else</span></span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> workbook;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Boolean <span class="title">isEXCEL</span><span class="params">(MultipartFile file)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (file != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">//文件名</span></span><br><span class="line">            String fileName = file.getOriginalFilename();</span><br><span class="line">            <span class="comment">//文件后缀</span></span><br><span class="line">            String suffix = fileName.substring(fileName.lastIndexOf(<span class="string">&quot;.&quot;</span>) + <span class="number">1</span>);</span><br><span class="line">            <span class="comment">//转小写</span></span><br><span class="line">            suffix = suffix.toLowerCase();</span><br><span class="line">            <span class="keyword">if</span> (<span class="string">&quot;xls&quot;</span>.equals(suffix) || <span class="string">&quot;xlsx&quot;</span>.equals(suffix)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> List&lt;List&lt;String&gt;&gt; readExcelContents(MultipartFile file, String pattern) &#123;</span><br><span class="line">        List&lt;List&lt;String&gt;&gt; listRow = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="comment">//文档对象</span></span><br><span class="line">        Workbook workbook = <span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">//表格对象</span></span><br><span class="line">        Sheet sheet = <span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">//非空和文件格式判断</span></span><br><span class="line">        <span class="keyword">if</span> (isEXCEL(file)) &#123;</span><br><span class="line">            workbook = readExcel(file, pattern);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (workbook != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">//获取文档首个表格</span></span><br><span class="line">            sheet = workbook.getSheetAt(<span class="number">0</span>);</span><br><span class="line">            <span class="comment">//获取最大行数</span></span><br><span class="line">            <span class="keyword">int</span> rowNum = sheet.getPhysicalNumberOfRows();</span><br><span class="line">            <span class="comment">//行对象</span></span><br><span class="line">            Row row = <span class="keyword">null</span>;</span><br><span class="line">            <span class="comment">//单元格数据</span></span><br><span class="line">            String cellData = <span class="keyword">null</span>;</span><br><span class="line">            <span class="comment">//跳过第一行标题栏</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; rowNum; i++) &#123;</span><br><span class="line">                row = sheet.getRow(i);</span><br><span class="line">                List&lt;String&gt; listCell = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">                <span class="keyword">if</span> (StringUtils.isBlank(row.getCell(<span class="number">0</span>).toString())) &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">3</span>; j++) &#123;</span><br><span class="line">                    cellData = row.getCell(j).toString();</span><br><span class="line">                    listCell.add(cellData);</span><br><span class="line">                &#125;</span><br><span class="line">                listRow.add(listCell);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> listRow;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个工具类是使用第二种方式所必须的，如果使用第一种方式我们有我们引入的hutool依赖就足够了</p><h2 id="model实体类"><a href="#model实体类" class="headerlink" title="model实体类"></a>model实体类</h2><p>我们习惯把每一行的数据封装成一个实体类，这样读取数据之后方便赋值观察上面代码可以看到我使用的例子为student类，以后使用的话要看你需要什么类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="演示"><a href="#演示" class="headerlink" title="演示"></a>演示</h2><p>效果演示，这里我就使用第一种方式（当然结果都是一样的）<img src="https://gcore.jsdelivr.net/gh/code-anan/image/20220222144431.png"></p><p>点击上传可以看到控制台输出了结果<code>[Student(name=皮卡丘, age=4, email=719603766@qq.com), Student(name=妙蛙种子, age=3, email=123445@qq.com)]</code></p><h1 id="Excel文件导出"><a href="#Excel文件导出" class="headerlink" title="Excel文件导出"></a>Excel文件导出</h1><p>代码不多，我们这里直接就写在controller中即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;/export&quot;,method = RequestMethod.GET)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">export</span><span class="params">(HttpServletResponse response)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        List&lt;Student&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        list.add(<span class="keyword">new</span> Student(<span class="string">&quot;张三&quot;</span>,<span class="number">14</span>,<span class="string">&quot;719603766@qq.com&quot;</span>));</span><br><span class="line">        list.add(<span class="keyword">new</span> Student(<span class="string">&quot;张四&quot;</span>,<span class="number">14</span>,<span class="string">&quot;719603766@qq.com&quot;</span>));</span><br><span class="line">        list.add(<span class="keyword">new</span> Student(<span class="string">&quot;张五&quot;</span>,<span class="number">15</span>,<span class="string">&quot;719603766@qq.com&quot;</span>));</span><br><span class="line">        list.add(<span class="keyword">new</span> Student(<span class="string">&quot;张六&quot;</span>,<span class="number">16</span>,<span class="string">&quot;719603766@qq.com&quot;</span>));</span><br><span class="line">        list.add(<span class="keyword">new</span> Student(<span class="string">&quot;张七&quot;</span>,<span class="number">17</span>,<span class="string">&quot;719603766@qq.com&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 通过工具类创建writer，默认创建xls格式</span></span><br><span class="line">        ExcelWriter writer = ExcelUtil.getWriter();</span><br><span class="line">        <span class="comment">//自定义标题别名</span></span><br><span class="line">        writer.addHeaderAlias(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;姓名&quot;</span>);</span><br><span class="line">        writer.addHeaderAlias(<span class="string">&quot;age&quot;</span>, <span class="string">&quot;年龄&quot;</span>);</span><br><span class="line">        writer.addHeaderAlias(<span class="string">&quot;email&quot;</span>, <span class="string">&quot;邮件&quot;</span>);</span><br><span class="line">        <span class="comment">// 合并单元格后的标题行，使用默认标题样式</span></span><br><span class="line">        writer.merge(<span class="number">2</span>, <span class="string">&quot;学生信息单&quot;</span>);</span><br><span class="line">        <span class="comment">// 一次性写出内容，使用默认样式，强制输出标题</span></span><br><span class="line">        writer.write(list, <span class="keyword">true</span>);</span><br><span class="line">        <span class="comment">//out为OutputStream，需要写出到的目标流</span></span><br><span class="line">        <span class="comment">//response为HttpServletResponse对象</span></span><br><span class="line">        response.setContentType(<span class="string">&quot;application/vnd.ms-excel;charset=utf-8&quot;</span>);</span><br><span class="line">        <span class="comment">//test.xls是弹出下载对话框的文件名，不能为中文，中文请自行编码</span></span><br><span class="line">        SimpleDateFormat format = <span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;YYYY_mm_dd&quot;</span>);</span><br><span class="line">        String name =<span class="string">&quot;student_&quot;</span>+format.format(<span class="keyword">new</span> Date());</span><br><span class="line">        response.setHeader(<span class="string">&quot;Content-Disposition&quot;</span>,<span class="string">&quot;attachment;filename=&quot;</span>+name+<span class="string">&quot;.xls&quot;</span>);</span><br><span class="line">        ServletOutputStream out= <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            out = response.getOutputStream();</span><br><span class="line">            writer.flush(out, <span class="keyword">true</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">// 关闭writer，释放内存</span></span><br><span class="line">            writer.close();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//此处记得关闭输出Servlet流</span></span><br><span class="line">        IoUtil.close(out);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>这里我们模拟了数据，实际开发一般会在数据库中获取；注释非常详细了，ok大功告成以后可以直接拿来用了(<em>^▽^</em>)</p>]]></content>
      
      
      <categories>
          
          <category> Hutool </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Excel </tag>
            
            <tag> Hutool </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CentOS系统在虚拟机上的安装</title>
      <link href="post/CentOSInstall/"/>
      <url>post/CentOSInstall/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>无论是学习linux还是想要部署项目，虚拟机的使用以及linux以及centos操作系统安装都是必不可少的，这里记录一下安装教程</p><h1 id="Vmware安装"><a href="#Vmware安装" class="headerlink" title="Vmware安装"></a>Vmware安装</h1><p>首先是官网的下载地址：-&gt;<a href="https://www.vmware.com/go/getworkstation-win">传送门</a>，这里我们下载的是16版本的，下载完成之后双击运行即可（这里可能会需要重启一下电脑）前面一直下一步即可</p><p><img src="https://gcore.jsdelivr.net/gh/code-anan/image/20220331133612.png"></p><p>这里我们最好更改一下安装路径 默认安装在C盘，然后下一步一直到输入许可证的地方<img src="https://gcore.jsdelivr.net/gh/code-anan/image/20220331133952.png"></p><p>输入许可证，这里感谢<a href="%5B%E8%BF%98%E5%9C%A8%E7%94%A8%E6%97%A7%E7%89%88%E6%9C%ACVMWare%EF%BC%9F%E4%B8%8D%E5%A6%82%E5%AE%89%E8%A3%85%E6%9C%80%E6%96%B0%E7%9A%8416.0%EF%BC%81_%E5%93%94%E5%93%A9%E5%93%94%E5%93%A9_bilibili%5D(https://www.bilibili.com/video/BV1eo4y1o77M?spm_id_from=333.337.search-card.all.click)">小翁同学</a>提供的三个可使用密钥</p><p><code>ZF3R0-FHED2-M80TY-8QYGC-NPKYF</code></p><p><code>YF390-0HF8P-M81RQ-2DXQE-M2UT6</code></p><p><code>ZF71R-DMX85-08DQY-8YMNC-PPHV8</code></p><p>然后输入即安装成功</p><h1 id="镜像文件下载"><a href="#镜像文件下载" class="headerlink" title="镜像文件下载"></a>镜像文件下载</h1><ol><li>centos8版本光驱可以在MSDN的<a href="https://next.itellyou.cn/Original/#cbp=Product?ID=dfb4715d-5e52-ea11-bd34-b025aa28351d">原版软件 (itellyou.cn)</a>)下载</li><li>但是我们更多用的还是centosOS7的版本，7的版本可以在我的百度网盘进行下载链接：<a href="https://pan.baidu.com/s/119ageklrJ4YOFoZ99iFy4Q">https://pan.baidu.com/s/119ageklrJ4YOFoZ99iFy4Q</a><br>提取码：20yx</li><li>清华大学<a href="https://mirrors.tuna.tsinghua.edu.cn/">清华大学开源软件镜像站 | Tsinghua Open Source Mirror</a>)进行下载</li></ol><h1 id="创新新的虚拟机"><a href="#创新新的虚拟机" class="headerlink" title="创新新的虚拟机"></a>创新新的虚拟机</h1><p>vmware安装好之后，我们就可以在上面创建我们的Linux或者其他的系统了</p><p><img src="https://gcore.jsdelivr.net/gh/code-anan/image/20220331134430.png"></p><p>然后选择自定义<img src="https://gcore.jsdelivr.net/gh/code-anan/image/20220331134527.png"></p><p>硬盘兼容性选择16.x就行<img src="https://gcore.jsdelivr.net/gh/code-anan/image/20220331134644.png"></p><p>然后选择我们事先准备好的光驱，光驱可以在MSDN的[新官网](<a href="https://next.itellyou.cn/Original/#cbp=Product?ID=dfb4715d-5e52-ea11-bd34-b025aa28351d">原版软件 (itellyou.cn)</a>)下载</p><p><img src="https://gcore.jsdelivr.net/gh/code-anan/image/20220331134747.png"></p><p><img src="https://gcore.jsdelivr.net/gh/code-anan/image/20220331135009.png"></p><p>复制到迅雷下载即可<img src="https://gcore.jsdelivr.net/gh/code-anan/image/20220331135056.png"></p><p>继续下一步，设置好账号密码<img src="https://gcore.jsdelivr.net/gh/code-anan/image/20220331135143.png"></p><p><img src="https://gcore.jsdelivr.net/gh/code-anan/image/20220331135312.png"></p><p><img src="https://gcore.jsdelivr.net/gh/code-anan/image/20220331135512.png"></p><p>这里处理器数量根据你电脑的情况选择<img src="https://gcore.jsdelivr.net/gh/code-anan/image/20220331135557.png"></p><p>这里也是一样 如果你电脑内存只有8g还是选择1g即可<img src="https://gcore.jsdelivr.net/gh/code-anan/image/20220331135700.png"></p><p>这里说一下网络类型，根据你的需求进行选择：</p><p>桥接网络适用场景：当虚拟机需要被其它电脑访问的时候。例如：虚拟机作为项目的开发环境或者测试环境等</p><p>使用网络地址转换适用场景：学习研究技术使用。如：公司的开发环境虚拟机软件环境已经安装妥当，自己又不想在自己的电脑上安装新的环境。这个时候可以把公司的开发环境拷贝一份放到自己的虚拟机上来使用</p><p>这里我们选择桥接网络，然后直接无脑下一步即可</p><h1 id="使用SSH工具连接"><a href="#使用SSH工具连接" class="headerlink" title="使用SSH工具连接"></a>使用SSH工具连接</h1><p>上面创建完毕之后，确保宿主机跟我们的虚拟机都可以互相ping通，如果遇到其他问题可以看羊哥的这篇<a href="https://mp.weixin.qq.com/s/onVwwEQ1DAwbvK7qS2YNxg">人手一套Linux环境之：Windows版本教程 (qq.com)</a>)</p><p>首先在虚拟机上使用<code>ifconfig</code>指令查看分配的ip地址<img src="https://gcore.jsdelivr.net/gh/code-anan/image/20220331162347.png"></p><p>在SSH工具上即可进行连接 账号密码即我们创建虚拟机的账号密码 这样我们就可以实现文件互传啦 虚拟机创建完成还有一些开发需要必要的配置后面再说(￣▽￣)~*</p>]]></content>
      
      
      <categories>
          
          <category> 记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 虚拟机 </tag>
            
            <tag> Vmware </tag>
            
            <tag> CentOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于hexo部署到github上一直报错的原因（已更新）</title>
      <link href="post/hexo%20error/"/>
      <url>post/hexo%20error/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>每次写完博客想要部署到github上的时候总是会出现各种各样的原因，对于这些原因我找过很多种答案，其实对于大部分同学而言，部署不上去的一个最大的原因就是因为github上不稳定，所以解决这个问题大部分情况都可以迎刃而解，通过这种方式修改访问github相关的网站也会变得飞快！</p><h1 id="必要的修改"><a href="#必要的修改" class="headerlink" title="必要的修改"></a>必要的修改</h1><p>修改的方式同样是熟悉的<code>hosts</code>文件，来到目录<code>C:\Windows\System32\drivers\etc</code>，需要是管理员权限才可以进行修改，对于要加入的东西，好多人给的都是一大串的，其实很多都是不必要的，其实只需要添加两个东西就可以:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">xxxxxx  github.com</span><br><span class="line">xxxxxx  github.global.ssl.fastly.net </span><br></pre></td></tr></table></figure><p>例如我添加的</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">140.82.114.3 github.com </span><br><span class="line">199.232.69.194  github.global.ssl.fastly.net </span><br></pre></td></tr></table></figure><p>把前面的<code>ip</code>换成你本机查到的才有效，这也是为什么直接复制出错的原因，对于这两个网址ip的查找方式有两种：</p><ol><li>通过网址查找：-&gt;<a href="https://www.ipaddress.com/ip-lookup">传送</a><br><img src="https://gcore.jsdelivr.net/gh/code-anan/image/20210616133559.png"><br>依次输入<code>github.com</code>和<code>github.global.ssl.fastly.net </code>然后点击<code>Lookuo</code>即可查到相应的ip<br><img src="https://gcore.jsdelivr.net/gh/code-anan/image/20210616133755.png"></li><li>第二种方式比较简单 直接打开cmd在任意目录下 通过<code>ping</code>命令即可获取到两个网址的ip<br><img src="https://gcore.jsdelivr.net/gh/code-anan/image/20210616133912.png"><h1 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h1>如果以上步骤还是访问缓慢，可尝试<code>hosts</code>再在下面添加一些代码<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">#github related website</span><br><span class="line">140.82.112.4 github.com</span><br><span class="line">151.101.185.194 github.global.ssl.fastly.net</span><br><span class="line">203.98.7.65 gist.github.com</span><br><span class="line">13.229.189.0 codeload.github.com</span><br><span class="line">185.199.109.153 desktop.github.com</span><br><span class="line">185.199.108.153 guides.github.com</span><br><span class="line">185.199.108.153 blog.github.com</span><br><span class="line">18.204.240.114 status.github.com</span><br><span class="line">185.199.108.153 developer.github.com</span><br><span class="line">185.199.108.153 services.github.com</span><br><span class="line">192.30.253.175 enterprise.github.com</span><br><span class="line">34.195.49.195 education.github.com</span><br><span class="line">185.199.108.153 pages.github.com</span><br><span class="line">34.196.237.103 classroom.github.com</span><br><span class="line"></span><br><span class="line">140.82.112.3 github.com</span><br></pre></td></tr></table></figure><blockquote><p>还有个常用的指令<code>ipconfig/flushdns</code>用来刷新DNS缓存，可以在配置完之后刷新一下重新进入浏览器</p></blockquote><h1 id="最新解决方案"><a href="#最新解决方案" class="headerlink" title="最新解决方案"></a>最新解决方案</h1>经过测试 以上的方案存在各种缺陷且不稳定，最近发现一个完美解决这个问题的方案，即下载<a href="https://uu.163.com/">网易UU加速器</a>下载之后搜索<code>学术资源</code>然后进行加速即可 无论是上传到github还是访问github 速度都得到质的提升！<br>通过上面步骤访问github的速度变得飞快，并且部署也不会出问题了(￣▽￣)~*</li></ol>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
          <category> 记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 部署报错 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot学习</title>
      <link href="post/springbootkeys/"/>
      <url>post/springbootkeys/</url>
      
        <content type="html"><![CDATA[<h1 id="Springboot启动图标"><a href="#Springboot启动图标" class="headerlink" title="Springboot启动图标"></a>Springboot启动图标</h1><p>这里分享SpringBoot启动图标修改方式<img src="https://gcore.jsdelivr.net/gh/code-anan/image/20220123180255.png"></p><p>其实也非常简单，首先创建一个SpringBoot项目(Spring Initializer)然后在<code>resources</code>目录下创建一个<code>banner.txt</code>文件即可，文件中的内容就可以自定义我们的展示内容，上图展示的效果可以在<a href="https://www.bootschool.net/ascii-art">这里</a>进行搜索</p><h1 id="原理初探"><a href="#原理初探" class="headerlink" title="原理初探"></a>原理初探</h1><h2 id="启动器"><a href="#启动器" class="headerlink" title="启动器"></a>启动器</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>启动器可以理解为SpringBoot的启动场景</li><li>spring-boot-starter-web启动器会帮我们自动导入web环境需要的所有依赖</li><li>springboot可以把特有的功能场景都变成一个个的启动器</li><li>更多启动器可以到<a href="https://docs.spring.io/spring-boot/docs/current/reference/html/using.html#using.build-systems.starters">官网</a>找到</li></ul><h2 id="主程序"><a href="#主程序" class="headerlink" title="主程序"></a>主程序</h2><ul><li>注解 </li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootConfiguration</span>:springboot的配置</span><br><span class="line">    <span class="meta">@Configuration</span> ：spring的配置类</span><br><span class="line">    <span class="meta">@Component</span>： 说明他也是spring的一个组件</span><br><span class="line"></span><br><span class="line"><span class="meta">@EnableAutoConfiguration</span>：自动配置</span><br><span class="line">    <span class="meta">@AutoConfigurationPackage</span>：自动装配的包</span><br><span class="line">    <span class="meta">@Import(&#123;AutoConfigurationImportSelector.class&#125;)</span>：自动配置选择导入</span><br></pre></td></tr></table></figure><p>根据这些注解查看源码可以看到资源是如何加载到配置类种，具体可以看<a href="https://www.bilibili.com/video/BV1PE411i7CV?p=6&spm_id_from=pageDriver">狂神的视频</a></p><blockquote><p>结论：springboot所有自动配置都是在启动的时候扫描并加载<code>spring.factories</code>,所有的自动配置类都在里面，但是不一定生效，要判断条件是否成立，只要导入了对应的start，就有对应的启动器，有了启动器装配就会生效，然后就会配置成功</p></blockquote><h2 id="主启动类SpringApplication"><a href="#主启动类SpringApplication" class="headerlink" title="主启动类SpringApplication"></a>主启动类SpringApplication</h2><p>我们知道项目启动是因为main方法中执行了SpringApplication.run方法，这个类主要做了下面四个事情：</p><ol><li>推断应用的类型是普通的项目还是web项目</li><li>查找并加载所有可用初始化器，设置到initializers属性中</li><li>找出所有的应用程序监听器，设置到listeners属性中</li><li>推断并设置main方法的定义类，找到运行的主类</li></ol><h1 id="yaml语法"><a href="#yaml语法" class="headerlink" title="yaml语法"></a>yaml语法</h1><p>我们知道springboot默认的配置文件叫做<code>application.properties</code>,但其实还可以给他改后缀为<code>yaml</code>或者<code>yml</code>，同时还增添了一些新的语法</p><p>例如我们<code>application.yaml</code>中定义一些属性给Person类赋值</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">person:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">lwl</span></span><br><span class="line">  <span class="attr">age:</span> <span class="number">3</span></span><br><span class="line">  <span class="attr">list:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">java</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">css</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">html</span></span><br><span class="line">  <span class="attr">map:</span> &#123;<span class="attr">k1:</span> <span class="string">v1</span> ,<span class="attr">k2:</span> <span class="string">v2</span>&#125;</span><br><span class="line">  <span class="attr">dog:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">旺财</span></span><br><span class="line">    <span class="attr">age:</span> <span class="number">12</span></span><br></pre></td></tr></table></figure><p>Person类种使用@ConfigurationProperties()注解即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;person&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Object&gt; list;</span><br><span class="line">    <span class="keyword">private</span> Map map;</span><br><span class="line">    <span class="keyword">private</span> Dog dog;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在测试类中输出得到结果为</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Person(name=lwl, age=<span class="number">3</span>, list=[java, css, html], map=&#123;k1=v1, k2=v2&#125;, dog=Dog(name=旺财, age=<span class="number">12</span>))</span><br></pre></td></tr></table></figure><p>除了使用@ConfigurationProperties注解，我们还可以使用@PropertySource注解进行赋值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="comment">//@ConfigurationProperties(prefix = &quot;person&quot;)</span></span><br><span class="line"><span class="meta">@PropertySource(value = &quot;classpath:my.properties&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;name&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Object&gt; list;</span><br><span class="line">    <span class="keyword">private</span> Map map;</span><br><span class="line">    <span class="keyword">private</span> Dog dog;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种方式是读取我们自己定义的my.properties中的属性，除此之外我们还可以直接使用<code>application.yaml</code>中的属性，例如我们定义一个name,在实体类中不使用注解直接引入</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="comment">//@ConfigurationProperties(prefix = &quot;person&quot;)</span></span><br><span class="line"><span class="comment">//@PropertySource(value = &quot;classpath:my.properties&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;name&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Object&gt; list;</span><br><span class="line">    <span class="keyword">private</span> Map map;</span><br><span class="line">    <span class="keyword">private</span> Dog dog;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同样可以赋值，这种方式使用的最多常常是项目的全局配置我们会这样使用；通过上面的例子我们可以很清楚的知道yaml语法的使用以及需要注意的点</p><p>#多环境配置及配置文件位置</p><p>springboot项目配置文件默认是放在<code>resources</code>目录下的，其实这个配置文件还可以下图所示的位置并且他们的优先级也跟数字标注的一样<img src="https://gcore.jsdelivr.net/gh/code-anan/image/20220124190130.png"></p><p>企业开发我们经常会使用多种环境，这时候我们就可以创建多个<code>application.properties</code>文件，都必须以application开头中间用-  例如下面并且通过<code>spring.profiles.active=</code>指定使用哪一个配置文件<img src="https://gcore.jsdelivr.net/gh/code-anan/image/20220124190854.png">或者是使用<code>application.yaml</code>的这种方式</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">dev</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8081</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span> <span class="string">dev</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8082</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span> <span class="string">test</span></span><br></pre></td></tr></table></figure><p>中间使用—分开 然后<code>spring-profiles-active</code>选择使用哪个环境 不过这种方式现在不推荐了</p><h1 id="Web开发"><a href="#Web开发" class="headerlink" title="Web开发"></a>Web开发</h1><h2 id="静态资源导入探究"><a href="#静态资源导入探究" class="headerlink" title="静态资源导入探究"></a>静态资源导入探究</h2><p>在springboot中，默认使用以下方式处理静态资源</p><ul><li>webjars   访问路径为localhost:8080/webjars</li><li>public,static,/**,resources    访问路径为localhost:8080</li></ul><p>优先级resouces&gt;static(默认)&gt;public，源码讲解<a href="https://www.bilibili.com/video/BV1PE411i7CV?p=14">地址</a></p><h2 id="首页和图标"><a href="#首页和图标" class="headerlink" title="首页和图标"></a>首页和图标</h2><p>若想把首页以及其他页面放到templates下，需要手动添加<code>Thymeleaf</code>的依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>网站图标的话springboot2.2版本以后就不知道添加默认小图标<code>favicon.cio</code>的方式了，所以我们只能手动添加，以<code>Thymeleaf</code>模板引擎为例</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;shortcut icon&quot;</span> <span class="attr">href</span>=<span class="string">&quot;/images/favicon.ico&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>我们还可以在<a href="https://tool.lu/favicon/">这里</a>在线制作小图标</p><h2 id="Thymeleaf"><a href="#Thymeleaf" class="headerlink" title="Thymeleaf"></a>Thymeleaf</h2><p>依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>基本模板：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Good Thymes Virtual Grocery<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;Content-Type&quot;</span> <span class="attr">content</span>=<span class="string">&quot;text/html; charset=UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span> <span class="attr">media</span>=<span class="string">&quot;all&quot;</span> </span></span><br><span class="line"><span class="tag">          <span class="attr">href</span>=<span class="string">&quot;../../css/gtvg.css&quot;</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/css/gtvg.css&#125;&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;#&#123;home.welcome&#125;&quot;</span>&gt;</span>Welcome to our grocery store!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>更多详细使用教程可以在[官网](<a href="https://www.thymeleaf.org/doc/tutorials/3.0/usingthymeleaf.html#using-texts">Tutorial: Using Thymeleaf</a>)进行查看，使用最多也就<code>th:each</code>,<code>th:text</code>等</p><h1 id="简易员工管理系统"><a href="#简易员工管理系统" class="headerlink" title="简易员工管理系统"></a>简易员工管理系统</h1><h2 id="国际化"><a href="#国际化" class="headerlink" title="国际化"></a>国际化</h2><p><img src="https://gcore.jsdelivr.net/gh/code-anan/image/20220223194220.png"></p><p>找到<code>MessageSourceAutoConfiguration</code>类下的<img src="https://gcore.jsdelivr.net/gh/code-anan/image/20220223194410.png"></p><p>我们就可以在配置文件(application.properties)中设置路径</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 说明配置文件的位置</span></span><br><span class="line"><span class="meta">spring.messages.basename</span>=<span class="string">i18n/login</span></span><br></pre></td></tr></table></figure><p>这样就可以在前段页面进行绑定，使用#<img src="https://gcore.jsdelivr.net/gh/code-anan/image/20220223195110.png"></p><p>刷新页面可以看到发生了变化<img src="https://gcore.jsdelivr.net/gh/code-anan/image/20220223195315.png"></p><p>下面需要动态的改变他里面的值，首先需要定义一个类实现<code>LocaleResolver</code>类并且重写他的两个方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyLocaleResolver</span> <span class="keyword">implements</span> <span class="title">LocaleResolver</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//解析请求</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Locale <span class="title">resolveLocale</span><span class="params">(HttpServletRequest request)</span> </span>&#123;</span><br><span class="line">        String language = request.getParameter(<span class="string">&quot;language&quot;</span>);</span><br><span class="line">        Locale locale = Locale.getDefault();</span><br><span class="line">        <span class="keyword">if</span>(!StringUtils.isEmpty(language))&#123;</span><br><span class="line">            String[] split = language.split(<span class="string">&quot;_&quot;</span>);</span><br><span class="line">            locale = <span class="keyword">new</span> Locale(split[<span class="number">0</span>], split[<span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> locale;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLocale</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Locale locale)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后在容器中注入该组件，使用Bean注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyMvcConfig</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addViewControllers</span><span class="params">(ViewControllerRegistry registry)</span> </span>&#123;</span><br><span class="line">       registry.addViewController(<span class="string">&quot;/&quot;</span>).setViewName(<span class="string">&quot;index&quot;</span>);</span><br><span class="line">       registry.addViewController(<span class="string">&quot;/index.html&quot;</span>).setViewName(<span class="string">&quot;index&quot;</span>);</span><br><span class="line">       registry.addViewController(<span class="string">&quot;/login&quot;</span>).setViewName(<span class="string">&quot;index&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> LocaleResolver <span class="title">localeResolver</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MyLocaleResolver();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>前段动态的给他传值</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-sm&quot;</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/index.html(language=&#x27;zh_CN&#x27;)&#125;&quot;</span>&gt;</span>中文<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-sm&quot;</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/index.html(language=&#x27;en_US&#x27;)&#125;&quot;</span>&gt;</span>English<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p>效果<img src="https://gcore.jsdelivr.net/gh/code-anan/image/20220321202806.png"></p><p><img src="https://gcore.jsdelivr.net/gh/code-anan/image/20220321202827.png"></p><h2 id="登陆拦截器"><a href="#登陆拦截器" class="headerlink" title="登陆拦截器"></a>登陆拦截器</h2><p>还是先创建一个类实现<code>HandlerInterceptor</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginHandlerInteceptor</span> <span class="keyword">implements</span> <span class="title">HandlerInterceptor</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Object loginName = request.getSession().getAttribute(<span class="string">&quot;loginName&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(loginName==<span class="keyword">null</span>)&#123;</span><br><span class="line">            request.setAttribute(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;请先进行登录&quot;</span>);</span><br><span class="line">            request.getRequestDispatcher(<span class="string">&quot;/index.html&quot;</span>).forward(request,response);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>添加拦截器组件到容器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyMvcConfig</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addViewControllers</span><span class="params">(ViewControllerRegistry registry)</span> </span>&#123;</span><br><span class="line">       registry.addViewController(<span class="string">&quot;/&quot;</span>).setViewName(<span class="string">&quot;index&quot;</span>);</span><br><span class="line">       registry.addViewController(<span class="string">&quot;/index.html&quot;</span>).setViewName(<span class="string">&quot;index&quot;</span>);</span><br><span class="line">       registry.addViewController(<span class="string">&quot;/main.html&quot;</span>).setViewName(<span class="string">&quot;dashboard&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> LocaleResolver <span class="title">localeResolver</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MyLocaleResolver();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> </span>&#123;</span><br><span class="line">        registry.addInterceptor(<span class="keyword">new</span> LoginHandlerInteceptor()).</span><br><span class="line">                addPathPatterns(<span class="string">&quot;/**&quot;</span>)</span><br><span class="line">                .excludePathPatterns(<span class="string">&quot;/&quot;</span>,<span class="string">&quot;/index.html&quot;</span>,<span class="string">&quot;/login&quot;</span></span><br><span class="line">                  ,<span class="string">&quot;/css/**&quot;</span>,<span class="string">&quot;/js/**&quot;</span>,<span class="string">&quot;/img/**&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="整合JDBC使用"><a href="#整合JDBC使用" class="headerlink" title="整合JDBC使用"></a>整合JDBC使用</h1><p>首先还是依赖的导入</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后是数据的基本配置</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">spring.datasource.driver-class-name</span>=<span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="meta">spring.datasource.username</span>=<span class="string">root</span></span><br><span class="line"><span class="meta">spring.datasource.password</span>=<span class="string">233</span></span><br><span class="line"><span class="meta">spring.datasource.url</span>=<span class="string">jdbc:mysql://localhost:3306/test?serverTimeZone=UTC</span></span><br></pre></td></tr></table></figure><p>通过<code>JdbcTemplate</code>(Springboot帮我们默认生成的一个类我们就可以完成基本的增删改查操作，在autoconfiguration下的jdbc目录下)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JdbcController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    JdbcTemplate jdbcTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/userlist&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List <span class="title">getuserlist</span><span class="params">()</span></span>&#123;</span><br><span class="line">        String sql=<span class="string">&quot;select * from student&quot;</span>;</span><br><span class="line">        List&lt;Map&lt;String, Object&gt;&gt; maps = jdbcTemplate.queryForList(sql);</span><br><span class="line">        <span class="keyword">return</span> maps;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/addstudent&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map <span class="title">adduserlist</span><span class="params">()</span></span>&#123;</span><br><span class="line">        String sql=<span class="string">&quot;insert into student(name) values (&#x27;艾伦耶格尔&#x27;)&quot;</span>;</span><br><span class="line">        <span class="keyword">int</span> i = jdbcTemplate.update(sql);</span><br><span class="line">        HashMap&lt;Object, Object&gt; map=<span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (i&gt;<span class="number">0</span>)&#123;</span><br><span class="line">             map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">            map.put(<span class="string">&quot;result&quot;</span>,<span class="string">&quot;插入成功&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">            map.put(<span class="string">&quot;result&quot;</span>,<span class="string">&quot;插入失败&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://gcore.jsdelivr.net/gh/code-anan/image/20220606200633.png"></p><p>可以看到确实有效</p><h1 id="整合Druid数据源"><a href="#整合Druid数据源" class="headerlink" title="整合Druid数据源"></a>整合Druid数据源</h1><p>依赖导入</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在配置文件中添加使用druid连接池</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring</span>:<span class="string"></span></span><br><span class="line">  <span class="attr">datasource</span>:<span class="string"></span></span><br><span class="line">    <span class="meta">driver-class-name</span>: <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">username</span>: <span class="string">root</span></span><br><span class="line">    <span class="attr">password</span>: <span class="string">233</span></span><br><span class="line">    <span class="attr">url</span>: <span class="string">jdbc:mysql://localhost:3306/test?serverTimeZone=UTC</span></span><br><span class="line">    <span class="attr">type</span>: <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line"><span class="comment">    #SpringBoot默认是不注入这些的，需要自己绑定</span></span><br><span class="line"><span class="comment">    #druid数据源专有配置</span></span><br><span class="line">    <span class="attr">initialSize</span>: <span class="string">5</span></span><br><span class="line">    <span class="attr">minIdle</span>: <span class="string">5</span></span><br><span class="line">    <span class="attr">maxActive</span>: <span class="string">20</span></span><br><span class="line">    <span class="attr">maxWait</span>: <span class="string">60000</span></span><br><span class="line">    <span class="attr">timeBetweenEvictionRunsMillis</span>: <span class="string">60000</span></span><br><span class="line">    <span class="attr">minEvictableIdleTimeMillis</span>: <span class="string">300000</span></span><br><span class="line">    <span class="attr">validationQuery</span>: <span class="string">SELECT 1 FROM DUAL</span></span><br><span class="line">    <span class="attr">testWhileIdle</span>: <span class="string">true</span></span><br><span class="line">    <span class="attr">testOnBorrow</span>: <span class="string">false</span></span><br><span class="line">    <span class="attr">testOnReturn</span>: <span class="string">false</span></span><br><span class="line">    <span class="attr">poolPreparedStatements</span>: <span class="string">true</span></span><br><span class="line"><span class="comment">    #配置监控统计拦截的filters，stat：监控统计、log4j：日志记录、wall：防御sql注入</span></span><br><span class="line"><span class="comment">    #如果允许报错，java.lang.ClassNotFoundException: org.apache.Log4j.Properity</span></span><br><span class="line"><span class="comment">    #则导入log4j 依赖就行</span></span><br><span class="line">    <span class="attr">filters</span>: <span class="string">stat,wall,log4j</span></span><br><span class="line">    <span class="attr">maxPoolPreparedStatementPerConnectionSize</span>: <span class="string">20</span></span><br><span class="line">    <span class="attr">useGlobalDataSourceStat</span>: <span class="string">true</span></span><br><span class="line">    <span class="attr">connectionoProperties</span>: <span class="string">druid.stat.mergeSql=true;druid.stat.slowSqlMillis=500</span></span><br></pre></td></tr></table></figure><p>声明一个配置类与配置文件相绑定：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DruidConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ConfigurationProperties(prefix = &quot;spring.datasource&quot;)</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">druidDataSource</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DruidDataSource();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//后台监控</span></span><br><span class="line">    <span class="comment">//springboot内置了servlet 所以没有web.xml 替代方法ServletRegistrationBean</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ServletRegistrationBean <span class="title">statViewServlet</span><span class="params">()</span></span>&#123;</span><br><span class="line">        ServletRegistrationBean&lt;StatViewServlet&gt; bean = <span class="keyword">new</span> ServletRegistrationBean&lt;&gt;(<span class="keyword">new</span> StatViewServlet(), <span class="string">&quot;/druid/*&quot;</span>);</span><br><span class="line">        <span class="comment">//后台登录的账号密码</span></span><br><span class="line">        HashMap&lt;String, String&gt; initparams = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        initparams.put(<span class="string">&quot;loginUsername&quot;</span>,<span class="string">&quot;admin&quot;</span>);<span class="comment">//key是固定的</span></span><br><span class="line">        initparams.put(<span class="string">&quot;loginPassword&quot;</span>,<span class="string">&quot;123&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置谁可以访问</span></span><br><span class="line">        initparams.put(<span class="string">&quot;allow&quot;</span>,<span class="string">&quot;&quot;</span>);<span class="comment">//为空表示谁都可以访问</span></span><br><span class="line"></span><br><span class="line">        bean.setInitParameters(initparams);</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//过滤器</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> FilterRegistrationBean <span class="title">webStatFilter</span><span class="params">()</span></span>&#123;</span><br><span class="line">        FilterRegistrationBean&lt;Filter&gt; bean = <span class="keyword">new</span> FilterRegistrationBean&lt;&gt;();</span><br><span class="line">        bean.setFilter(<span class="keyword">new</span> WebStatFilter());</span><br><span class="line">        <span class="comment">//设置过滤哪些请求</span></span><br><span class="line">        HashMap&lt;String, String&gt; initparams = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="comment">//这些东西不进行统计</span></span><br><span class="line">        initparams.put(<span class="string">&quot;exclusions&quot;</span>,<span class="string">&quot;*.js,*.css,/druid/*&quot;</span>);<span class="comment">//</span></span><br><span class="line">        bean.setInitParameters(initparams);</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://gcore.jsdelivr.net/gh/code-anan/image/20220606211200.png"></p><p>这样就可以看到druid自带的监控后台了</p><h1 id="整合mybatis框架"><a href="#整合mybatis框架" class="headerlink" title="整合mybatis框架"></a>整合mybatis框架</h1><p>依赖引入</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>基本配置</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">spring.datasource.driver-class-name</span>=<span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="meta">spring.datasource.username</span>=<span class="string">root</span></span><br><span class="line"><span class="meta">spring.datasource.password</span>=<span class="string">233</span></span><br><span class="line"><span class="meta">spring.datasource.url</span>=<span class="string">jdbc:mysql://localhost:3306/test?serverTimeZone=UTC</span></span><br></pre></td></tr></table></figure><p>声明接口</p><p><img src="https://gcore.jsdelivr.net/gh/code-anan/image/20220607200300.png"></p><p>使用@Mapper或者加上@Repository注解  或者在启动类中使用@MapperScan都可以</p><p>然后创建对应的<code>StudentMapper.xml</code>文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.weilong.mybatis.dao.StudentMapper&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;queryStudentList&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Student&quot;</span>&gt;</span></span><br><span class="line">    select * from student ;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;queryStudentByid&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Student&quot;</span>&gt;</span></span><br><span class="line">      select * from student where id=$&#123;id&#125;;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateStudent&quot;</span> &gt;</span></span><br><span class="line">      update stduent set id=#&#123;id&#125;,name=#&#123;name&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;deleteStudent&quot;</span>&gt;</span></span><br><span class="line">        delete from student where id=#&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><p>因为返回结果是实体类  所以需要在application.properties文件中声明</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">##声明mybatis实体类的别名以及mapper的位置</span></span><br><span class="line"><span class="meta">mybatis.type-aliases-package</span>=<span class="string">com.weilong.mybatis.model</span></span><br><span class="line"><span class="meta">mybatis.mapper-locations</span>=<span class="string">classpath:mybatis/mapper/*.xml</span></span><br></pre></td></tr></table></figure><p>声明完成可以发现上面没有爆红了，然后简单写个controller测试一下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> StudentMapper studentMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/gerStudentlist&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List <span class="title">gerStudentlist</span><span class="params">()</span></span>&#123;</span><br><span class="line">        List&lt;Student&gt; list = studentMapper.queryStudentList();</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://gcore.jsdelivr.net/gh/code-anan/image/20220607203417.png"></p><p>发现正常运行</p><h1 id="SpringSecurity和shiro"><a href="#SpringSecurity和shiro" class="headerlink" title="SpringSecurity和shiro"></a>SpringSecurity和shiro</h1><h2 id="SpringSecurity"><a href="#SpringSecurity" class="headerlink" title="SpringSecurity"></a>SpringSecurity</h2><p><a href="https://docs.spring.io/spring-security/site/docs/3.1.x/reference/springsecurity.html">Spring Security</a>是针对Spring项目的安全框架，也是SpringBoot底层安全模块默认的技术选型，他可以实现强大的web安全机制，对于安全控制，我们仅需要引入spring-boot-starter-security模块，进行少量的配置，即可实现强大的安全管理！</p><p>重要的几个类：</p><ul><li>WebSecurityConfigurerAdapter:自定义Security策略</li><li>AuthenticationManagerBuilder:自定义认证策略</li><li>@EnableWebSecurity:开启WebSecurity模式</li></ul><p>Spring Security的两个主要目标是认证(Authentication)和授权(Authorization)</p><h3 id="认证和授权"><a href="#认证和授权" class="headerlink" title="认证和授权"></a>认证和授权</h3><p>方便演示需要使用到一些素材，下载地址<a href="https://gitee.com/ENNRIAAA/spring-security-material?_from=gitee_search">点这里</a>把static和template下的内容放到我们新建的springboot对应的目录下即可，然后是导入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-security<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后是路由跳转的controller</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RouteController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/toLogin&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">tologin</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;views/login&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/level1/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">tolevel1</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span><span class="keyword">int</span> id)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;views/level1/&quot;</span>+id;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@GetMapping(&quot;/level2/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">tolevel2</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span><span class="keyword">int</span> id)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;views/level2/&quot;</span>+id;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@GetMapping(&quot;/level3/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">tolevel3</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span><span class="keyword">int</span> id)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;views/level3/&quot;</span>+id;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建我们的配置类即可简单的实现认证和授权的操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableWebSecurity</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SecurityConfig</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//设置首页所有人可以访问，功能页只有对应权限的人才可以访问</span></span><br><span class="line">        <span class="comment">//请求授权的规则</span></span><br><span class="line">        http.authorizeRequests().antMatchers(<span class="string">&quot;/&quot;</span>).permitAll()</span><br><span class="line">                .antMatchers(<span class="string">&quot;/level1/**&quot;</span>).hasRole(<span class="string">&quot;vip1&quot;</span>)</span><br><span class="line">                .antMatchers(<span class="string">&quot;/level2/**&quot;</span>).hasRole(<span class="string">&quot;vip2&quot;</span>)</span><br><span class="line">                .antMatchers(<span class="string">&quot;/level3/**&quot;</span>).hasRole(<span class="string">&quot;vip3&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//没有权限默认会到登录页面</span></span><br><span class="line">        http.formLogin();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//认证</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(AuthenticationManagerBuilder auth)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">       auth.inMemoryAuthentication().passwordEncoder(<span class="keyword">new</span> BCryptPasswordEncoder())</span><br><span class="line">               .withUser(<span class="string">&quot;lwl&quot;</span>).password(<span class="keyword">new</span> BCryptPasswordEncoder().encode(<span class="string">&quot;123&quot;</span>)).roles(<span class="string">&quot;vip2&quot;</span>,<span class="string">&quot;vip3&quot;</span>)</span><br><span class="line">               .and()</span><br><span class="line">               .withUser(<span class="string">&quot;root&quot;</span>).password(<span class="keyword">new</span> BCryptPasswordEncoder().encode(<span class="string">&quot;123&quot;</span>)).roles(<span class="string">&quot;vip1&quot;</span>,<span class="string">&quot;vip2&quot;</span>,<span class="string">&quot;vip3&quot;</span>)</span><br><span class="line">               .and()</span><br><span class="line">               .withUser(<span class="string">&quot;guest&quot;</span>).password(<span class="keyword">new</span> BCryptPasswordEncoder().encode(<span class="string">&quot;123&quot;</span>)).roles(<span class="string">&quot;vip1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里我们创建三个可以登录的用户保存在内存中并给他们赋予对应的权限以及每个角色可以访问的页面<img src="https://gcore.jsdelivr.net/gh/code-anan/image/20220608205833.png">这样一个简单的认证授权操作就完成了</p><h3 id="注销和权限控制"><a href="#注销和权限控制" class="headerlink" title="注销和权限控制"></a>注销和权限控制</h3><p><img src="https://gcore.jsdelivr.net/gh/code-anan/image/20220608211115.png"></p><p>在这里开启并且在页面上添加注销路由即可</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--未登录--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/toLogin&#125;&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;address card icon&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> 登录</span><br><span class="line">                <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/logout&#125;&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;sign out icon&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> 退出</span><br><span class="line">                <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后我们想要在前端页面展示一下登录的角色</p><p>pom中添加一下依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.thymeleaf.extras<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>thymeleaf-extras-springsecurity5<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>稍微修改index页面</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--未登录--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">sec:authorize</span>=<span class="string">&quot;!isAuthenticated()&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/toLogin&#125;&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;address card icon&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> 登录</span><br><span class="line">                    <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">sec:authorize</span>=<span class="string">&quot;isAuthenticated()&quot;</span>&gt;</span></span><br><span class="line">                        用户名：<span class="tag">&lt;<span class="name">span</span> <span class="attr">sec:authentication</span>=<span class="string">&quot;name&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                        角色：<span class="tag">&lt;<span class="name">span</span> <span class="attr">sec:authentication</span>=<span class="string">&quot;principal.authorities&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">sec:authorize</span>=<span class="string">&quot;isAuthenticated()&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/logout&#125;&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;sign out icon&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> 退出</span><br><span class="line">                    <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;column&quot;</span> <span class="attr">sec:authorize</span>=<span class="string">&quot;hasRole(&#x27;vip1&#x27;)&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;ui raised segment&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;ui&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;content&quot;</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">h5</span> <span class="attr">class</span>=<span class="string">&quot;content&quot;</span>&gt;</span>Level 1<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/level1/1&#125;&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;bullhorn icon&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> Level-1-1<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/level1/2&#125;&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;bullhorn icon&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> Level-1-2<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/level1/3&#125;&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;bullhorn icon&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> Level-1-3<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;column&quot;</span> <span class="attr">sec:authorize</span>=<span class="string">&quot;hasRole(&#x27;vip2&#x27;)&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;ui raised segment&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;ui&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;content&quot;</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">h5</span> <span class="attr">class</span>=<span class="string">&quot;content&quot;</span>&gt;</span>Level 2<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/level2/1&#125;&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;bullhorn icon&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> Level-2-1<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/level2/2&#125;&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;bullhorn icon&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> Level-2-2<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/level2/3&#125;&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;bullhorn icon&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> Level-2-3<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;column&quot;</span> <span class="attr">sec:authorize</span>=<span class="string">&quot;hasRole(&#x27;vip3&#x27;)&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;ui raised segment&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;ui&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;content&quot;</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">h5</span> <span class="attr">class</span>=<span class="string">&quot;content&quot;</span>&gt;</span>Level 3<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/level3/1&#125;&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;bullhorn icon&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> Level-3-1<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/level3/2&#125;&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;bullhorn icon&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> Level-3-2<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/level3/3&#125;&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;bullhorn icon&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> Level-3-3<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后我们就可以看到不同的账户显示不同的内容了</p><p><img src="https://gcore.jsdelivr.net/gh/code-anan/image/20220608214817.png"></p><h3 id="记住我和首页定制"><a href="#记住我和首页定制" class="headerlink" title="记住我和首页定制"></a>记住我和首页定制</h3><p>上面有一个很大的问题就是我们自己写的登录没有使用到，下面我们要使用他自己带的登录按钮以及记住我选项，首先是登录页的小修改</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;ui placeholder segment&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;ui column very relaxed stackable grid&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;column&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;ui form&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">form</span> <span class="attr">th:action</span>=<span class="string">&quot;@&#123;/login&#125;&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;field&quot;</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">label</span>&gt;</span>Username<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;ui left icon input&quot;</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;Username&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;user icon&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;field&quot;</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">label</span>&gt;</span>Password<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;ui left icon input&quot;</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;lock icon&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;field&quot;</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;remember&quot;</span>&gt;</span>记住我</span><br><span class="line">                            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ui blue submit button&quot;</span>/&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这里一个是表单提交的地址以及增加记住我选项，在security配置类中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">       <span class="comment">//设置首页所有人可以访问，功能页只有对应权限的人才可以访问</span></span><br><span class="line">       <span class="comment">//请求授权的规则</span></span><br><span class="line">       http.authorizeRequests().antMatchers(<span class="string">&quot;/&quot;</span>).permitAll()</span><br><span class="line">               .antMatchers(<span class="string">&quot;/level1/**&quot;</span>).hasRole(<span class="string">&quot;vip1&quot;</span>)</span><br><span class="line">               .antMatchers(<span class="string">&quot;/level2/**&quot;</span>).hasRole(<span class="string">&quot;vip2&quot;</span>)</span><br><span class="line">               .antMatchers(<span class="string">&quot;/level3/**&quot;</span>).hasRole(<span class="string">&quot;vip3&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">       <span class="comment">//没有权限默认会到登录页面</span></span><br><span class="line">       http.formLogin().loginPage(<span class="string">&quot;/toLogin&quot;</span>).usernameParameter(<span class="string">&quot;username&quot;</span>).passwordParameter(<span class="string">&quot;password&quot;</span>).loginProcessingUrl(<span class="string">&quot;/login&quot;</span>);</span><br><span class="line"></span><br><span class="line">       <span class="comment">//在这里开启注销</span></span><br><span class="line">       http.csrf().disable(); <span class="comment">//关闭csrf</span></span><br><span class="line">       http.logout().logoutSuccessUrl(<span class="string">&quot;/&quot;</span>);</span><br><span class="line"></span><br><span class="line">       http.rememberMe().rememberMeParameter(<span class="string">&quot;remember&quot;</span>);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>需要注意的是loginPage指的是没有权限的时候我们访问有权限的页面会跳转的页面，后面的loginProcessingUrl表示使用security的登录功能（注意是功能不是页面）是用到的url，我们上面自己写的登录页的提交也是此地址，然后添加两个参数username和password以及下面 http.rememberMe().rememberMeParameter(“remember”);是security的登录功能添加记住我参数的设置<img src="https://gcore.jsdelivr.net/gh/code-anan/image/20220608222259.png"></p><p>到此 这个小demo的功能就算真正写完了；</p><h2 id="Shiro"><a href="#Shiro" class="headerlink" title="Shiro"></a>Shiro</h2><h3 id="简单介绍"><a href="#简单介绍" class="headerlink" title="简单介绍"></a>简单介绍</h3><p><a href="https://shiro.apache.org/">Shiro</a> Java 的一个<code>安全框架</code>， 可以帮助我们完成：认证、授权、加密、会话管理、与 Web 集成、缓存等；它相当简单，对比 Spring Security，可能没有 Spring Security 做的功能强大，但是在实际工作时可能并不需要那么复杂的东西，所以使用小而简单的 Shiro 就足够了；基本架构<img src="https://gcore.jsdelivr.net/gh/code-anan/image/20220609205044.png"></p><p><strong>Subject</strong>：主体，<strong>代表了当前 “用户”</strong>，这个用户不一定是一个具体的人，与当前应用交互的任何东西都是 Subject，如网络爬虫，机器人等；即一个抽象概念；所有 Subject 都绑定到 SecurityManager，与 Subject 的所有交互都会委托给 SecurityManager；可以把 Subject 认为是一个门面；SecurityManager 才是实际的执行者；</p><p><strong>SecurityManager</strong>：<strong>安全管理器</strong>；即所有与安全有关的操作都会与 SecurityManager 交互；且它管理着所有 Subject；可以看出它是 Shiro 的核心，它负责与后边介绍的其他组件进行交互，如果学习过 SpringMVC，你可以把它看成 DispatcherServlet 前端控制器；</p><p><strong>Realm</strong>：<strong>域，Shiro 从 Realm 获取安全数据（如用户、角色、权限）</strong>，就是说 SecurityManager 要验证用户身份，那么它需要从 Realm 获取相应的用户进行比较以确定用户身份是否合法；也需要从 Realm 得到用户相应的角色 / 权限进行验证用户是否能进行操作；可以把 Realm 看成 DataSource，即安全数据源。</p><h3 id="SpringBoot整合Shiro"><a href="#SpringBoot整合Shiro" class="headerlink" title="SpringBoot整合Shiro"></a>SpringBoot整合Shiro</h3><p>首先依然是依赖导入</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.shiro<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>shiro-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.8.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后是配置类的声明</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShiroConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建shirofilterFactorybean</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ShiroFilterFactoryBean <span class="title">getShiroFilterFactoryBean</span><span class="params">(<span class="meta">@Qualifier(&quot;webSecurityManager&quot;)</span> DefaultWebSecurityManager defaultWebSecurityManager)</span></span>&#123;</span><br><span class="line">        ShiroFilterFactoryBean bean = <span class="keyword">new</span> ShiroFilterFactoryBean();</span><br><span class="line">        bean.setSecurityManager(defaultWebSecurityManager);</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建DefaultWebSecurityManager</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean(name=&quot;webSecurityManager&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DefaultWebSecurityManager <span class="title">getDefaultWebSecurityManager</span><span class="params">(<span class="meta">@Qualifier(&quot;relam&quot;)</span> UserRelam userRelam)</span></span>&#123;</span><br><span class="line">        DefaultWebSecurityManager webSecurityManager = <span class="keyword">new</span> DefaultWebSecurityManager();</span><br><span class="line">        webSecurityManager.setRealm(userRelam);</span><br><span class="line">        <span class="keyword">return</span> webSecurityManager;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//创建relam对象</span></span><br><span class="line">    <span class="meta">@Bean(name = &quot;relam&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> UserRelam <span class="title">getUserRelam</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> UserRelam();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>和UserRelam类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserRelam</span> <span class="keyword">extends</span> <span class="title">AuthorizingRealm</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//授权</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> AuthorizationInfo <span class="title">doGetAuthorizationInfo</span><span class="params">(PrincipalCollection principalCollection)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//认证</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> AuthenticationInfo <span class="title">doGetAuthenticationInfo</span><span class="params">(AuthenticationToken authenticationToken)</span> <span class="keyword">throws</span> AuthenticationException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这里只是一个基本的架子</p><h3 id="实现登录拦截"><a href="#实现登录拦截" class="headerlink" title="实现登录拦截"></a>实现登录拦截</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建shirofilterFactorybean</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ShiroFilterFactoryBean <span class="title">getShiroFilterFactoryBean</span><span class="params">(<span class="meta">@Qualifier(&quot;webSecurityManager&quot;)</span> DefaultWebSecurityManager defaultWebSecurityManager)</span> </span>&#123;</span><br><span class="line">        ShiroFilterFactoryBean bean = <span class="keyword">new</span> ShiroFilterFactoryBean();</span><br><span class="line">        bean.setSecurityManager(defaultWebSecurityManager);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//shiro的内置过滤器</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * anon:无需认证就可以访问</span></span><br><span class="line"><span class="comment">         * authc：必须认证才可以访问</span></span><br><span class="line"><span class="comment">         * user：必须拥有 记住我 功能才可以用</span></span><br><span class="line"><span class="comment">         * perms：拥有对某个资源的权限才能访问</span></span><br><span class="line"><span class="comment">         * role：拥有某个角色权限才可以fangwen</span></span><br><span class="line"><span class="comment">         * */</span></span><br><span class="line">        Map&lt;String, String&gt; filterMap = <span class="keyword">new</span> LinkedHashMap&lt;&gt;();</span><br><span class="line">        <span class="comment">//filterMap.put(&quot;/user/add&quot;,&quot;authc&quot;);</span></span><br><span class="line">        <span class="comment">// filterMap.put(&quot;/user/update&quot;,&quot;authc&quot;);</span></span><br><span class="line">        filterMap.put(<span class="string">&quot;/user/*&quot;</span>, <span class="string">&quot;authc&quot;</span>);</span><br><span class="line">        bean.setFilterChainDefinitionMap(filterMap);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置登录拦截</span></span><br><span class="line">        bean.setLoginUrl(<span class="string">&quot;/tologin&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>当用户想要访问user下的内容必须要进行认证才可以 否则跳转到登录页（这里省略）</p><h3 id="实现用户认证"><a href="#实现用户认证" class="headerlink" title="实现用户认证"></a>实现用户认证</h3><p>首先是一个简陋的登录页</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>登录页<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;msg&#125;&quot;</span> <span class="attr">style</span>=<span class="string">&quot;color: darkred&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">th:action</span>=<span class="string">&quot;@&#123;/login&#125;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>用户名:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>密码:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;登录&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>登录需要用到的Controller</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&#123;&quot;/&quot; ,&quot;/index&quot;&#125;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toindex</span><span class="params">(Model model)</span></span>&#123;</span><br><span class="line">        model.addAttribute(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;我是首页&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;index&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/user/add&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toadd</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;user/add&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/user/update&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">update</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;user/update&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/tologin&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">tologin</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;login&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/login&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">login</span><span class="params">(<span class="meta">@RequestParam(&quot;username&quot;)</span> String name,<span class="meta">@RequestParam(&quot;password&quot;)</span>String password,Model model)</span></span>&#123;</span><br><span class="line">        <span class="comment">//获取当前的用户</span></span><br><span class="line">        Subject subject = SecurityUtils.getSubject();</span><br><span class="line">        <span class="comment">//封装用户的登陆数据</span></span><br><span class="line">        UsernamePasswordToken token = <span class="keyword">new</span> UsernamePasswordToken(name, password);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            subject.login(token);</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;index&quot;</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (UnknownAccountException e) &#123;</span><br><span class="line">            model.addAttribute(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;用户名不存在&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;login&quot;</span>;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (IncorrectCredentialsException e)&#123;</span><br><span class="line">            model.addAttribute(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;密码错误&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;login&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>subject.login登录成功之后我们UserRelam中的authenticationToken也就会赋值上去了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//认证</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> AuthenticationInfo <span class="title">doGetAuthenticationInfo</span><span class="params">(AuthenticationToken authenticationToken)</span> <span class="keyword">throws</span> AuthenticationException </span>&#123;</span><br><span class="line"></span><br><span class="line">        String name=<span class="string">&quot;lwl&quot;</span>;</span><br><span class="line">        String password=<span class="string">&quot;233&quot;</span>;</span><br><span class="line">        UsernamePasswordToken usernamePasswordToken= (UsernamePasswordToken) authenticationToken;</span><br><span class="line">        <span class="keyword">if</span>(!usernamePasswordToken.getUsername().equals(name))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SimpleAuthenticationInfo(<span class="string">&quot;&quot;</span>,password,<span class="string">&quot;&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="Shiro集成mybatis"><a href="#Shiro集成mybatis" class="headerlink" title="Shiro集成mybatis"></a>Shiro集成mybatis</h3><p>首先是再导入依赖 这里也包含了druid连接池的依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>首先resources下新建一个<code>application.yml</code>配置druid连接池的配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">233</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/test?serverTimeZone=UTC</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line">    <span class="comment">#SpringBoot默认是不注入这些的，需要自己绑定</span></span><br><span class="line">    <span class="comment">#druid数据源专有配置</span></span><br><span class="line">    <span class="attr">initialSize:</span> <span class="number">5</span></span><br><span class="line">    <span class="attr">minIdle:</span> <span class="number">5</span></span><br><span class="line">    <span class="attr">maxActive:</span> <span class="number">20</span></span><br><span class="line">    <span class="attr">maxWait:</span> <span class="number">60000</span></span><br><span class="line">    <span class="attr">timeBetweenEvictionRunsMillis:</span> <span class="number">60000</span></span><br><span class="line">    <span class="attr">minEvictableIdleTimeMillis:</span> <span class="number">300000</span></span><br><span class="line">    <span class="attr">validationQuery:</span> <span class="string">SELECT</span> <span class="number">1</span> <span class="string">FROM</span> <span class="string">DUAL</span></span><br><span class="line">    <span class="attr">testWhileIdle:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">testOnBorrow:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">testOnReturn:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">poolPreparedStatements:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment">#配置监控统计拦截的filters，stat：监控统计、log4j：日志记录、wall：防御sql注入</span></span><br><span class="line">    <span class="comment">#如果允许报错，java.lang.ClassNotFoundException: org.apache.Log4j.Properity</span></span><br><span class="line">    <span class="comment">#则导入log4j 依赖就行</span></span><br><span class="line">    <span class="attr">filters:</span> <span class="string">stat,wall,log4j</span></span><br><span class="line">    <span class="attr">maxPoolPreparedStatementPerConnectionSize:</span> <span class="number">20</span></span><br><span class="line">    <span class="attr">useGlobalDataSourceStat:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">connectionoProperties:</span> <span class="string">druid.stat.mergeSql=true;druid.stat.slowSqlMillis=500</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>然后在<code>application.properties</code>文件中配置mybatis相关</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">##声明mybatis实体类的别名以及mapper的位置</span></span><br><span class="line"><span class="meta">mybatis.type-aliases-package</span>=<span class="string">com.example.demo.model</span></span><br><span class="line"><span class="meta">mybatis.mapper-locations</span>=<span class="string">classpath:mybatis/mapper/*.xml</span></span><br></pre></td></tr></table></figure><p>然后是对应咱们数据库的实体类的声明</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以及mapper接口的声明以及对应xml的声明</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">StudentMapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">Student <span class="title">queryStudentByName</span><span class="params">(String name)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.example.demo.mapper.StudentMapper&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;queryStudentByName&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Student&quot;</span>&gt;</span></span><br><span class="line">                select * from student where name=#&#123;name&#125;;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><p>最后修改我们UserRelam的逻辑代码即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserRelam</span> <span class="keyword">extends</span> <span class="title">AuthorizingRealm</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    StudentMapper studentMapper;</span><br><span class="line">    <span class="comment">//授权</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> AuthorizationInfo <span class="title">doGetAuthorizationInfo</span><span class="params">(PrincipalCollection principalCollection)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//认证</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> AuthenticationInfo <span class="title">doGetAuthenticationInfo</span><span class="params">(AuthenticationToken authenticationToken)</span> <span class="keyword">throws</span> AuthenticationException </span>&#123;</span><br><span class="line"></span><br><span class="line">        UsernamePasswordToken usernamePasswordToken= (UsernamePasswordToken) authenticationToken;</span><br><span class="line">        Student student = studentMapper.queryStudentByName(usernamePasswordToken.getUsername());</span><br><span class="line">        <span class="keyword">if</span>(student==<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;  <span class="comment">//这里表示没有此用户</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SimpleAuthenticationInfo(<span class="string">&quot;&quot;</span>,student.getPassword(),<span class="string">&quot;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试之后发现成功了！</p><h3 id="Shiro请求授权"><a href="#Shiro请求授权" class="headerlink" title="Shiro请求授权"></a>Shiro请求授权</h3><p>首先给我们的用户添加一个权限的字段（实体类也要添加），如下<img src="https://gcore.jsdelivr.net/gh/code-anan/image/20220614214855.png"></p><p>shiro的配置类中设置权限</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建shirofilterFactorybean</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ShiroFilterFactoryBean <span class="title">getShiroFilterFactoryBean</span><span class="params">(<span class="meta">@Qualifier(&quot;webSecurityManager&quot;)</span> DefaultWebSecurityManager defaultWebSecurityManager)</span> </span>&#123;</span><br><span class="line">        ShiroFilterFactoryBean bean = <span class="keyword">new</span> ShiroFilterFactoryBean();</span><br><span class="line">        bean.setSecurityManager(defaultWebSecurityManager);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//shiro的内置过滤器</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * anon:无需认证就可以访问</span></span><br><span class="line"><span class="comment">         * authc：必须认证才可以访问</span></span><br><span class="line"><span class="comment">         * user：必须拥有 记住我 功能才可以用</span></span><br><span class="line"><span class="comment">         * perms：拥有对某个资源的权限才能访问</span></span><br><span class="line"><span class="comment">         * role：拥有某个角色权限才可以fangwen</span></span><br><span class="line"><span class="comment">         * */</span></span><br><span class="line">        Map&lt;String, String&gt; filterMap = <span class="keyword">new</span> LinkedHashMap&lt;&gt;();</span><br><span class="line">        <span class="comment">//filterMap.put(&quot;/user/add&quot;,&quot;authc&quot;);</span></span><br><span class="line">        <span class="comment">// filterMap.put(&quot;/user/update&quot;,&quot;authc&quot;);</span></span><br><span class="line">        filterMap.put(<span class="string">&quot;/user/add&quot;</span>,<span class="string">&quot;perms[add]&quot;</span>);</span><br><span class="line">        filterMap.put(<span class="string">&quot;/user/update&quot;</span>, <span class="string">&quot;perms[update]&quot;</span>);</span><br><span class="line">        bean.setFilterChainDefinitionMap(filterMap);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置登录拦截</span></span><br><span class="line">        bean.setLoginUrl(<span class="string">&quot;/tologin&quot;</span>);</span><br><span class="line">        <span class="comment">//设置未授权跳转页面</span></span><br><span class="line">        bean.setUnauthorizedUrl(<span class="string">&quot;/unauthorize&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>到add目录需要有add的权限、到upadte目录需要有update的权限，然后在relam类中修改代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserRelam</span> <span class="keyword">extends</span> <span class="title">AuthorizingRealm</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    StudentMapper studentMapper;</span><br><span class="line">    <span class="comment">//授权</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> AuthorizationInfo <span class="title">doGetAuthorizationInfo</span><span class="params">(PrincipalCollection principalCollection)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        SimpleAuthorizationInfo info = <span class="keyword">new</span> SimpleAuthorizationInfo();</span><br><span class="line"></span><br><span class="line">        Student principal = (Student) SecurityUtils.getSubject().getPrincipal();</span><br><span class="line">        info.addStringPermission(principal.getPemers());</span><br><span class="line">        <span class="keyword">return</span> info;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//认证</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> AuthenticationInfo <span class="title">doGetAuthenticationInfo</span><span class="params">(AuthenticationToken authenticationToken)</span> <span class="keyword">throws</span> AuthenticationException </span>&#123;</span><br><span class="line"></span><br><span class="line">        UsernamePasswordToken usernamePasswordToken= (UsernamePasswordToken) authenticationToken;</span><br><span class="line">        Student student = studentMapper.queryStudentByName(usernamePasswordToken.getUsername());</span><br><span class="line">        <span class="keyword">if</span>(student==<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;  <span class="comment">//这里表示没有此用户</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SimpleAuthenticationInfo(student,student.getPassword(),<span class="string">&quot;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>需要注意的认证的代码 我们返回的SimpleAuthenticationInfo中给第一个属性Principal赋值了 这样我们才可以在上面拿到用户信息，然后给用户添加他们在数据库中有的权限、例如我们的root用户只有add权限</p><p><img src="https://gcore.jsdelivr.net/gh/code-anan/image/20220614215257.png"></p><p>那么他就无法访问更新目录下的资源</p><h3 id="Shiro整合thymeleaf"><a href="#Shiro整合thymeleaf" class="headerlink" title="Shiro整合thymeleaf"></a>Shiro整合thymeleaf</h3><p>上面我们做完了给用户授权的操作，但是前端页面还是会两个功能按钮都展示 我们想要给用户只展示他有的权限进行展示，所以这里需要整合一下thymeleaf</p><p>首先是依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.theborakompanioni<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>thymeleaf-extras-shiro<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后在我们的shiro的配置类中添加如下bean</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ShiroDialect <span class="title">getShiroDialect</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ShiroDialect();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>最后稍微修改我们的前端页面接口</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.w3.org/1999/xhtml&quot;</span> <span class="attr">xmlns:shiro</span>=<span class="string">&quot;http://www.pollix.at/thymeleaf/shiro&quot;</span>&gt;</span>&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;msg&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">shiro:notAuthenticated</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/tologin&#125;&quot;</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">shiro:hasPermission</span>=<span class="string">&quot;add&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/user/add&#125;&quot;</span>&gt;</span>添加<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">shiro:hasPermission</span>=<span class="string">&quot;update&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/user/update&#125;&quot;</span>&gt;</span>更新<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>大功告成了</p><h1 id="任务"><a href="#任务" class="headerlink" title="任务"></a>任务</h1><h2 id="异步任务"><a href="#异步任务" class="headerlink" title="异步任务"></a>异步任务</h2><p>在SpringBoot启动类上添加@EnableAsync  业务方法上添加@Async注解  完了</p><h2 id="定时任务"><a href="#定时任务" class="headerlink" title="定时任务"></a>定时任务</h2><p>也很简单，创建一个类添以下注解即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableScheduling</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SchedulerTask</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Scheduled(cron = &quot;* * * * * ?&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">taskmethod</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="keyword">new</span> Date());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>唯一需要注意的是这里需要用到cron表达式，在<a href="https://qqe2.com/cron#p_hour">这里</a>可以查到每个表达式表达的含义 上面默认的表示每秒执行一次，还有其他的比如我现在的项目用的是3 0 0 * * ?  表示每天凌晨三秒的时候执行一次方法中的代码</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>上面仅仅是一些基础的使用、SpringBoot的内容还有很多需要学习，继续加油吧(￣▽￣)／</p>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
            <tag> 框架 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring知识点回顾</title>
      <link href="post/SpringKeyPoints/"/>
      <url>post/SpringKeyPoints/</url>
      
        <content type="html"><![CDATA[<h1 id="Spring优点"><a href="#Spring优点" class="headerlink" title="Spring优点"></a>Spring优点</h1><ol><li>轻量化</li><li>针对接口编程、解耦合</li><li>AOP编程的支持</li><li>方便集成各种优秀框架</li></ol><h1 id="IOC控制反转"><a href="#IOC控制反转" class="headerlink" title="IOC控制反转"></a>IOC控制反转</h1><p>IOC（Inversion of Control）控制反转：一种思想，把对象的创建、赋值、管理都交给代码之外的<code>容器</code>实现，也就是对象的创建由外部资源完成。</p><p>简单理解就是不用new Student()的方式创建对象、由Spring容器来做这件事情</p><h2 id="IOC的技术实现"><a href="#IOC的技术实现" class="headerlink" title="IOC的技术实现"></a>IOC的技术实现</h2><p>DI（Dependency Injection）:依赖注入是IOC的技术实现，只需要在程序中提供要使用的对象名称、对象创建赋值都由容器内部实现、其底层是使用的<code>反射</code>机制。可以把Spring理解成一个容器，用来管理对象给对象赋值。</p><h2 id="基于bean标签的DI"><a href="#基于bean标签的DI" class="headerlink" title="基于bean标签的DI"></a>基于bean标签的DI</h2><h3 id="创建一个maven项目"><a href="#创建一个maven项目" class="headerlink" title="创建一个maven项目"></a>创建一个maven项目</h3><p><img src="https://gcore.jsdelivr.net/gh/code-anan/image/20211223150019.png"></p><h3 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="创建实体类"><a href="#创建实体类" class="headerlink" title="创建实体类"></a>创建实体类</h3><p>这里我们创建一个接口和实现类以及一个普通类</p><p>接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MyService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">someService</span><span class="params">(Integer i)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>接口实现类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyServiceImpl</span> <span class="keyword">implements</span> <span class="title">MyService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">someService</span><span class="params">(Integer i)</span> </span>&#123;</span><br><span class="line">        System.out.println(i+<span class="string">&quot;的方法实现了！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>普通类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String interest;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getInterest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> interest;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setInterest</span><span class="params">(String interest)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.interest = interest;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Student&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;id=&quot;</span> + id +</span><br><span class="line">                <span class="string">&quot;, name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, interest=&#x27;&quot;</span> + interest + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="创建spring的配置文件"><a href="#创建spring的配置文件" class="headerlink" title="创建spring的配置文件"></a>创建spring的配置文件</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;myService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.weilong.example.mapper.impl.MyServiceImpl&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;student&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.weilong.example.model.Student&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>bean标签的作用就是告诉Spring要创建某个类的对象</p><p>id：对象的自定义名称，唯一值，Spring通过id的值找到这个对象</p><p>class：类的全限定名称，不能是接口否则不能创建对象</p><p>这里定义的bean相当于了执行了MyService  myService=new MyServiceImpl();并且spring把创建好的对象放入到map中（Spring有一个map用来存放对象）SpringMap.put(“myService”,new MyServiceImpl());</p><p>一个bean标签仅代表创建一个对象；</p><h3 id="使用bean创建的对象"><a href="#使用bean创建的对象" class="headerlink" title="使用bean创建的对象"></a>使用bean创建的对象</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//指定Spring配置文件的名称(默认放在resources目录下)</span></span><br><span class="line">        String config=<span class="string">&quot;SpringConfig.xml&quot;</span>;</span><br><span class="line">        <span class="comment">//创建spring容器对象（ClassPathXmlApplicationContext通过从类路径中加载spring配置文件）</span></span><br><span class="line">        ApplicationContext application = <span class="keyword">new</span> ClassPathXmlApplicationContext(config);</span><br><span class="line">        <span class="comment">//通过容器获取对象 getBean(&quot;配置文件中bean的值&quot;)</span></span><br><span class="line">        MyService myService = (MyService)application.getBean(<span class="string">&quot;myService&quot;</span>);</span><br><span class="line">        Student student = (Student)application.getBean(<span class="string">&quot;student&quot;</span>);</span><br><span class="line">        <span class="comment">//执行对象的方法</span></span><br><span class="line">        myService.someService(<span class="number">1</span>);</span><br><span class="line">        student.setId(<span class="number">1</span>);</span><br><span class="line">        student.setName(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">        student.setInterest(<span class="string">&quot;玩游戏&quot;</span>);</span><br><span class="line">        System.out.println(student);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>运行之：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>的方法实现了！</span><br><span class="line">Student&#123;id=<span class="number">1</span>, name=<span class="string">&#x27;张三&#x27;</span>, interest=<span class="string">&#x27;玩游戏&#x27;</span>&#125;</span><br></pre></td></tr></table></figure><p>emm 觉得这种方式傻逼很正常  我也这样觉得（后面全部用注解了）</p><h3 id="创建非自定义类的对象"><a href="#创建非自定义类的对象" class="headerlink" title="创建非自定义类的对象"></a>创建非自定义类的对象</h3><p>Spring还可以创建非自定义类的对象，例如java工具包下的Date类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean id=<span class="string">&quot;mydate&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;java.util.Date&quot;</span>&gt;</span><br></pre></td></tr></table></figure><h3 id="给对象赋值"><a href="#给对象赋值" class="headerlink" title="给对象赋值"></a>给对象赋值</h3><p>DI的实现方式有两种：</p><ul><li><p>在spring的配置文件中，使用标签和属性完成，叫做基于xml的di实现</p></li><li><p>使用spring中的注解（常用）完成属性赋值，叫做基于注解的di实现</p></li></ul><p>DI的语法分类</p><ul><li>set注入（设置注入）：spring调用类的set方法，在set方法中完成对属性的赋值</li><li>构造注入，spring调用类的有参构造方法创建对象</li></ul><h4 id="set注入"><a href="#set注入" class="headerlink" title="set注入"></a>set注入</h4><p>spring的配置文件中</p><ul><li>简单类型的set注入(Spring中java基本数据类型和String类型都被视为简单类型)</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;student&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.weilong.example.model.Student&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;id&quot;</span> <span class="attr">value</span>=<span class="string">&quot;2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;interest&quot;</span> <span class="attr">value</span>=<span class="string">&quot;玩小车&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;艾伦&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>引用类型的set注入</li></ul><p>这里演示给Student类添加一个school属性即可</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;student&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.weilong.example.model.Student&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;id&quot;</span> <span class="attr">value</span>=<span class="string">&quot;2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;interest&quot;</span> <span class="attr">value</span>=<span class="string">&quot;玩小车&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;艾伦&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;school&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;myschool&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;myschool&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.weilong.example.model.School&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;清华大学&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;address&quot;</span> <span class="attr">value</span>=<span class="string">&quot;北京海淀区&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>引用类型的value换为ref 值为bean的id即可</p><h4 id="构造注入"><a href="#构造注入" class="headerlink" title="构造注入"></a>构造注入</h4><p>使用的前提是确定我们的类中定义好了有参构造</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;student&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.weilong.example.model.Student&quot;</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;id&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;艾伦&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;interest&quot;</span> <span class="attr">value</span>=<span class="string">&quot;变身巨人&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;school&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;myschool&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>有参构造赋值的方式使用constructor-arg标签并且可以按照idnex的方式赋值，这里不再复述</p><p>引用类型的自动注入也分为两种：</p><ul><li>按照名称注入</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;student&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.weilong.example.model.Student&quot;</span> <span class="attr">autowire</span>=<span class="string">&quot;byName&quot;</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;id&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;艾伦&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;interest&quot;</span> <span class="attr">value</span>=<span class="string">&quot;变身巨人&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--&lt;constructor-arg name=&quot;school&quot; ref=&quot;myschool&quot;&gt;&lt;/constructor-arg&gt;--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;school&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.weilong.example.model.School&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;清华大学&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;address&quot;</span> <span class="attr">value</span>=<span class="string">&quot;北京海淀区&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>autowire=”byName”:需要保证的引用类型的属性名和配置文件中的bean标签中的id保持一致且数据类型一致，这样就能够赋值给引用类型</p><ul><li>按照类型注入</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;student&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.weilong.example.model.Student&quot;</span> <span class="attr">autowire</span>=<span class="string">&quot;byType&quot;</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;id&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;艾伦&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;interest&quot;</span> <span class="attr">value</span>=<span class="string">&quot;变身巨人&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--&lt;constructor-arg name=&quot;school&quot; ref=&quot;myschool&quot;&gt;&lt;/constructor-arg&gt;--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;myschool&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.weilong.example.model.School&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;清华大学&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;address&quot;</span> <span class="attr">value</span>=<span class="string">&quot;北京海淀区&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>autowire=”byType”:java类中引用类型的数据类型(上面那个bean中)和配置文件bean的class属性（下面的bean）是有同源关系的，这样的bean能够赋值给引用类型</p><p>同源关系：一样、父子类关系、接口和实现类关系</p><p>注意：使用这种方式必须只有一个bean是符合条件的 负责会报错</p><h3 id="第一个小例总结"><a href="#第一个小例总结" class="headerlink" title="第一个小例总结"></a>第一个小例总结</h3><p>什么样的对象放入容器中：</p><p>dao类，service类，controller类和工具类且在容器中同一个名称的对象只有一个</p><p>不放入到容器中：</p><p>实体类对象因为他们一般来自数据库</p><p>servlet、listener和filter等</p><h3 id="多个配置文件"><a href="#多个配置文件" class="headerlink" title="多个配置文件"></a>多个配置文件</h3><p>可以使用具有包含关系的配置文件，可以把配置文件按照模块或者功能进行分类，在总配置文件中可以使用下面的方式加载其他配置文件，例如</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">&quot;classpath:spring/spring-school.xml&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">&quot;classpath:spring/spring-student.xml&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>或者使用通配符*</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">&quot;classpath:spring/spring-*.xml&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注意主配置文件名称不能包含在通配符的范围之内</p><h2 id="基于注解的DI"><a href="#基于注解的DI" class="headerlink" title="基于注解的DI"></a>基于注解的DI</h2><p>顾名思义，可以使用注解的方式完成java对象的创建并赋值</p><h3 id="使用步骤"><a href="#使用步骤" class="headerlink" title="使用步骤"></a>使用步骤</h3><h4 id="加入spring-context依赖"><a href="#加入spring-context依赖" class="headerlink" title="加入spring-context依赖"></a>加入spring-context依赖</h4><p>加入Spring-context(上面加过了)的同时，也间接的加入了Spring-aop的依赖，使用注解就需要这个依赖</p><h4 id="类中加入spring的注解"><a href="#类中加入spring的注解" class="headerlink" title="类中加入spring的注解"></a>类中加入spring的注解</h4><p><img src="https://gcore.jsdelivr.net/gh/code-anan/image/20211224171126.png"></p><p>@component:创建对象 等同于bean标签的作用</p><p>value就是对象的名称 也就是bean的id值 并且唯一不重复 value可忽略不写 如果不指定对象名称 默认为类名的首字符小写</p><p>与@Component功能一致的其他注解：</p><ul><li>@Repository(用在持久层类的上面)：放在dao的实现类上面表示创建dao对象 使其与数据库交互</li><li>@Service（用在业务层类的上面）：放在service的实现类上创建service对象，serevice对象作用是做业务处理可以有事务的功能</li><li>@Controller（用在控制层上）：创建控制层对象，能够接收用户提交传递的参数并能处理请求结果</li></ul><h4 id="声明组件扫描器"><a href="#声明组件扫描器" class="headerlink" title="声明组件扫描器"></a>声明组件扫描器</h4><p>在spring配置文件中加入下面标签</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;org.example.model&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br></pre></td></tr></table></figure><p>base-package：指定添加注解的包名</p><p>工作方式：spring会扫描遍历base-package指定的包把包中和子类的包中的所有类，找到类中的注解创建对象或给属性赋值</p><p>如果有多个包 可以选择扫描多个包或者使用<code>;</code> 或者<code>,</code>分隔还可以直接指定父类包的方式</p><h3 id="属性赋值"><a href="#属性赋值" class="headerlink" title="属性赋值"></a>属性赋值</h3><h4 id="简单类型的属性赋值"><a href="#简单类型的属性赋值" class="headerlink" title="简单类型的属性赋值"></a>简单类型的属性赋值</h4><p>直接在实体类中的属性上面使用@value注解赋值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Value(value = &quot;2&quot;)</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Value(&quot;张三&quot;)</span></span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Value(&quot;打王者&quot;)</span></span><br><span class="line"><span class="keyword">private</span> String hobby;</span><br></pre></td></tr></table></figure><p>其实value=可以省略，也可以在set方法上面使用</p><h4 id="引用类型的赋值"><a href="#引用类型的赋值" class="headerlink" title="引用类型的赋值"></a>引用类型的赋值</h4><p>使用注解@Autowired：使用的是自动注入原理，支持byName、byType默认使用的是byType自动注入</p><p>位置可以在属性定义的上面也可以在set方法的上面</p><p>如果要使用byName的方式，则需要添加@Qualifier注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Value(value = &quot;2&quot;)</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Value(&quot;张三&quot;)</span></span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Value(&quot;打王者&quot;)</span></span><br><span class="line"><span class="keyword">private</span> String hobby;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="meta">@Qualifier(value = &quot;aSchool&quot;)</span></span><br><span class="line"><span class="keyword">private</span> School school;</span><br></pre></td></tr></table></figure><p>School类中应为(名称需要跟@Qualifier的value值一致)：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component(&quot;aSchool&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">School</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Value(&quot;深圳中学&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="meta">@Value(&quot;深圳市&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String address;</span><br></pre></td></tr></table></figure><p>输入结果为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Student&#123;id=<span class="number">2</span>, name=<span class="string">&#x27;张三&#x27;</span>, hobby=<span class="string">&#x27;打王者&#x27;</span>, school=School&#123;name=<span class="string">&#x27;深圳中学&#x27;</span>, address=<span class="string">&#x27;深圳市&#x27;</span>&#125;&#125;</span><br></pre></td></tr></table></figure><p>默认使用byType的方式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Value(value = &quot;2&quot;)</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Value(&quot;张三&quot;)</span></span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Value(&quot;打王者&quot;)</span></span><br><span class="line"><span class="keyword">private</span> String hobby;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> School school;</span><br></pre></td></tr></table></figure><p>School类中应为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component(&quot;anotherName&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">School</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Value(&quot;深圳小学&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="meta">@Value(&quot;深圳市&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String address;</span><br></pre></td></tr></table></figure><p>输出结果为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Student&#123;id=<span class="number">2</span>, name=<span class="string">&#x27;张三&#x27;</span>, hobby=<span class="string">&#x27;打王者&#x27;</span>, school=School&#123;name=<span class="string">&#x27;深圳小学&#x27;</span>, address=<span class="string">&#x27;深圳市&#x27;</span>&#125;&#125;</span><br></pre></td></tr></table></figure><p>可以看出来默认使用byType的方式 与它的名称无关了</p><h3 id="Required属性"><a href="#Required属性" class="headerlink" title="Required属性"></a>Required属性</h3><p>required：@Autowired的属性，布尔类型，默认为true</p><p>required=true:表示如果引用类型赋值失败程序报错并且终止执行</p><p>required=false:表示引用类型如果赋值失败，程序可以正常执行，引用类型是null</p><h3 id="Resource注解"><a href="#Resource注解" class="headerlink" title="Resource注解"></a>Resource注解</h3><p>jdk中的一个注解，可以用它给引用类型赋值使用的也是自动注入原理，支持byType、byName两种方式并且默认的是byName</p><p>位置可以放在属性定义上也可以放到set方法上</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Resource(name = &quot;anotherName&quot;)</span></span><br><span class="line"> <span class="keyword">private</span> School school;</span><br></pre></td></tr></table></figure><p>如果不添加name属性，则默认使用byName的方式赋值失败之后选择byType，如果添加name属性，则表示只使用byName的方式，name就是bean的id（名称）</p><h1 id="AOP面向切面编程"><a href="#AOP面向切面编程" class="headerlink" title="AOP面向切面编程"></a>AOP面向切面编程</h1><p>AOP（Aspect Orient Programming）:面向切面编程基于动态代理可以使用jdk、cglib两种代理方式，AOP就是动态代理的规范化，把动态代理的实现步骤和方式都定义好，让开发人员用一种统一的方式使用动态代理</p><h2 id="面向切面编程的理解"><a href="#面向切面编程的理解" class="headerlink" title="面向切面编程的理解"></a>面向切面编程的理解</h2><ol><li>分析项目功能找出切面</li><li>合理安排切面的执行时间（在目标方法之前还是之后）</li><li>合理安排切面的执行位置，具体在哪个类哪个方法增强功能</li></ol><h2 id="术语"><a href="#术语" class="headerlink" title="术语"></a>术语</h2><ol><li><p>Aspect:切面，表示增强的功能，本质还是一堆完成一个功能的代码，但不是业务功能，常见的切面功能有日志、事务、统计信息、参数检查、权限验证</p></li><li><p>JoinPoint:连接点，连接业务方法和切面的位置</p></li><li><p>Pointcut:切入点，指多个连接点方法的集合</p></li><li><p>目标对象：给哪个类的方法增加功能，这个类就是目标对象</p></li><li><p>Advice：通知，表示切面功能执行的时间 </p></li></ol><h2 id="AOP的实现"><a href="#AOP的实现" class="headerlink" title="AOP的实现"></a>AOP的实现</h2><p>aspectJ:一个开源专门做aop的框架，spring框架中继承了aspectJ框架，通过spring就能使用他的功能</p><p>aspectJ实现AOP有两种方式：</p><ol><li>使用xml的配置文件：配置全局事务</li><li>使用注解，我们在项目中要做AOP功能一般都使用注解，aspectJ中有五个注解</li></ol><h2 id="aspectJ的使用"><a href="#aspectJ的使用" class="headerlink" title="aspectJ的使用"></a>aspectJ的使用</h2><h3 id="通知类型"><a href="#通知类型" class="headerlink" title="通知类型"></a>通知类型</h3><p>这个执行时间在规范中叫做通知(Advice)，在aspectJ框架中使用注解表示，也可以使用xml配置文件中的标签</p><ul><li>@Before</li><li>@AfterReturning</li><li>@Around</li><li>@AfterThrowing</li><li>@After</li></ul><h3 id="切入点表达式"><a href="#切入点表达式" class="headerlink" title="切入点表达式"></a>切入点表达式</h3><p>我们使用<code>切入点表达式</code>进行表示切面的执行位置，语法如下</p><p>execution(访问权限 <code>方法返回值</code> <code>方法参数</code> 异常类型)</p><p>表达式中的访问权限和异常类型可以省略，各部分之间使用空格分开，在其中可以使用下列符号</p><p><code>*</code>:0至多个任意字符</p><p><code>..</code>:用在方法参数中，表示任意多个参数；用在包名后，表示当前包及其子包路径</p><p><code>+</code>:用在类名后，表示当前类及其子类；用在接口后，表示当前接口及其实现类</p><p>举例：</p><p>execution(public * *(..))</p><p>指定切入点为：任意的public修饰的方法</p><p>execution(* set*(..))</p><p>指定切入点为：任意一个以”set”开始的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">execution(* com.xyz.service.*.*(..))</span><br></pre></td></tr></table></figure><p>指定切入点为：service包下任何类的任何方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">execution(* com.xyz.service..*.*(..))</span><br></pre></td></tr></table></figure><p>指定切入点为：定义在service包或者子包里的任意类的任意方法。”..”出现在类名中时，后面必须跟”*”，表示包、子包下的所有类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">execution(* *..service.*.*(..))</span><br></pre></td></tr></table></figure><p>指定切入点为：所有包下的service子包下所有类（接口）所有方法为切入点</p><h3 id="案例使用"><a href="#案例使用" class="headerlink" title="案例使用"></a>案例使用</h3><p>使用aspectJ框架实现aop：目的是给已经存在的一些类和方法增加额外的功能，并且不会改变原来的类的代码</p><h4 id="新建maven项目"><a href="#新建maven项目" class="headerlink" title="新建maven项目"></a>新建maven项目</h4><p><img src="https://gcore.jsdelivr.net/gh/code-anan/image/20211223150019.png"></p><p>需要额外手动加入resources目录</p><h4 id="加入依赖"><a href="#加入依赖" class="headerlink" title="加入依赖"></a>加入依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aspects<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.14<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>需要spring的依赖和spring整合的aspectJ的依赖</p><h4 id="创建目标类"><a href="#创建目标类" class="headerlink" title="创建目标类"></a>创建目标类</h4><p>目的是创建目标方法，这里我们创建一个接口（省略）和他的实现类即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyInterfaceImpl</span> <span class="keyword">implements</span> <span class="title">MyInterface</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">say</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;我是大傻逼&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="创建切面类"><a href="#创建切面类" class="headerlink" title="创建切面类"></a>创建切面类</h4><p>首先在类上面加入@Aspect注解 ；在类中定义方法  方法就是切面要执行的功能代码，代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAspect</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before(value = &quot;execution(public String com.weilong.mapper.impl.MyInterfaceImpl.say())&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">myBefore</span><span class="params">()</span></span>&#123;</span><br><span class="line">        SimpleDateFormat format = <span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;YYYY-MM-dd HH:mm:ss&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;目标方法的执行时间为:&quot;</span>+format.format(<span class="keyword">new</span> Date()));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>@Aspect:aspectJ框架中的注解，用来表示当前类是切面类，也就是为业务方法增强功能的类，在这个类中有切面的功能代码，位置定义在类的上面</p><p>方法的定义要求：</p><ol><li>公共方法public</li><li>方法没有返回值（因为不是给别人调用的）</li></ol><p>@Before注解：前置通知注解(通知的一种)</p><p>属性：value值为切入点表达式，表示切面的功能执行的位置，位置定义在方法上面</p><p>特点：在目标方法执行之前执行，不会对目标方法造成任何影响，例如我们这里只是在执行目标方法之前输出一下当前时间</p><h4 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h4><p>spring配置文件中加入目标对象和切面类对象</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd http://www.springframework.org/schema/aop https://www.springframework.org/schema/aop/spring-aop.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;myservice&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.weilong.mapper.impl.MyInterfaceImpl&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;myaspect&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.weilong.aop.MyAspect&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:aspectj-autoproxy</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>声明目标对象和切面类对象由spring统一管理对象；</p><p>aop:aspectj-autoproxy标签的作用是声明自动代理生成器：使用aspectJ框架内部的功能，创建目标对象的代理对象，创建代理对象是在内存中实现的，修改目标对象在内存中的结构所以目标对象就是被修改后的代理对象</p><p>aspectj-autoproxy：会把spring容器中所有的目标对象一次性都生成代理对象</p><h4 id="创建测试类"><a href="#创建测试类" class="headerlink" title="创建测试类"></a>创建测试类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String config=<span class="string">&quot;SpringConfig.xml&quot;</span>;</span><br><span class="line">        ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(config);</span><br><span class="line">        MyInterface myservice = (MyInterface) context.getBean(<span class="string">&quot;myservice&quot;</span>);</span><br><span class="line">        String say = myservice.say();</span><br><span class="line">        System.out.println(say);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>执行之，得到结果<img src="https://gcore.jsdelivr.net/gh/code-anan/image/20211227140418.png"></p><p>可以看到 目标方法执行之前执行了切面方法</p><h3 id="joinPoint的使用"><a href="#joinPoint的使用" class="headerlink" title="joinPoint的使用"></a>joinPoint的使用</h3><p>我们在上述接口和实现类新增一个有参数的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dosome</span><span class="params">(String str, Integer i)</span> </span>&#123;</span><br><span class="line">    System.out.println(str+<span class="string">&quot;的年龄是&quot;</span>+i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>切面类改为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAspect</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before(value = &quot;execution(public void com.weilong.mapper.impl.MyInterfaceImpl.dosome(String,Integer))&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">myBefore</span><span class="params">(JoinPoint jp)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;方法的定义是：&quot;</span>+jp.getSignature().toString());</span><br><span class="line">        System.out.println(<span class="string">&quot;方法的名称是：&quot;</span>+jp.getSignature().getName());</span><br><span class="line">        Object[] args = jp.getArgs();</span><br><span class="line">        <span class="keyword">for</span>(Object o:args)&#123;</span><br><span class="line">            System.out.println(o);</span><br><span class="line">        &#125;</span><br><span class="line">        SimpleDateFormat format = <span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;YYYY-MM-dd HH:mm:ss&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;目标方法的执行时间为:&quot;</span>+format.format(<span class="keyword">new</span> Date()));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试类为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String config=<span class="string">&quot;SpringConfig.xml&quot;</span>;</span><br><span class="line">        ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(config);</span><br><span class="line">        MyInterface myservice = (MyInterface) context.getBean(<span class="string">&quot;myservice&quot;</span>);</span><br><span class="line">        <span class="comment">//System.out.println(myservice.say());</span></span><br><span class="line">        myservice.dosome(<span class="string">&quot;皮卡&quot;</span>,<span class="number">20</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>得到结果为：<img src="https://gcore.jsdelivr.net/gh/code-anan/image/20211227142259.png"></p><p>通过此例 可以看出来JoinPoint在通知方法中可以获取方法执行时的一些信息，比如方法名称、方法的实参如果需要在通知方法中需要用到这些信息就可以选择加入JoinPoint，并且他必须是通知方法中的第一个参数</p><h3 id="其他类型的通知"><a href="#其他类型的通知" class="headerlink" title="其他类型的通知"></a>其他类型的通知</h3><p>我们知道@Before是前置通知，在我们调用目标方法之前执行的，当然还有一些其他类型的通知</p><h4 id="后置通知"><a href="#后置通知" class="headerlink" title="后置通知"></a>后置通知</h4><p>切面类中新增一个后置通知方法，如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@AfterReturning(value = &quot;execution(public String com.weilong.mapper.impl.MyInterfaceImpl.say())&quot;,returning = &quot;res&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterReturning</span><span class="params">(Object res)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;方法的返回结果是：&quot;</span>+res);</span><br><span class="line">        SimpleDateFormat format = <span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;YYYY-MM-dd HH:mm:ss&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;目标方法的执行时间为:&quot;</span>+format.format(<span class="keyword">new</span> Date()));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>@AfterReturning：</p><p>属性：value 值仍为切入点表达式</p><p>returning 自定义变量，表示目标方法的返回值</p><p>位置为通知方法的上面</p><p>特点：在目标方法执行之后执行，并且能够获取到目标方法的返回值，可以根据这个返回制作不同的处理功能并且可以<code>修改这个返回值</code>但是不会影响目标方法的执行结果</p><p>后置通知方法定义要求：</p><ol><li>公共方法（public）</li><li>方法没有返回值</li><li>方法有参数</li></ol><p>执行say方法可以看到返回的结果如下：</p><p><img src="https://gcore.jsdelivr.net/gh/code-anan/image/20211227143432.png"></p><h4 id="环绕通知"><a href="#环绕通知" class="headerlink" title="环绕通知"></a>环绕通知</h4><p>实现类中新增一个方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">returnStudent</span><span class="params">(<span class="keyword">int</span> id, String name)</span> </span>&#123;</span><br><span class="line">        Student student = <span class="keyword">new</span> Student();</span><br><span class="line">        student.setId(id);</span><br><span class="line">        student.setName(name);</span><br><span class="line">        <span class="keyword">return</span> student;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>切面类中新增一个环绕通知方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Around(value = &quot;execution(public Object com.weilong.mapper.impl.MyInterfaceImpl.returnStudent(int,String))&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">myAround</span><span class="params">(ProceedingJoinPoint point)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        SimpleDateFormat format = <span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;YYYY-MM-dd HH:mm:ss&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;环绕通知，在执行目标方法之前的时间为:&quot;</span>+format.format(<span class="keyword">new</span> Date()));</span><br><span class="line">        Student student = (Student) point.proceed();</span><br><span class="line">        student.setId(<span class="number">2</span>);</span><br><span class="line">        student.setName(<span class="string">&quot;张飞&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> student;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>环绕通知方法定义格式：</p><ol><li>公共方法（public）</li><li>需要定义返回值类型（最好Object）</li><li>方法有参数固定（ProceedingJoinPoint）</li></ol><p>@Around:环绕通知 </p><p>属性：value 值为切入点表达式</p><p>位置：在方法的上面</p><p>特点:功能最强的通知，可以在目标方法的执行前后都增强功能，控制目标方法是否被调用执行，并且可以修改目标方法的执行结果并影响目标方法的执行结果</p><p>环绕通知：等同于jdk动态代理的InvocationHandler接口</p><p>参数：ProceedingJoinPoint，等同于Method，作用是执行目标方法的返回值并且可以对其修改</p><p>环绕通知经常用来做事务，在目标方法之前开启事务，执行目标方法，在目标方法执行之后提交事务</p><p>测试类中：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String config=<span class="string">&quot;SpringConfig.xml&quot;</span>;</span><br><span class="line">        ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(config);</span><br><span class="line">        MyInterface myservice = (MyInterface) context.getBean(<span class="string">&quot;myservice&quot;</span>);</span><br><span class="line">        <span class="comment">//System.out.println(myservice.say());</span></span><br><span class="line">       <span class="comment">/* myservice.dosome(&quot;皮卡&quot;,20);*/</span></span><br><span class="line">        Student student =(Student) myservice.returnStudent(<span class="number">1</span>, <span class="string">&quot;lucas&quot;</span>);</span><br><span class="line">        System.out.println(student);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：<img src="https://gcore.jsdelivr.net/gh/code-anan/image/20211227151012.png"></p><p>可以看到在环绕通知中其结果已经被修改了</p><h4 id="异常通知（了解）"><a href="#异常通知（了解）" class="headerlink" title="异常通知（了解）"></a>异常通知（了解）</h4><p>异常通知方法定义格式</p><ol><li>公共的（public）</li><li>没有返回值</li><li>方法参数有一个Exception，还可以添加一个JoinPoint</li></ol><p>@AfterThrowing:异常通知</p><p>属性：value 值为切入点表达式</p><p>throwing自定义的变量，表示目标方法抛出的异常对象，变量名和方法的参数名一致</p><p>特点：1.在目标方法抛出异常时执行2.可以用来做异常的监控程序，监控目标方法是不是有异常</p><p>定义格式如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">@AfterThrowing(value = &quot;execution(public Object com.weilong.mapper.impl.MyInterfaceImpl.returnStudent(int,String))&quot;,throwing = &quot;ex&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">myThowing</span><span class="params">(Exception ex)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;异常通知，方法发生异常时执行了:&quot;</span>+ex.getMessage());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行的效果等价于</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">           MyInterfaceImpl.returnStudent(<span class="keyword">int</span>,String)</span><br><span class="line">&#125;<span class="keyword">catch</span> (Exception ex)&#123;</span><br><span class="line">                myThowing(ex);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="最终通知（了解）"><a href="#最终通知（了解）" class="headerlink" title="最终通知（了解）"></a>最终通知（了解）</h4><p>最终通知方法的定义格式：</p><ol><li><p>public</p></li><li><p>没有返回值</p></li><li><p>方法没有参数，如果有是JoinPoint</p></li></ol><p>@After:最终通知</p><p>属性：value 值为切入点表达式</p><p>位置：方法的上面</p><p>特点：总是会执行，在目标方法执行之后执行，及时目标方法出现异常，也会执行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@After(value = &quot;execution(public Object com.weilong.mapper.impl.MyInterfaceImpl.returnStudent(int,String))&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">myAfter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;最后都会执行的代码&quot;</span>);</span><br><span class="line">        <span class="comment">//一般都是关闭 清理的代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Pointcut注解"><a href="#Pointcut注解" class="headerlink" title="Pointcut注解"></a>Pointcut注解</h3><p>作用：定义和管理切入点，项目中有多个切入点表达式重复，复用使用pointcut</p><p>属性：value 值为切入点表达式</p><p>位置：自定义方法上面</p><p>特点：当使用@Pointcut定义在一个方法的上面，此时这个方法的名称就是切入点表达式的别名，其他通知中，value属性就可以使用这个方法名称，代替这个切入点表达式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Pointcut(value = &quot;*..   *com.weilong.mapper.impl&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mypointcut</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@After(value = &quot;mypointcut()&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">myfianlafter</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Before(value = &quot;mypointcut()&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mybefore</span><span class="params">()</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其实就是起到一个复用的作用</p><p>如果目标类没有接口，spring框架会自动启动cglib代理，如果目标类有接口，也可以使用cglib代理</p><p>spring配置文件设置如下</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span> <span class="attr">proxy-target-class</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>proxy-target-class=”true”表示告诉spring框架使用cglib动态代理</p><h1 id="集成mybatis框架"><a href="#集成mybatis框架" class="headerlink" title="集成mybatis框架"></a>集成mybatis框架</h1><p>IOC技术可以把对象都交给spring容器统一管理，所以spring可以很好的把mybatis集成在一起，看起来像是一个框架，下面通过实例看如何集成</p><h2 id="新建maven项目-1"><a href="#新建maven项目-1" class="headerlink" title="新建maven项目"></a>新建maven项目</h2><p><img src="https://gcore.jsdelivr.net/gh/code-anan/image/20211223150019.png"></p><p>同样需要手动创建resources文件夹</p><h2 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.49<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-tx<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.7.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>分别添加spring依赖、mybatis依赖、mysql驱动依赖、spring的事务依赖、spring集成mybatis的依赖（用来在spring项目中创建mybatis的SqlSessFactory和dao对象的）和druid连接池依赖，最后的<code>spring-jdbc</code>依赖不添加可能会报错</p><h2 id="创建实体类-1"><a href="#创建实体类-1" class="headerlink" title="创建实体类"></a>创建实体类</h2><p>这里我们依然经典student即可注意属性需要跟数据库字段一致</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Student&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;id=&quot;</span> + id +</span><br><span class="line">                <span class="string">&quot;, name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="创建接口和对应的mapper文件"><a href="#创建接口和对应的mapper文件" class="headerlink" title="创建接口和对应的mapper文件"></a>创建接口和对应的mapper文件</h2><p>dao接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">StudentDao</span> </span>&#123;</span><br><span class="line">    <span class="function">List&lt;Student&gt; <span class="title">queryAllStudent</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>StudentDao.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;org.example.dao.StudentDao&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;queryAllStudent&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;org.example.model.Student&quot;</span>&gt;</span></span><br><span class="line">       select id,name,age from student</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><p>定义一个查询所有学生的接口</p><h2 id="创建mybatis主配置文件"><a href="#创建mybatis主配置文件" class="headerlink" title="创建mybatis主配置文件"></a>创建mybatis主配置文件</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;org.example.dao&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="创建service接口和实现类"><a href="#创建service接口和实现类" class="headerlink" title="创建service接口和实现类"></a>创建service接口和实现类</h2><p>service接口:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">StudentService</span> </span>&#123;</span><br><span class="line">    <span class="function">List&lt;Student&gt; <span class="title">queryAllStudent</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们这里同样写一个查询所有学生的接口</p><p>StudentServiceImpl:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentServiceImpl</span> <span class="keyword">implements</span> <span class="title">StudentService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> StudentDao studentDao;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setStudentDao</span><span class="params">(StudentDao studentDao)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.studentDao = studentDao;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Student&gt; <span class="title">queryAllStudent</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;Student&gt; studentList = studentDao.queryAllStudent();</span><br><span class="line">        <span class="keyword">return</span> studentList;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里定义一个studentDao的属性，目的是使用set注入</p><h2 id="创建spring的配置文件-1"><a href="#创建spring的配置文件-1" class="headerlink" title="创建spring的配置文件"></a>创建spring的配置文件</h2><p>名字随意，同样放到resources目录下</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--声明数据源，作用是连接数据库--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;myDataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">init-method</span>=<span class="string">&quot;init&quot;</span> <span class="attr">destroy-method</span>=<span class="string">&quot;close&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/lwl&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;233&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxActive&quot;</span> <span class="attr">value</span>=<span class="string">&quot;20&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--创建sqlsessionFactory对象--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--mybatis中的SqlSessionFactoryBean类为我们创建sqlSessionFactory--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;sqlSessionFactory&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--数据库连接池交给dataSource属性--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;myDataSource&quot;</span>/&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--mybatis主配置文件的位置--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;configLocation&quot;</span> <span class="attr">value</span>=<span class="string">&quot;classpath:mybatis.xml&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--创建dao对象--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--指定sqlSessionFactory的id--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sqlSessionFactoryBeanName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;sqlSessionFactory&quot;</span>/&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--指定dao接口的包名，为每个dao接口都创建一个dao对象放入到spring容器中 dao对象的默认名是接口名首字母小写--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;basePackage&quot;</span> <span class="attr">value</span>=<span class="string">&quot;org.example.dao&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">&lt;!--创建service对象--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;myservice&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.example.service.impl.StudentServiceImpl&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;studentDao&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;studentDao&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="创建测试类-1"><a href="#创建测试类-1" class="headerlink" title="创建测试类"></a>创建测试类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String config=<span class="string">&quot;SpringConfig.xml&quot;</span>;</span><br><span class="line">        <span class="comment">//创建spring容器对象（ClassPathXmlApplicationContext通过从类路径中加载spring配置文件）</span></span><br><span class="line">        ApplicationContext application = <span class="keyword">new</span> ClassPathXmlApplicationContext(config);</span><br><span class="line">        StudentService service= (StudentService) application.getBean(<span class="string">&quot;myservice&quot;</span>);</span><br><span class="line">        List&lt;Student&gt; studentList = service.queryAllStudent();</span><br><span class="line">        <span class="keyword">for</span>(Student student:studentList)&#123;</span><br><span class="line">            System.out.println(student);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/*StudentDao dao= (StudentDao) application.getBean(&quot;studentDao&quot;);</span></span><br><span class="line"><span class="comment">        List&lt;Student&gt; studentList = dao.queryAllStudent();</span></span><br><span class="line"><span class="comment">        for(Student student:studentList)&#123;</span></span><br><span class="line"><span class="comment">            System.out.println(student);</span></span><br><span class="line"><span class="comment">        &#125;*/</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>测试类中 可以拿service对象也可以直接拿dao对象直接查询所得结果<img src="https://gcore.jsdelivr.net/gh/code-anan/image/20211228112256.png"></p><h2 id="使用属性配置文件"><a href="#使用属性配置文件" class="headerlink" title="使用属性配置文件"></a>使用属性配置文件</h2><p>在spring配置文件中添加</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;classpath:jdbc.properties&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>然后在resources目录下添加<code>jdbc.properties</code>文件</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">url</span>=<span class="string">jdbc:mysql://localhost:3306/lwl</span></span><br><span class="line"><span class="attr">username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">password</span>=<span class="string">233</span></span><br><span class="line"><span class="attr">max</span>=<span class="string">20</span></span><br></pre></td></tr></table></figure><p>最后spring中数据库信息写法改为下面的方式即可</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;url&#125;&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;username&#125;&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;password&#125;&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxActive&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;max&#125;&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><h1 id="Spring的事务"><a href="#Spring的事务" class="headerlink" title="Spring的事务"></a>Spring的事务</h1><h2 id="JDBC、mybatis、Hibernate如何处理事务"><a href="#JDBC、mybatis、Hibernate如何处理事务" class="headerlink" title="JDBC、mybatis、Hibernate如何处理事务"></a>JDBC、mybatis、Hibernate如何处理事务</h2><p>jdbc访问数据库处理事务：Connection conn;conn.commit(),conn.rollback();</p><p>mybatis访问数据库处理事务：SqlSession.commit(),SqlSession.rollback()</p><p>Hibernate访问数据库处理事务：</p><p>Session.commit(),Session.rollback()</p><p>可以看到多种数据库的访问技术，有不同的事务处理机制、不同的对象和方法，为了解决这种不足，所以推荐使用spring的事务</p><p>Spring提供一种处理事务的统一模型，能使用统一步骤和方式完成多种不同数据库访问技术的事务处理</p><h2 id="事务的隔离级别"><a href="#事务的隔离级别" class="headerlink" title="事务的隔离级别"></a>事务的隔离级别</h2><p>事务的隔离级别有4个值，mysql默认的隔离级别是REPEATBLE_READ;oracle的默认级别是READ_COMMITTED;</p><ul><li><p>READ_UNCOMMITTED：读未提交，未解决任何并发问题</p></li><li><p>READ_COMMITTED:读已提交。解决脏读，存在不可重复读与幻读</p></li><li><p>REPEATABLE_READ:可重复读。解决脏读，不可重复读、存在幻读</p></li><li><p>SERIALIZABLE:串行化，不存在并发问题</p></li></ul><h2 id="事务的超过时间"><a href="#事务的超过时间" class="headerlink" title="事务的超过时间"></a>事务的超过时间</h2><p>表示一个方法最长的施行时间，如果方法执行时超过了此时间，事务就回滚，单位是秒，整数值默认为-1；</p><h2 id="事务的传播行为"><a href="#事务的传播行为" class="headerlink" title="事务的传播行为"></a>事务的传播行为</h2><p>表示控制业务方法是不是有事务，是什么样的事务；</p><p>总共7个传播行为，表示你的业务方法调用时，事务在方法之间是如何使用的</p><ul><li>PROPAGATION_REQUIRED:指定的方法必须在事务内执行。若当前存在事务，就加入到当前事务中；若当前没有事务，则创建一个新事务；这种传播行为是最常见的选择，也是Spring默认的事务传播行为</li><li>PROPAGATION_SUPPORTS：指定的方法支持当前事务，但若当前没有事务，也可以以非事务的方式执行，比如查询操作，一般不需要事务</li><li>PROPAGATION_REQUIRES_NEW：总是新建一个事务，若当前存在事务，就将当前事务挂起，直到新事务执行完毕</li><li>PROPAGATION_MANDATORY</li><li>PROPAGATION_NESTED</li><li>PROPAGATION_NEVER</li><li>PROPAGATION_NOT_SUPPORT</li></ul><h2 id="回滚事务的时机"><a href="#回滚事务的时机" class="headerlink" title="回滚事务的时机"></a>回滚事务的时机</h2><ol><li>业务方法执行成功，没有异常抛出方法执行完毕后，spring在方法执行后提交事务，事务管理器commit</li><li>当业务方法抛出运行时异常或者error，spring执行回滚，调用事务管理器的rollback</li><li>当业务方法抛出非运行时异常，主要是编译时异常时，提交事务</li></ol><h2 id="总结Spring的事务"><a href="#总结Spring的事务" class="headerlink" title="总结Spring的事务"></a>总结Spring的事务</h2><ol><li><p>管理事务的是 事务管理和他的实现类</p></li><li><p>Spring的事务是一个统一模型</p><p>2.1 指定要使用的事务管理器实现类，使用<bean></p><p>2.2 指定哪些类，哪些方法需要加入事务的功能</p><p>2.3 指定方法需要的隔离级别、传播行为，超时</p></li></ol><h2 id="Spring提供的事务处理方案"><a href="#Spring提供的事务处理方案" class="headerlink" title="Spring提供的事务处理方案"></a>Spring提供的事务处理方案</h2><h3 id="注解方案-中小型项目使用"><a href="#注解方案-中小型项目使用" class="headerlink" title="注解方案(中小型项目使用)"></a>注解方案(中小型项目使用)</h3><p>spring框架自己用aop实现给业务方法增加事务的功能，使用<code>@Transactional</code>注解增加事务</p><h3 id="使用步骤-1"><a href="#使用步骤-1" class="headerlink" title="使用步骤"></a>使用步骤</h3><h4 id="声明事务管理器对象"><a href="#声明事务管理器对象" class="headerlink" title="声明事务管理器对象"></a>声明事务管理器对象</h4><p>spring配置文件中添加</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span> <span class="attr">id</span>=<span class="string">&quot;dataSourceTransactionManager&quot;</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--指定数据库--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;myDataSource&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="开启事务注解驱动"><a href="#开启事务注解驱动" class="headerlink" title="开启事务注解驱动"></a>开启事务注解驱动</h4><p>spring配置文件中添加</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">tx:annotation-driven</span> <span class="attr">transaction-manager</span>=<span class="string">&quot;dataSourceTransactionManager&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>作用是告诉spring框架，要使用注解的方式管理事务</p><p>PS：driver是以tx为结尾的</p><h4 id="添加-Transactional注解"><a href="#添加-Transactional注解" class="headerlink" title="添加@Transactional注解"></a>添加@Transactional注解</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Transactional(</span></span><br><span class="line"><span class="meta">            propagation = Propagation.REQUIRED,</span></span><br><span class="line"><span class="meta">            isolation = Isolation.DEFAULT,</span></span><br><span class="line"><span class="meta">            readOnly = false,</span></span><br><span class="line"><span class="meta">            rollbackFor = &#123;</span></span><br><span class="line"><span class="meta">                    NullPointerException.class</span></span><br><span class="line"><span class="meta">            &#125;</span></span><br><span class="line"><span class="meta">    )</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">insertStudent</span><span class="params">(Student student)</span> </span>&#123;</span><br><span class="line">        Student insertStudent = <span class="keyword">new</span> Student();</span><br><span class="line">        insertStudent.setId(student.getId());</span><br><span class="line">        insertStudent.setName(student.getName());</span><br><span class="line">        insertStudent.setAge(student.getAge());</span><br><span class="line">        <span class="keyword">int</span> i = studentDao.insertStudent(insertStudent);</span><br><span class="line">        <span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>propagation:表示事务传播方式</p><p>isolation：隔离级别</p><p>rollbackFor:表示发生指定的异常一定进行回滚，首先会检查方法抛出的异常是不是在rollbackFor的属性中如果在之中不论是什么类型的异常一定会进行回滚如果不在之中，spring进行判断是不是运行时异常如果是一定回滚</p><p>这些Transactional的属性全部可以默认不写，默认传播方式为Propagation.REQUIRED，隔离级别为Default、默认抛出运行时异常事务回滚</p><h3 id="适合大型项目的方式"><a href="#适合大型项目的方式" class="headerlink" title="适合大型项目的方式"></a>适合大型项目的方式</h3><h4 id="添加aspectJ依赖"><a href="#添加aspectJ依赖" class="headerlink" title="添加aspectJ依赖"></a>添加aspectJ依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aspects<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.14<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="声明事务管理器"><a href="#声明事务管理器" class="headerlink" title="声明事务管理器"></a>声明事务管理器</h4><p>spring配置文件中添加</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span> <span class="attr">id</span>=<span class="string">&quot;dataSourceTransactionManager&quot;</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--指定数据库--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;myDataSource&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="声明方法需要的事务类型"><a href="#声明方法需要的事务类型" class="headerlink" title="声明方法需要的事务类型"></a>声明方法需要的事务类型</h4><p>配置方法的事务属性（隔离级别、传播行为、超时等）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">transaction-manager</span>=<span class="string">&quot;dataSourceTransactionManager&quot;</span> <span class="attr">id</span>=<span class="string">&quot;interceptor&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;queryAllStudent&quot;</span> <span class="attr">propagation</span>=<span class="string">&quot;REQUIRED&quot;</span> <span class="attr">isolation</span>=<span class="string">&quot;DEFAULT&quot;</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">rollback-for</span>=<span class="string">&quot;NullPointerException.class&quot;</span>/&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;insertStudent&quot;</span> <span class="attr">propagation</span>=<span class="string">&quot;REQUIRES_NEW&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></span><br></pre></td></tr></table></figure><p>tx:advice:</p><p> id：自定义名称唯一标识</p><p>transaction-manager：事务管理器的id</p><p>tx:method：给具体的方法配置事务属性，可以有多个</p><p>name：方法名称，不带有包和类并且可以使用通配符，*表示任意字符</p><p>propagation：传播行为</p><p>isolation：隔离级别</p><p>rollback-for：表示发生指定的异常一定进行回滚，首先会检查方法抛出的异常是不是在rollbackFor的属性中如果在之中不论是什么类型的异常一定会进行回滚如果不在之中，spring进行判断是不是运行时异常如果是一定回滚</p><h4 id="配置AOP"><a href="#配置AOP" class="headerlink" title="配置AOP"></a>配置AOP</h4><p>指定哪些类要创建代理  同样是Spring配置文件中指定</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;servicept&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(* *..service..*.*(..))&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">&quot;interceptor&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;servicept&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:advisor</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure><p>aop:pointcut:配置切入点表达式，指定哪些包类要使用事务</p><p>aop:advisor：配置增强器：关联advice和pointcut</p><p>advice-ref为上面tx:advice的id值</p><p>pointcut-ref为切入点表达式的id</p><p>这种方式可以为具体的哪些包哪些类和方法设置怎样的事务属性</p><h1 id="Spring与web"><a href="#Spring与web" class="headerlink" title="Spring与web"></a>Spring与web</h1><p>web项目在Tomcat服务器上运行，tomcat一旦启动、项目一直运行不可能还像javase那样创建classPathXmlApplicationContext对象，下面介绍如何在web项目中使用容器对象</p><h2 id="创建web项目"><a href="#创建web项目" class="headerlink" title="创建web项目"></a>创建web项目</h2><p><img src="https://gcore.jsdelivr.net/gh/code-anan/image/20211230184240.png"></p><p>创建一个webapp项目，需要手动添加java跟resources目录</p><h2 id="添加依赖-1"><a href="#添加依赖-1" class="headerlink" title="添加依赖"></a>添加依赖</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--spring核心ioc--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--做spring事务用到的--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-tx<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--mybatis依赖--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--mybatis和spring集成的依赖--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--mysql驱动--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.9<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--阿里公司的数据库连接池--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- servlet依赖 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- jsp依赖 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet.jsp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jsp-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.1-b03<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--为了使用监听器对象，加入依赖--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="创建dao和映射文件"><a href="#创建dao和映射文件" class="headerlink" title="创建dao和映射文件"></a>创建dao和映射文件</h2><p>dao接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">StudentDao</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">insertStudent</span><span class="params">(Student student)</span></span>;</span><br><span class="line">    <span class="function">List&lt;Student&gt; <span class="title">selectStudents</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>映射文件:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.bjpowernode.dao.StudentDao&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insertStudent&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;Student&quot;</span>&gt;</span></span><br><span class="line">        insert into student (id,name,email,age) values(#&#123;id&#125;,#&#123;name&#125;,#&#123;email&#125;,#&#123;age&#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectStudents&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Student&quot;</span>&gt;</span></span><br><span class="line">        select id,name,email,age from student order by id desc</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="创建实体类对象"><a href="#创建实体类对象" class="headerlink" title="创建实体类对象"></a>创建实体类对象</h2><p>依然经典student即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="comment">//属性名和列名一样。</span></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(Integer id, String name, String email, Integer age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.email = email;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getEmail</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> email;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setEmail</span><span class="params">(String email)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.email = email;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(Integer age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Student&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;id=&quot;</span> + id +</span><br><span class="line">                <span class="string">&quot;, name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, email=&#x27;&quot;</span> + email + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="创建service接口和实现类-1"><a href="#创建service接口和实现类-1" class="headerlink" title="创建service接口和实现类"></a>创建service接口和实现类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">StudentService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">addStudent</span><span class="params">(Student student)</span></span>;</span><br><span class="line">    <span class="function">List&lt;Student&gt; <span class="title">queryStudents</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentServiceImpl</span> <span class="keyword">implements</span> <span class="title">StudentService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//引用类型</span></span><br><span class="line">    <span class="keyword">private</span> StudentDao studentDao;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//使用set注入，赋值</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setStudentDao</span><span class="params">(StudentDao studentDao)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.studentDao = studentDao;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">addStudent</span><span class="params">(Student student)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> nums = studentDao.insertStudent(student);</span><br><span class="line">        <span class="keyword">return</span> nums;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Student&gt; <span class="title">queryStudents</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;Student&gt; students = studentDao.selectStudents();</span><br><span class="line">        <span class="keyword">return</span> students;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="mybatis配置文件"><a href="#mybatis配置文件" class="headerlink" title="mybatis配置文件"></a>mybatis配置文件</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--settings：控制mybatis全局行为--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--设置mybatis输出日志--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;logImpl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;STDOUT_LOGGING&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--设置别名--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--name:实体类所在的包名</span></span><br><span class="line"><span class="comment">            表示com.bjpowernode.domain包中的列名就是别名</span></span><br><span class="line"><span class="comment">            你可以使用Student表示com.bjpowenrode.domain.Student</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.bjpowernode.domain&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- sql mapper(sql映射文件)的位置--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">          name：是包名， 这个包中的所有mapper.xml一次都能加载</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.bjpowernode.dao&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="创建spring主配置文件"><a href="#创建spring主配置文件" class="headerlink" title="创建spring主配置文件"></a>创建spring主配置文件</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">       把数据库的配置信息，写在一个独立的文件，编译修改数据库的配置内容</span></span><br><span class="line"><span class="comment">       spring知道jdbc.properties文件的位置</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;classpath:jdbc.properties&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--声明数据源DataSource, 作用是连接数据库的--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;myDataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">init-method</span>=<span class="string">&quot;init&quot;</span> <span class="attr">destroy-method</span>=<span class="string">&quot;close&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--set注入给DruidDataSource提供连接数据库信息 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--    使用属性配置文件中的数据，语法 $&#123;key&#125; --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.url&#125;&quot;</span> /&gt;</span><span class="comment">&lt;!--setUrl()--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.username&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.passwd&#125;&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxActive&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.max&#125;&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--声明的是mybatis中提供的SqlSessionFactoryBean类，这个类内部创建SqlSessionFactory的</span></span><br><span class="line"><span class="comment">        SqlSessionFactory  sqlSessionFactory = new ..</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;sqlSessionFactory&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--set注入，把数据库连接池付给了dataSource属性--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;myDataSource&quot;</span> /&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--mybatis主配置文件的位置</span></span><br><span class="line"><span class="comment">           configLocation属性是Resource类型，读取配置文件</span></span><br><span class="line"><span class="comment">           它的赋值，使用value，指定文件的路径，使用classpath:表示文件的位置</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;configLocation&quot;</span> <span class="attr">value</span>=<span class="string">&quot;classpath:mybatis.xml&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--创建dao对象，使用SqlSession的getMapper（StudentDao.class）</span></span><br><span class="line"><span class="comment">        MapperScannerConfigurer:在内部调用getMapper()生成每个dao接口的代理对象。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--指定SqlSessionFactory对象的id--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sqlSessionFactoryBeanName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;sqlSessionFactory&quot;</span> /&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--指定包名， 包名是dao接口所在的包名。</span></span><br><span class="line"><span class="comment">            MapperScannerConfigurer会扫描这个包中的所有接口，把每个接口都执行</span></span><br><span class="line"><span class="comment">            一次getMapper()方法，得到每个接口的dao对象。</span></span><br><span class="line"><span class="comment">            创建好的dao对象放入到spring的容器中的。 dao对象的默认名称是 接口名首字母小写</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;basePackage&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.bjpowernode.dao&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--声明service--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;studentService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.bjpowernode.service.impl.StudentServiceImpl&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;studentDao&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;studentDao&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="对应的属性文件"><a href="#对应的属性文件" class="headerlink" title="对应的属性文件"></a>对应的属性文件</h2><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">jdbc.url</span>=<span class="string">jdbc:mysql://localhost:3306/lwl</span></span><br><span class="line"><span class="meta">jdbc.username</span>=<span class="string">root</span></span><br><span class="line"><span class="meta">jdbc.passwd</span>=<span class="string">233</span></span><br><span class="line"><span class="meta">jdbc.max</span>=<span class="string">30</span></span><br></pre></td></tr></table></figure><h2 id="创建前端页面"><a href="#创建前端页面" class="headerlink" title="创建前端页面"></a>创建前端页面</h2><p>为了方便直接就jsp页面了</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; %&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>注册学生<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;register&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>id<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;id&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>姓名：<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>email:<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;email&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>年龄：<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;注册学生&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="创建servlet"><a href="#创建servlet" class="headerlink" title="创建servlet"></a>创建servlet</h2><p>这里还没到springmvc 所以先用servlet 小技巧 <img src="https://gcore.jsdelivr.net/gh/code-anan/image/20211230192756.png"></p><p>这样新建可以直接在web.xml中 直接生成一个servlet并且还会自动继承<code>HttpServlet</code>,编写业务代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">request.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">response.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">Student student = <span class="keyword">new</span> Student();</span><br><span class="line">student.setId(Integer.valueOf(request.getParameter(<span class="string">&quot;id&quot;</span>)));</span><br><span class="line">student.setName(request.getParameter(<span class="string">&quot;name&quot;</span>));</span><br><span class="line">student.setAge(Integer.valueOf(request.getParameter(<span class="string">&quot;age&quot;</span>)));</span><br><span class="line">student.setEmail(request.getParameter(<span class="string">&quot;email&quot;</span>));</span><br><span class="line">String config=<span class="string">&quot;applicationContext.xml&quot;</span>;</span><br><span class="line">ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(config);</span><br><span class="line">StudentService studentService = (StudentService) context.getBean(<span class="string">&quot;studentService&quot;</span>);</span><br><span class="line">studentService.addStudent(student);</span><br><span class="line">request.getRequestDispatcher(<span class="string">&quot;/result.jsp&quot;</span>).forward(request,response);</span><br></pre></td></tr></table></figure><p>这里我们创建spring容器对象创建出了service对象，然后执行添加学生的操作执行之后页面跳转到result.jsp中</p><h2 id="设置web-xml"><a href="#设置web-xml" class="headerlink" title="设置web.xml"></a>设置web.xml</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">&quot;4.0&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>RegisterServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.bjpowernode.servlet.RegisterServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>RegisterServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/register<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在这里声明刚刚创建的servlet</p><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p><img src="https://gcore.jsdelivr.net/gh/code-anan/image/20211230194608.png"></p><p><img src="https://gcore.jsdelivr.net/gh/code-anan/image/20211231190218.png"><img src="https://gcore.jsdelivr.net/gh/code-anan/image/20211231190253.png"></p><h2 id="配置监听器"><a href="#配置监听器" class="headerlink" title="配置监听器"></a>配置监听器</h2><p>web项目中容器对象只需要创建一次，把容器对象放到全局作用域ServletContext中，这里就要用到监听器</p><p>监听器作用：创建容器对象，把对象放入到ServletContext中</p><p>监听器可以自己创建，也可以使用框架中提供好的ContextLoaderListener</p><h3 id="添加依赖-2"><a href="#添加依赖-2" class="headerlink" title="添加依赖"></a>添加依赖</h3><p>上面我们已经添加过了</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--为了使用监听器对象，加入依赖--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="注册监听器"><a href="#注册监听器" class="headerlink" title="注册监听器"></a>注册监听器</h3><p>在我们的web.xml文件中添加</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--注册监听器ContextLoaderListener--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br></pre></td></tr></table></figure><p>监听器被创建对象后，默认会读取/WEB-INF/applicationContext.xml文件，因为我们spring的配置文件是放在resources目录下所以我们要修改默认的文件位置，使用context-param重新指定文件的位置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:applicationContext.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="servlet代码修改"><a href="#servlet代码修改" class="headerlink" title="servlet代码修改"></a>servlet代码修改</h3><p>使用上述方式，我们就不用每次都创建容器对象了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">request.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">response.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">Student student = <span class="keyword">new</span> Student();</span><br><span class="line">student.setId(Integer.valueOf(request.getParameter(<span class="string">&quot;id&quot;</span>)));</span><br><span class="line">student.setName(request.getParameter(<span class="string">&quot;name&quot;</span>));</span><br><span class="line">student.setAge(Integer.valueOf(request.getParameter(<span class="string">&quot;age&quot;</span>)));</span><br><span class="line">student.setEmail(request.getParameter(<span class="string">&quot;email&quot;</span>));</span><br><span class="line">String key= WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE;</span><br><span class="line">WebApplicationContext webApplicationContext= (WebApplicationContext) getServletContext().getAttribute(key);</span><br><span class="line">StudentService studentService = (StudentService) webApplicationContext.getBean(<span class="string">&quot;studentService&quot;</span>);</span><br><span class="line">studentService.addStudent(student);</span><br><span class="line">request.getRequestDispatcher(<span class="string">&quot;/result.jsp&quot;</span>).forward(request,response);</span><br></pre></td></tr></table></figure><p>配置监听器的目的是创建容器对象，创建了容器对象，就能把spring配置文件中的所有对象都创建好，用户发起请求就可以直接使用对象了</p>]]></content>
      
      
      <categories>
          
          <category> spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mybatis知识点回顾</title>
      <link href="post/mybatis/"/>
      <url>post/mybatis/</url>
      
        <content type="html"><![CDATA[<h1 id="JDBC的缺陷"><a href="#JDBC的缺陷" class="headerlink" title="JDBC的缺陷"></a>JDBC的缺陷</h1><ol><li>代码比较多，开发效率低下</li><li>需要关注Connection、Statement、ResultSet对象的创建和销毁</li><li>ResultSet查询出来的结果需要自己封装为List集合</li><li>重复的代码多</li><li>业务代码和数据库操作代码混在一起 显得凌乱</li></ol><h1 id="mybatis的使用步骤"><a href="#mybatis的使用步骤" class="headerlink" title="mybatis的使用步骤"></a>mybatis的使用步骤</h1><h2 id="依赖的导入"><a href="#依赖的导入" class="headerlink" title="依赖的导入"></a>依赖的导入</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如果不使用maven构建项目，需要另外下载对应的jar包<a href="https://github.com/mybatis/mybatis-3/releases">下载地址</a>另外与数据库连接还需要数据库连接依赖，这里mysql为例：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.49<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h2><h3 id="创建一个maven项目"><a href="#创建一个maven项目" class="headerlink" title="创建一个maven项目"></a>创建一个maven项目</h3><p><img src="https://gcore.jsdelivr.net/gh/code-anan/image/20211223150019.png"></p><p>PS：用这个模板需要手动添加resources资源目录(￣▽￣)~*</p><h3 id="创建好用来演示的表"><a href="#创建好用来演示的表" class="headerlink" title="创建好用来演示的表"></a>创建好用来演示的表</h3><p>这里就叫Student吧 </p><p><img src="https://gcore.jsdelivr.net/gh/code-anan/image/20211223150138.png"></p><h3 id="创建必要文件"><a href="#创建必要文件" class="headerlink" title="创建必要文件"></a>创建必要文件</h3><p>创建好需要的实体类(model下的Student)、接口（mapper下的StudentDao）、映射文件(mapper下的StudentDao.xml,也可以放到resources目录下)以及mybatis主配置文件<code>mybatis.xml</code>当然名字都随意<img src="https://gcore.jsdelivr.net/gh/code-anan/image/20211223150257.png"></p><p>需要注意的一点：由于编译时候maven不能默认编译src下的xml文件 所以需要在pom.xml中build下添加如下才能编译xml文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span><span class="comment">&lt;!--所在的目录--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">includes</span>&gt;</span><span class="comment">&lt;!--包含目录下的.xml文件都会被扫描到--&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>false<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="创建实体类"><a href="#创建实体类" class="headerlink" title="创建实体类"></a>创建实体类</h3><p>实体类属性和数据库保持一致即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> id;</span><br></pre></td></tr></table></figure><h3 id="添加方法"><a href="#添加方法" class="headerlink" title="添加方法"></a>添加方法</h3><p>接口中添加一个查找所有学生的方法</p><p><img src="https://gcore.jsdelivr.net/gh/code-anan/image/20211223152454.png"></p><h3 id="创建映射文件"><a href="#创建映射文件" class="headerlink" title="创建映射文件"></a>创建映射文件</h3><p>由接口文档得到映射文件<code>StudentDao.xml</code>的内容应如下,默认格式可以到<a href="https://mybatis.org/mybatis-3/zh/getting-started.html">官网</a>拷贝</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.weilong.mapper.StudentDao&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectAllStudents&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.weilong.model.Student&quot;</span>&gt;</span></span><br><span class="line">       select id,name,age from student</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><p>其中mapper标签是当前文件的跟标签，必须存在，而<code>namespace</code>为dao接口的<code>全限定名称</code>，其实就是用它和接口对应起来，然后<code>mapper</code>标签内可以有<code>&lt;select&gt;</code>、<code>&lt;update&gt;</code>、<code>&lt;insert&gt;</code>、<code>&lt;delete&gt;</code>四种标签表示执行增删改查的操作<br>这里以select为例,id表示这个select语句的唯一标识，与接口中的方法名保持一致，resultType表示返回结果的每一项的类型</p><h3 id="创建mybatis主配置文件"><a href="#创建mybatis主配置文件" class="headerlink" title="创建mybatis主配置文件"></a>创建mybatis主配置文件</h3><p>mybatis配置文件内容配置，也可以到<a href="https://mybatis.org/mybatis-3/zh/getting-started.html">官网</a>拷贝</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- &lt;settings&gt;</span></span><br><span class="line"><span class="comment">        &lt;setting name=&quot;logImpl&quot; value=&quot;STDOUT_LOGGING&quot;/&gt;</span></span><br><span class="line"><span class="comment">    &lt;/settings&gt;--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span> <span class="attr">interceptor</span>=<span class="string">&quot;com.github.pagehelper.PageInterceptor&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/lwl&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;233&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;com/weilong/mapper/StudentDao.xml&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>environments</code>中的default值为要使用哪一个数据库环境、<code>environment</code>表示具体的数据库环境，<code>transactionManager</code>的type值为mybatis的事务类型,<code>dataSource</code>的type表示数据源类型，pooled表示连接池，四个property分别表示驱动类名、数据库url、数据库账号和密码、mappers中的mapper标签则表示对应的映射文件的路径</p><h3 id="测试使用"><a href="#测试使用" class="headerlink" title="测试使用"></a>测试使用</h3><p>(这个不需要记住 后面引入Spring不需要这些繁琐代码)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        String config= <span class="string">&quot;mybatis.xml&quot;</span>;</span><br><span class="line">        <span class="comment">//读取mybatis配置文件</span></span><br><span class="line">        InputStream stream = Resources.getResourceAsStream(config);</span><br><span class="line">        <span class="comment">//通过SqlSessionFactoryBuilder对象创建SqlSessionFactory对象</span></span><br><span class="line">        SqlSessionFactoryBuilder builder = <span class="keyword">new</span> SqlSessionFactoryBuilder();</span><br><span class="line">        SqlSessionFactory factory = builder.build(stream);</span><br><span class="line">        <span class="comment">//通过SqlSessionFactory得到SqlSession对象</span></span><br><span class="line">        SqlSession sqlSession = factory.openSession();</span><br><span class="line">        <span class="comment">//找到dao接口定义的方法执行sql</span></span><br><span class="line">        String sqlId=<span class="string">&quot;com.weilong.mapper.StudentDao&quot;</span>+<span class="string">&quot;.&quot;</span>+<span class="string">&quot;selectAllStudents&quot;</span>;</span><br><span class="line">        <span class="comment">//返回执行的结果</span></span><br><span class="line">        List&lt;Student&gt; list = sqlSession.selectList(sqlId);</span><br><span class="line">        <span class="comment">//循环输出</span></span><br><span class="line">        <span class="keyword">for</span> (Student s:list)&#123;</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//关闭qlSession对象</span></span><br><span class="line">        sqlSession.close();</span><br><span class="line">        <span class="comment">//如果有更新操作的话 需要提交事务 mybatis默认不提交事务</span></span><br><span class="line">        sqlSession.commit();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>得到输出结果（注意Student类的toString方法需要重写）<img src="https://gcore.jsdelivr.net/gh/code-anan/image/20211223154957.png"></p><h1 id="深入理解"><a href="#深入理解" class="headerlink" title="深入理解"></a>深入理解</h1><h2 id="parameterType"><a href="#parameterType" class="headerlink" title="parameterType"></a>parameterType</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectStudentByid&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.weilong.model.Student&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;java.lang.Integer&quot;</span>&gt;</span></span><br><span class="line">      select id,name,age from student where id=#&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>parameterType表示接口中传递过来的参数类型，它的值必须为java类型的全限定名称或者别名，mybatis把java基本数据类型和String类型都叫做简单类型，在映射文件中接收简单类型的方式为#{任意字符}即可,但是由于mybatis的反射机制可以知道入参的类型，所以此属性一般可以不写</p><h2 id="多参数传递"><a href="#多参数传递" class="headerlink" title="多参数传递"></a>多参数传递</h2><p>dao接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Student&gt;selectMutiStudents(<span class="meta">@Param(&quot;name&quot;)</span>String name,<span class="meta">@Param(&quot;age&quot;)</span>Integer age);</span><br></pre></td></tr></table></figure><p>映射文件:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectMutiStudents&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.weilong.model.Student&quot;</span>&gt;</span></span><br><span class="line">       select id,name,age from student where name =#&#123;name&#125; and age=#&#123;age&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>多个简单类型参数可以使用@Param 同样使用#{}的方式赋值</p><h2 id="使用对象传参"><a href="#使用对象传参" class="headerlink" title="使用对象传参"></a>使用对象传参</h2><p>dao接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">List&lt;Student&gt; <span class="title">selectStudents</span><span class="params">(Student student)</span></span>;</span><br></pre></td></tr></table></figure><p>映射文件:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectMutiStudents&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.weilong.model.Student&quot;</span>&gt;</span></span><br><span class="line">       select id,name,age from student where name =#&#123;name&#125; and age=#&#123;age&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>对象传参同样用#{属性}的方式赋值</p><h2 id="按位置传参"><a href="#按位置传参" class="headerlink" title="按位置传参"></a>按位置传参</h2><p>接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">List&lt;Student&gt; <span class="title">selectStudents</span><span class="params">(String name,Integer id)</span></span>;</span><br></pre></td></tr></table></figure><p>映射文件：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectStudents&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.weilong.model.Student&quot;</span>&gt;</span></span><br><span class="line">    select id,name,age from student where name =#&#123;arg0&#125; and id= #&#123;arg1&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>mybatis 3.4之前 使用#{0},#{1} 之后都用#{arg0},#{arg1}</p><h2 id="map传参"><a href="#map传参" class="headerlink" title="map传参"></a>map传参</h2><p>接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">List&lt;Student&gt; <span class="title">selectStudents</span><span class="params">(Map&lt;Object,Object&gt; map)</span></span>;</span><br></pre></td></tr></table></figure><p>映射文件：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectStudents&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.weilong.model.Student&quot;</span>&gt;</span></span><br><span class="line">    select id,name,age from student where name=#&#123;myname&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>使用map传入多个值、语法为#{map的key}，赋值为对应的value值</p><h2 id="和-的区分"><a href="#和-的区分" class="headerlink" title="#和$的区分"></a>#和$的区分</h2><p>#是占位符，底层使用的是PrePraeStatement执行sql，这样做更安全防止sql注入</p><p>$是字符串替换，底层使用的是Statement进行数据的替换，可能会发生sql注入</p><h2 id="自定义类型别名"><a href="#自定义类型别名" class="headerlink" title="自定义类型别名"></a>自定义类型别名</h2><p>我们知道resultType是指明返回的数据类型，但是也可以使用别名的方式，例如resultType=”java.lang.Integer”,可以直接写成resultType=”int” 除此之外还可以自定义类型别名</p><p>第一种方式是mybatis配置文件中引入</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">type</span>=<span class="string">&quot;com.weilong.model.Student&quot;</span> <span class="attr">alias</span>=<span class="string">&quot;stu&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">typeAlias</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这样映射文件的resultType可以直接写resultType=”stu”了</p><p>第二种方式是</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.weilong.model&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这种方式类名即是别名</p><h2 id="resultMap"><a href="#resultMap" class="headerlink" title="resultMap"></a>resultMap</h2><p>使用方法如下</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;resultMapId&quot;</span> <span class="attr">type</span>=<span class="string">&quot;com.weilong.model.Student&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;name&quot;</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;age&quot;</span> <span class="attr">property</span>=<span class="string">&quot;age&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectStudents&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;resultMapId&quot;</span>&gt;</span></span><br><span class="line">        select id,name,age from student</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>select中的resultMap的值为<resultMap>中的id值，然后主键使用id标签、非主键使用result标签，column表示的是<code>数据库</code>中的列名、propertity表示的是type对应实体类的java类型中的<code>属性名</code>，使用这种方式的好处是如果数据库列名和java类属性名不一致可以一一对应起来，但是也可以通过改名的方式用resultType也一样可以；</p><h2 id="模糊查询"><a href="#模糊查询" class="headerlink" title="模糊查询"></a>模糊查询</h2><p>除了基本使用like的方式 ，mybatis还支持使用下面这种方式</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectStudents&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;resultMapId&quot;</span>&gt;</span>    </span><br><span class="line">  select id,name,age from student like &quot;%&quot; #&#123;name&#125; &quot;%&quot;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>不过”%”要和#{name}中间用空格分开</p><h1 id="动态sql"><a href="#动态sql" class="headerlink" title="动态sql"></a>动态sql</h1><p>正如其名，sql内容需要动态变化，需要用到动态sql的语法，比如对象中的某个字段可能为空，如果不处理可能就会报错</p><h2 id="if标签"><a href="#if标签" class="headerlink" title="if标签"></a>if标签</h2><p>语法是<code>&lt;if test=&quot;判断java对象的属性值&quot;&gt; 部分sql语句&lt;/if&gt;</code> 例子：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectStudents&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;resultMapId&quot;</span>&gt;</span></span><br><span class="line">        select id,name,age from student where</span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;name!=null&quot;</span>&gt;</span></span><br><span class="line">            name =#&#123;name&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这种方式的缺陷就是如果不满足test内的条件可能会使sql不完整，所以可以在where后面添加个恒等式比如1=1</p><h2 id="where标签"><a href="#where标签" class="headerlink" title="where标签"></a>where标签</h2><p>相比于单纯的if标签、where标签的使用率更广，他可以包含多个if标签，当有if标签符合条件，他就可以动态的添加where关键字并且可以去掉if中多余的and or关键字容错率高</p><p>例子:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectStudents&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;resultMapId&quot;</span>&gt;</span></span><br><span class="line">        select id,name,age from student</span><br><span class="line">        <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;name!=null&quot;</span>&gt;</span></span><br><span class="line">                name =#&#123;name&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;age&gt;18&quot;</span>&gt;</span></span><br><span class="line">               or age&gt;#&#123;age&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="foreach标签"><a href="#foreach标签" class="headerlink" title="foreach标签"></a>foreach标签</h2><p>用来循环数组和list集合的，主要用在sql的in语句中</p><p>例子：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectEach&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.weilong.model.Student&quot;</span>&gt;</span></span><br><span class="line">        select * from student where id in </span><br><span class="line">        <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;list&quot;</span> <span class="attr">item</span>=<span class="string">&quot;myid&quot;</span> <span class="attr">open</span>=<span class="string">&quot;(&quot;</span> <span class="attr">close</span>=<span class="string">&quot;)&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;,&quot;</span>&gt;</span></span><br><span class="line">            #&#123;myid&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>collection:表示接口入参类型 可以是数组array或者list集合</p><p>item：自定义数组或者集合每一项的变量名</p><p>open：循环开始的字符</p><p>close：循环结束的字符</p><p>separator:集合或数据成员之间的分隔符</p><p>如果上面的item是一个java对象 而我们循环用的是他的一个属性比如id</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;list&quot;</span> <span class="attr">item</span>=<span class="string">&quot;stu&quot;</span> <span class="attr">open</span>=<span class="string">&quot;(&quot;</span> <span class="attr">close</span>=<span class="string">&quot;)&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;,&quot;</span>&gt;</span>   </span><br><span class="line">      #&#123;stu.id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br></pre></td></tr></table></figure><p>使用对象.的方式即可</p><h2 id="sql代码片段"><a href="#sql代码片段" class="headerlink" title="sql代码片段"></a>sql代码片段</h2><p>就是复用一些sql语句 比如查学生的<code>select id,name,age from student</code>这一部分重复使用,<sql>和<include>配合使用，例如</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">&quot;selectrepeat&quot;</span>&gt;</span></span><br><span class="line">        select id,name,age from student</span><br><span class="line"><span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectstuByid&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.weilong.model.Student&quot;</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">&quot;selectrepeat&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">       where id=#&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>不过这种方式没必要 而且占空可读性差  了解即可</p><h1 id="主配置文件"><a href="#主配置文件" class="headerlink" title="主配置文件"></a>主配置文件</h1><h2 id="transactionManager"><a href="#transactionManager" class="headerlink" title="transactionManager"></a>transactionManager</h2><p>在mybatis.xml中的type表示事务的处理类型；我们用到使其type=’JDBC’，这表示mybatis底层调用JDBC的Connection、commit、rollback,type=’MANAGED’表示mybatis把事务处理委托给其他的容器例如Spring</p><h2 id="properties"><a href="#properties" class="headerlink" title="properties"></a>properties</h2><p>我们配置数据库信息的时候是之间写在mybatis.xml文件中，这样耦合度比较高，所以使用properties标签把数据库信息写在单独的文件<code>jdbc.properties</code>中</p><p>mybatis.xml中引入jdbc.properties：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">&quot;jdbc.properties&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后jdbc.properties文件放入数据库信息</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">jdbc.driver</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="meta">jdbc.url</span>=<span class="string">jdbc:mysql://localhost:3306/lwl</span></span><br><span class="line"><span class="meta">jdbc.username</span>=<span class="string">root</span></span><br><span class="line"><span class="meta">jdbc.password</span>=<span class="string">233</span></span><br></pre></td></tr></table></figure><p>使用${}的方式替换之前的写法</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.driver&#125;&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.url&#125;&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.username&#125;&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.password&#125;&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这样修改数据库信息 只需要修改jdbc.properties文件即可</p><h2 id="mappers"><a href="#mappers" class="headerlink" title="mappers"></a>mappers</h2><p>指定映射文件的位置，一种方式是一个个引入</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;com/weilong/mapper/StudentDao.xml&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;com/weilong/mapper/ClassDao.xml&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure><p>或者是直接引入包，把包下的所有映射文件一次性引入，不过</p><p>使用package有两个要求</p><ol><li><p>mapper文件名称需要和接口名称完全一致，区分大小写</p></li><li><p>mapper文件和dao接口需要在同一目录下</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.weilong.mapper&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h1 id="pageHelper分页插件"><a href="#pageHelper分页插件" class="headerlink" title="pageHelper分页插件"></a>pageHelper分页插件</h1><p>这是一款mybatis的通用分页插件，支持多种数据库，使用也很简单可以直接获取每一页的固定数量的数据个数 使用步骤如下</p><h2 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span> </span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.pagehelper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>pagehelper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span> </span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="mybatis配置文件中添加"><a href="#mybatis配置文件中添加" class="headerlink" title="mybatis配置文件中添加"></a>mybatis配置文件中添加</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugins</span>&gt;</span>    </span><br><span class="line">  <span class="tag">&lt;<span class="name">plugin</span> <span class="attr">interceptor</span>=<span class="string">&quot;com.github.pagehelper.PageInterceptor&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="加入方法"><a href="#加入方法" class="headerlink" title="加入方法"></a>加入方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PageHelper.startPage(pagenum,pagesize);</span><br></pre></td></tr></table></figure><p><img src="https://gcore.jsdelivr.net/gh/code-anan/image/20211224105820.png"></p><p>pagenum:第几页的数据 从1开始</p><p>pagesize：一页中有多少条数据</p><p>这里我取得是第二页六条数据 总共十条数据，所以第二页只有四条数据 所以还是很好用的(<em>^▽^</em>) </p>]]></content>
      
      
      <categories>
          
          <category> mybatis </category>
          
          <category> 记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mybatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot如何使用PageHelper</title>
      <link href="post/PagehelperUse/"/>
      <url>post/PagehelperUse/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>PageHelper是一款非常好用的分页插件，之前介绍了mybatis中它的使用，现在来看一下如何在SpringBoot中使用吧</p><h1 id="使用步骤"><a href="#使用步骤" class="headerlink" title="使用步骤"></a>使用步骤</h1><h2 id="依赖导入"><a href="#依赖导入" class="headerlink" title="依赖导入"></a>依赖导入</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.pagehelper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>pagehelper-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>与mybatis中的不同，需要引入这个<code>pagehelper-spring-boot-starter</code>依赖</p><h2 id="配置文件添加"><a href="#配置文件添加" class="headerlink" title="配置文件添加"></a>配置文件添加</h2><p>与mybatis不同的是，SpringBoot中需要添加在<code>application.properties</code>中 </p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">pagehelper.helperDialect</span>=<span class="string">mysql</span></span><br><span class="line"><span class="meta">pagehelper.reasonable</span>=<span class="string">true</span></span><br><span class="line"><span class="meta">pagehelper.supportMethodsArguments</span>=<span class="string">true</span></span><br><span class="line"><span class="meta">pagehelper.params</span>=<span class="string">count=countSql</span></span><br></pre></td></tr></table></figure><p>说明：</p><p><code>pagehelper.helperDialect</code>:指定数据库，可以不配置，pagehelper插件会自动检测数据库的类型</p><p><code>pagehelper.reasonable</code>:分页合理化参数默认false，当该参数设置为true 时，pageNum &lt;= 0 时，默认显示第一页，pageNum 超过 pageSize 时，显示最后一页</p><p><code>pagehelper.supportMethodsArguments</code>:用于从对象中根据属性名取值，可以配置pageNum，pageSize，count 不用配置映射的默认值</p><p><code>pagehelper.params</code>:分页插件会根据查询方法的参数中，自动根据params 配置的字段中取值，找到合适的值会自动分页</p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> List&lt;NotificationDto&gt; <span class="title">getNotificationList</span><span class="params">(User user, Integer page, Integer size)</span> </span>&#123;</span><br><span class="line">        PageHelper.startPage(page,size);</span><br><span class="line">        NotificationExample example = <span class="keyword">new</span> NotificationExample();</span><br><span class="line">        example.createCriteria().andReceiverEqualTo(user.getId());</span><br><span class="line">        example.setOrderByClause(<span class="string">&quot;GMTCREATE desc&quot;</span>);</span><br><span class="line">        example.setOrderByClause(<span class="string">&quot;STATUS&quot;</span>);</span><br><span class="line">        List&lt;Notification&gt; notifications = notificationMapper.selectByExample(example);</span><br><span class="line">        ArrayList&lt;NotificationDto&gt; resultDto = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(Notification notification:notifications)&#123;</span><br><span class="line">            NotificationDto notificationDto = <span class="keyword">new</span> NotificationDto();</span><br><span class="line">            User notifier = userMapper.selectByPrimaryKey(notification.getNotifier());</span><br><span class="line">            <span class="comment">//发起人</span></span><br><span class="line">            notificationDto.setNotifier(notifier);</span><br><span class="line">            <span class="comment">//回复了问题还是回复了评论</span></span><br><span class="line">            notificationDto.setType(NotificationEnum.getNameByTypeId(notification.getType()));</span><br><span class="line">            <span class="comment">//问题的标题（用来点击跳转到哪个问题上）</span></span><br><span class="line">            <span class="keyword">if</span>(notification.getType()==NotificationEnum.NOTIFICATION_QUESTION.getType())&#123;</span><br><span class="line">                Question question = questionMapper.selectByPrimaryKey(notification.getOuterid());</span><br><span class="line">                notificationDto.setOuterTitle(question.getTitle());</span><br><span class="line">                notificationDto.setOuterId(question.getId());</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                Comment comment = commentMapper.selectByPrimaryKey(notification.getOuterid());</span><br><span class="line">                notificationDto.setOuterTitle(comment.getContent());</span><br><span class="line">                <span class="keyword">if</span>(comment.getType()==<span class="number">1</span>)&#123;</span><br><span class="line">                    notificationDto.setOuterId(comment.getParentid());</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    Comment comment1 = commentMapper.selectByPrimaryKey(comment.getParentid());</span><br><span class="line">                    Question question = questionMapper.selectByPrimaryKey(comment1.getParentid());</span><br><span class="line">                    notificationDto.setOuterId(question.getId());</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//每个Dto的创建时间</span></span><br><span class="line">            notificationDto.setGmtCreate(notification.getGmtcreate());</span><br><span class="line">            <span class="comment">//Dto的状态 未读和已读</span></span><br><span class="line">            notificationDto.setStatus(notification.getStatus());</span><br><span class="line">            <span class="comment">///notification的ID方便改对应的阅读状态</span></span><br><span class="line">            notificationDto.setNotificationId(notification.getId());</span><br><span class="line"></span><br><span class="line">            resultDto.add(notificationDto);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> resultDto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用非常简单，只有一条关键语句<code>PageHelper.startPage(page,size);</code></p><p>page：表示要查询的页数（最小为1）</p><p>size：每一页的数量</p><h2 id="效果展示"><a href="#效果展示" class="headerlink" title="效果展示"></a>效果展示</h2><p><img src="https://gcore.jsdelivr.net/gh/code-anan/image/20211226192056.png"></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>pagehelper的使用非常简单方便、但是要实现分页不是仅仅用这个就能实现的了，想知道完整实现分页可以看我的<a href="https://github.com/code-anan/community">github项目</a>(✪ω✪)</p>]]></content>
      
      
      <categories>
          
          <category> PageHelper </category>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PageHelper </tag>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo博客中接入docsify文档管理系统</title>
      <link href="post/docsify/"/>
      <url>post/docsify/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>从鱼皮那里看到了一个很好看的文档管理系统，后来知道叫做<a href="https://docsify.js.org/#/">docsify</a>看起来非常不错，这里记录一下接入hexo的过程 </p><h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><h2 id="安装docsify-前提是安装了Node-js"><a href="#安装docsify-前提是安装了Node-js" class="headerlink" title="安装docsify(前提是安装了Node.js)"></a>安装docsify(前提是安装了<a href="https://nodejs.org/zh-cn/download/">Node.js</a>)</h2><blockquote><p>npm i docsify-cli -g</p></blockquote><h2 id="新建仓库"><a href="#新建仓库" class="headerlink" title="新建仓库"></a>新建仓库</h2><p>在github上新建一个仓库命名格式为<code>doc.域名</code></p><blockquote><p>例如我的域名为 weilong98.com 所以我的仓库名称为doc.weilong98.com</p></blockquote><p><img src="https://gcore.jsdelivr.net/gh/code-anan/image/20211211195623.png"></p><h2 id="添加文件"><a href="#添加文件" class="headerlink" title="添加文件"></a>添加文件</h2><p>给新建的仓库添加一个文件 内容为从刚才的仓库名<img src="https://gcore.jsdelivr.net/gh/code-anan/image/20211211200200.png"></p><h2 id="初始化文档-cmd窗口中"><a href="#初始化文档-cmd窗口中" class="headerlink" title="初始化文档(cmd窗口中)"></a>初始化文档(cmd窗口中)</h2><blockquote><p>docsify init docs</p><p>Initialization succeeded! Please run docsify serve docs</p></blockquote><p>出现succeeded即为初始化成功，初始化成功后会生成三个文件</p><p><img src="https://gcore.jsdelivr.net/gh/code-anan/image/20211211201310.png"></p><p>本地预览</p><blockquote><p>docsify serve docs</p></blockquote><p>与hexo类似 本地启动之后访问<code>http://localhost:3000</code><img src="https://gcore.jsdelivr.net/gh/code-anan/image/20211211201503.png"></p><p>启动成功 但是现在还没有内容</p><h1 id="搭建博客"><a href="#搭建博客" class="headerlink" title="搭建博客"></a>搭建博客</h1><ul><li>设置封面</li></ul><p>打开刚才新生成文件的<code>index.html</code>，这里我们使用<code>sublime Text</code>打开 或者别的都可以<img src="https://gcore.jsdelivr.net/gh/code-anan/image/20211211201846.png">在图中所示位置添加<code>coverpage: true</code></p><p>新建一个<code>_coverpage.md</code>文件在<code>docs</code>文件夹下</p><p><img src="https://gcore.jsdelivr.net/gh/code-anan/image/20211211202309.png"></p><p>然后在这里写我们封面的内容，下面为示例</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">width</span>=<span class="string">&quot;180px&quot;</span> <span class="attr">style</span>=<span class="string">&quot;border-radius: 50%&quot;</span> <span class="attr">bor</span> <span class="attr">src</span>=<span class="string">&quot;https://nodejsred.oss-cn-shanghai.aliyuncs.com/nodejs_roadmap-logo.jpeg?x-oss-process=style/may&quot;</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="section"># 我的记录文档</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> 这是我的学习记录文档</span><br><span class="line"></span><br><span class="line">[<span class="string">![stars</span>](<span class="link">https://badgen.net/github/stars/Q-Angelo/Nodejs-Roadmap?icon=github&amp;color=4ab8a1</span>)](<span class="link">https://github.com/Q-Angelo/Nodejs-Roadmap</span>) [<span class="string">![forks</span>](<span class="link">https://badgen.net/github/forks/Q-Angelo/Nodejs-Roadmap?icon=github&amp;color=4ab8a1</span>)](<span class="link">https://github.com/Q-Angelo/Nodejs-Roadmap</span>)</span><br><span class="line"></span><br><span class="line">[<span class="string">主站</span>](<span class="link">http://www.weilong98.com</span>)</span><br><span class="line">[<span class="string">开始阅读</span>](<span class="link">README.md</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>效果<img src="https://gcore.jsdelivr.net/gh/code-anan/image/20211212152705.png"></p><ul><li>定制导航栏</li></ul><p>官方有两种支持导航的方式，一种是在html里面设置但是以#/开头，但是我们还是更喜欢Markdown的方式,首先配置<code>loadNavbar: true</code>,同样也要创建<code>_navbar.md</code>文件与上面类似</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">*</span> 首页</span><br><span class="line"><span class="bullet">    *</span> [<span class="string">首页</span>](<span class="link">/README.md</span>)</span><br><span class="line"></span><br><span class="line"><span class="bullet">*</span> 新的内容</span><br><span class="line"><span class="bullet">    *</span> [<span class="string">新内容</span>](<span class="link">/nav/newpage.md</span>)</span><br></pre></td></tr></table></figure><br/><p>其他更多设置可以查看官网<a href="https://docsify.js.org/#/zh-cn/">docsify</a></p><h1 id="把文档接入Github-pages"><a href="#把文档接入Github-pages" class="headerlink" title="把文档接入Github pages"></a>把文档接入Github pages</h1><h2 id="拷贝项目"><a href="#拷贝项目" class="headerlink" title="拷贝项目"></a>拷贝项目</h2><p>首先  拷贝我们新建的仓库到本地</p><blockquote><p>git clone <a href="https://github.com/code-anan/doc.weilong98.com.git">https://github.com/code-anan/doc.weilong98.com.git</a><br>git clone后面为我们创建的仓库地址</p></blockquote><h2 id="拷贝文件"><a href="#拷贝文件" class="headerlink" title="拷贝文件"></a>拷贝文件</h2><p>然后把<code>docs</code>也就是刚才初始化的docsify项目中的所有文件copy到本地仓库<code>doc.weilong98.com</code>中</p><p><img src="https://gcore.jsdelivr.net/gh/code-anan/image/20211212154220.png"></p><p>并把刚才的<code>docs</code>文件夹删除</p><h2 id="上传仓库"><a href="#上传仓库" class="headerlink" title="上传仓库"></a>上传仓库</h2><p>把项目上传到仓库（输入一些常用的命令即可）</p><p>   <img src="https://gcore.jsdelivr.net/gh/code-anan/image/20211212155022.png"></p><h2 id="解析配置"><a href="#解析配置" class="headerlink" title="解析配置"></a>解析配置</h2><p>然后还需要来到我们的域名控制台-解析设置中添加以下记录（记录值为我们hexo的域名）</p><p>   <img src="https://gcore.jsdelivr.net/gh/code-anan/image/20211212161259.png"></p><h2 id="分支保存"><a href="#分支保存" class="headerlink" title="分支保存"></a>分支保存</h2><p>来到仓库-settigns-pages选择我们的分支默认为main分支保存即可<img src="https://gcore.jsdelivr.net/gh/code-anan/image/20211212160759.png">然后我们的Custom domain也自动输入上去了</p><h2 id="仓库名访问"><a href="#仓库名访问" class="headerlink" title="仓库名访问"></a>仓库名访问</h2><p>然后可以直接访问我们的docsif文档了</p><p>   <img src="https://gcore.jsdelivr.net/gh/code-anan/image/20211212161442.png"></p><h1 id="hexo博客中引入doscify"><a href="#hexo博客中引入doscify" class="headerlink" title="hexo博客中引入doscify"></a>hexo博客中引入doscify</h1><p> 通过上面的步骤我们只需要在hexo中添加个导航栏 加上docsify的地址即可 打开<code>_config.butterfly.yml</code>文档找到导航区域</p><p><img src="https://gcore.jsdelivr.net/gh/code-anan/image/20211212164050.png"></p><br/><p>这样就能完美接入docsify了  剩下的就是慢慢完善docsify的页面布局等ヽ(￣▽￣)ﾉ</p>]]></content>
      
      
      <categories>
          
          <category> 记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docsify </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记录一下JDBC使用及遇到的问题</title>
      <link href="post/jdbc/"/>
      <url>post/jdbc/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p><code>JDBC</code>其实已经很久没用到了，但是其原理还是有必要了解的，作为我们初期用java语言与数据库交互的工具，第一次见到它还是会觉得有些“神奇的”，但是今天闲来无事复习的时候发现了一个小问题，真是温故而知新。所以在这里记录一下以及如何使用它</p><h1 id="jar包的引入"><a href="#jar包的引入" class="headerlink" title="jar包的引入"></a>jar包的引入</h1><ul><li>首先是jar包的下载，使用它我们才能和数据库连接交互（跟我们做maven项目导入依赖原理一样的）<br>百度网盘链接：<code>https://pan.baidu.com/s/1GGuWeJDyyGUXSAZ_9jPuuA </code><br>提取码：<code>l9jb</code></li><li>下载之后就可以在java项目中引入刚才下载的jar包（<code>Project Structure</code>-&gt;<code>+</code>-&gt;<code>mysql-connector-java-5.1.46.jar</code>-&gt;<code>ok</code>）<br><img src="https://gcore.jsdelivr.net/gh/code-anan/image/20211207134155.png"></li></ul><h1 id="使用JDBC"><a href="#使用JDBC" class="headerlink" title="使用JDBC"></a>使用JDBC</h1><p>jar包引入成功之后我们就可以使用了，它的使用总共可分为六步</p><h2 id="注册驱动"><a href="#注册驱动" class="headerlink" title="注册驱动"></a>注册驱动</h2><p>使用不同的数据库有着不同的驱动，这里以我本地的mysql为例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DriverManager.registerDriver(<span class="keyword">new</span> com.mysql.jdbc.Driver());</span><br></pre></td></tr></table></figure><p>或者是使用ResourceBundle类读取属性文件 看起来更加优雅同时符合oop降低耦合的特性（下面的案例都按照这种方式写）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ResourceBundle bundle = ResourceBundle.getBundle(<span class="string">&quot;jdbc&quot;</span>);</span><br><span class="line">String driver = bundle.getString(<span class="string">&quot;driver&quot;</span>);</span><br><span class="line">Class.forName(driver);</span><br></pre></td></tr></table></figure><p>注意这里的<code>jdbc.properties</code>用这种方式引入的话需要放在src下，否则需要调整路径，这里我的<code>jdbc.properties</code>文件内容为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">driver=com.mysql.jdbc.Driver</span><br><span class="line">url=jdbc:mysql://localhost:3306/lwl?useUnicode=true&amp;characterEncoding=UTF8</span><br><span class="line">user=root</span><br><span class="line">password=233</span><br></pre></td></tr></table></figure><h2 id="获取连接"><a href="#获取连接" class="headerlink" title="获取连接"></a>获取连接</h2><p>即打开JVM和数据库进程间的通道，后面需要关闭</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">String url = bundle.getString(&quot;url&quot;);</span><br><span class="line">String user = bundle.getString(&quot;user&quot;);</span><br><span class="line">String password = bundle.getString(&quot;password&quot;);</span><br><span class="line">Connection connection=null;</span><br><span class="line">connection=DriverManager.getConnection(url,user,password);</span><br></pre></td></tr></table></figure><h2 id="获取数据库操作对象"><a href="#获取数据库操作对象" class="headerlink" title="获取数据库操作对象"></a>获取数据库操作对象</h2><p>这里操作对象有两种 第一种是Statement类 第二种是PreparedStatement<br>但是Statement类会有<code>sql</code>注入的危险一般情况不会用，这里用PreparedStatement演示</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">PreparedStatement statement=null;</span><br><span class="line">String sql=&quot;select ename,job,sal from emp where sal &gt;?&quot;;</span><br><span class="line">statement= connection.prepareStatement(sql);</span><br><span class="line">statement.setInt(1,1000);</span><br></pre></td></tr></table></figure><p>需要注意的是这里的给占位符？赋值时需要从1开始</p><h2 id="执行sql语句"><a href="#执行sql语句" class="headerlink" title="执行sql语句"></a>执行sql语句</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ResultSet resultSet = statement.executeQuery();</span><br></pre></td></tr></table></figure><p>这里是查询 如果是DML语句应该用executeUpdate()方法</p><h2 id="处理查询结果集"><a href="#处理查询结果集" class="headerlink" title="处理查询结果集"></a>处理查询结果集</h2><p>如果是DML语句则没有这一步(这里仅遍历输出一下)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">while (resultSet.next())&#123;</span><br><span class="line">    String ename = resultSet.getString(&quot;ename&quot;);</span><br><span class="line">    String job = resultSet.getString(&quot;job&quot;);</span><br><span class="line">    System.out.println(&quot;职工名称为:&quot;+ename+&quot;,&quot;+&quot;职位为:&quot;+job);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="释放资源"><a href="#释放资源" class="headerlink" title="释放资源"></a>释放资源</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">if(connection!=null)&#123;</span><br><span class="line">                try &#123;</span><br><span class="line">                    connection.close();</span><br><span class="line">                &#125; catch (SQLException throwables) &#123;</span><br><span class="line">                    throwables.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;else if(statement!=null)&#123;</span><br><span class="line">                try &#123;</span><br><span class="line">                    statement.close();</span><br><span class="line">                &#125; catch (SQLException throwables) &#123;</span><br><span class="line">                    throwables.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure><p>连在一起的代码就是</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">public class JDBCTest &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        ResourceBundle bundle = ResourceBundle.getBundle(&quot;jdbc&quot;);</span><br><span class="line">        String driver = bundle.getString(&quot;driver&quot;);</span><br><span class="line">        String url = bundle.getString(&quot;url&quot;);</span><br><span class="line">        String user = bundle.getString(&quot;user&quot;);</span><br><span class="line">        String password = bundle.getString(&quot;password&quot;);</span><br><span class="line">        Connection connection = null;</span><br><span class="line">        PreparedStatement statement = null;</span><br><span class="line"></span><br><span class="line">        try &#123;</span><br><span class="line">            //1.注册驱动</span><br><span class="line">            //DriverManager.registerDriver(new com.mysql.jdbc.Driver());</span><br><span class="line">            Class.forName(driver);</span><br><span class="line"></span><br><span class="line">            //2.获取连接</span><br><span class="line">            connection = DriverManager.getConnection(url, user, password);</span><br><span class="line"></span><br><span class="line">            //3.获取数据库操作对象</span><br><span class="line">            String sql = &quot;select ename,job,sal from emp where sal &gt;?&quot;;</span><br><span class="line">            statement = connection.prepareStatement(sql);</span><br><span class="line">            statement.setInt(1, 1000);</span><br><span class="line"></span><br><span class="line">            //4.执行sql</span><br><span class="line">            ResultSet resultSet = statement.executeQuery();</span><br><span class="line"></span><br><span class="line">            //5.处理查询结果集</span><br><span class="line">            while (resultSet.next()) &#123;</span><br><span class="line">                String ename = resultSet.getString(&quot;ename&quot;);</span><br><span class="line">                String job = resultSet.getString(&quot;job&quot;);</span><br><span class="line">                System.out.println(&quot;职工名称为:&quot; + ename + &quot;,&quot; + &quot;职位为:&quot; + job);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; catch (SQLException throwables) &#123;</span><br><span class="line">            throwables.getErrorCode();</span><br><span class="line">        &#125; catch (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; finally &#123;</span><br><span class="line">            //6.释放资源</span><br><span class="line">            if (connection != null) &#123;</span><br><span class="line">                try &#123;</span><br><span class="line">                    connection.close();</span><br><span class="line">                &#125; catch (SQLException throwables) &#123;</span><br><span class="line">                    throwables.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; else if (statement != null) &#123;</span><br><span class="line">                try &#123;</span><br><span class="line">                    statement.close();</span><br><span class="line">                &#125; catch (SQLException throwables) &#123;</span><br><span class="line">                    throwables.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以及<code>jdbc.properties</code>文件的内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">driver=com.mysql.jdbc.Driver</span><br><span class="line">url=jdbc:mysql://localhost:3306/lwl?useUnicode=true&amp;characterEncoding=UTF8</span><br><span class="line">user=root</span><br><span class="line">password=233</span><br></pre></td></tr></table></figure><p>上述查询的最终结果(表为安装mysql或者oracle自带的emp表)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">职工名称为:SMITH,工作为:CLERK</span><br><span class="line">职工名称为:ALLEN,工作为:SALESMAN</span><br><span class="line">职工名称为:WARD,工作为:SALESMAN</span><br><span class="line">职工名称为:JONES,工作为:MANAGER</span><br><span class="line">职工名称为:MARTIN,工作为:SALESMAN</span><br><span class="line">职工名称为:BLAKE,工作为:MANAGER</span><br><span class="line">职工名称为:CLARK,工作为:MANAGER</span><br><span class="line">职工名称为:SCOTT,工作为:ANALYST</span><br><span class="line">职工名称为:KING,工作为:PRESIDENT</span><br><span class="line">职工名称为:TURNER,工作为:SALESMAN</span><br><span class="line">职工名称为:ADAMS,工作为:CLERK</span><br><span class="line">职工名称为:JAMES,工作为:CLERK</span><br><span class="line">职工名称为:FORD,工作为:ANALYST</span><br><span class="line">职工名称为:MILLER,工作为:CLERK</span><br></pre></td></tr></table></figure><h1 id="今天遇到的问题"><a href="#今天遇到的问题" class="headerlink" title="今天遇到的问题"></a>今天遇到的问题</h1><p>问题其实也很简单，就是如果把上述的sql改成<code>String sql = &quot;select ?,?   from emp &quot;;</code>使用setString(1,”ename”) 和setString(2,”job”) 的时候会发现返回的结果集全部为列名<code>ename</code>和<code>job</code>，最后查到原因是使用这种方法给占位符赋值时，它的sql语句会变成<code>select &#39;ename&#39;,&#39;job&#39;from emp</code>,这样返回的结果肯定是列名了,所以我们用它给占位符赋值的时候只能在后面的条件赋值，这样才不会出现这种问题，这也算是jdbc的一个弊端了吧，所以后来才会出现mybatis等优秀的框架吧</p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
            <tag> JDBC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>改变uTools插件的安装路径</title>
      <link href="post/utools/"/>
      <url>post/utools/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>我们知道uTools是一款好用至极的软件，可以自由选择各种插件、提高工作效率</p><h1 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h1><p>下载地址百度搜索<code>utools</code>或者点击我的<a href="http://www.u.tools/">链接</a>即可进行下载、唯一不好的地方我们双击下载的exe文件，他会自动帮我们下载完毕、这里非常不友好、但是本身只有100多M，所以我们也就忍了（安装完成之后会出现提示页面，按住<code>alt</code>+<code>space</code>即可呼出）<img src="https://gcore.jsdelivr.net/gh/code-anan/image/20211120164504.png"></p><h1 id="改变插件安装路径"><a href="#改变插件安装路径" class="headerlink" title="改变插件安装路径"></a>改变插件安装路径</h1><p>软件安装位置我们改变不了、安装的插件位置一定不能还在C盘了、这样体积太大、直接开始介绍方法：</p><ol><li><p><code>win</code>+<code>R</code>,输入<code>%APPDATA%</code>,找到我们的<code>uTools</code>文件夹，然后进行剪切<img src="https://gcore.jsdelivr.net/gh/code-anan/image/20211120164833.png">并记下他的路径<code>C:\Users\admin\AppData\Roaming\uTools</code>(这个admin是你电脑自己起的名字记得更换~)</p></li><li><p>剪切到我们想要放的位置、这里我选择D盘存放，粘贴到D盘<img src="https://gcore.jsdelivr.net/gh/code-anan/image/20211120165020.png"><br>同样记下文件路径，我这里为<code>D:\uTools</code></p></li><li><p>最后进入cmd输入以下指令<code>mklink /d &quot;C:\Users\admin\AppData\Roaming/uTools&quot; &quot;D:\uTools&quot;</code>更换为你的实际路径<br><img src="https://gcore.jsdelivr.net/gh/code-anan/image/20211120165345.png"><br>出现以下符号即为创建完成！</p><h1 id="好用的插件介绍"><a href="#好用的插件介绍" class="headerlink" title="好用的插件介绍"></a>好用的插件介绍</h1></li></ol><ul><li>maven&amp;gradle<br><img src="https://gcore.jsdelivr.net/gh/code-anan/image/20211120165554.png"><br>使用该插件之后，输入想要的依赖自动copy我们需要的依赖地址，例如gson，选择某一个版本点击之后赋值到我们的项目中<img src="https://gcore.jsdelivr.net/gh/code-anan/image/20211120165914.png"><br><img src="https://gcore.jsdelivr.net/gh/code-anan/image/20211120165949.png"><br>这样就不用我们到网站上搜索了</li><li>内网穿透（现在已经下架，之前非常好用现在只能用花生壳了）</li><li>本地搜索 （轻易检索到本地文件只需要一点点信息）<br><img src="https://gcore.jsdelivr.net/gh/code-anan/image/20211120170134.png"><br>当然还有其他很多优秀的插件、这里就不介绍了值得你慢慢探索！</li></ul>]]></content>
      
      
      <categories>
          
          <category> uTools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> uTools </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何在本地运行一个非maven项目</title>
      <link href="post/oldproject/"/>
      <url>post/oldproject/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>非maven的项目我们可以统称为老项目了、一般现在的maven项目，除了必要的配置文件中的地址需要改动一下，其他就没有什么需要改的了、但是老项目却不是这样，配置起来非常麻烦、这里记录一下老项目的启动配置过程</p><h1 id="必要配置"><a href="#必要配置" class="headerlink" title="必要配置"></a>必要配置</h1><ol><li>第一步当然是把代码拉下来 然后<code>check out</code>（需要先下载<a href="https://osdn.net/projects/tortoisesvn">Tortoise SVN</a>）<img src="https://gcore.jsdelivr.net/gh/code-anan/image/20211030185845.png"></li><li>确保整个项目的jdk正常<img src="https://gcore.jsdelivr.net/gh/code-anan/image/20211030191611.png"></li><li>删除无用爆红的jar包<img src="https://gcore.jsdelivr.net/gh/code-anan/image/20211030191708.png"></li><li>添加web目录下的jar包一般放在web-inf中的lib目录下<img src="https://gcore.jsdelivr.net/gh/code-anan/image/20211030191911.png"></li><li>添加tomcat的jar包<img src="https://gcore.jsdelivr.net/gh/code-anan/image/20211030192004.png"></li><li>创建web（在Facets和modules中都一样）<img src="https://gcore.jsdelivr.net/gh/code-anan/image/20211030192240.png"></li><li>Artifact创建好之后，把缺失的文件都添上</li></ol><h1 id="Tomcat配置"><a href="#Tomcat配置" class="headerlink" title="Tomcat配置"></a>Tomcat配置</h1><p>最后就是必须的Tomcat配置了、非maven的项目都不会内置tomcat、所以这里我们需要手动配置<img src="https://gcore.jsdelivr.net/gh/code-anan/image/20211030192540.png">注意不要选成tomee<br><img src="https://gcore.jsdelivr.net/gh/code-anan/image/20211030192637.png"><br>选择你电脑上的tomcat进行配置<br>然后Deployment（太简单了不用说了）<br>然后启动成功！<br><img src="https://gcore.jsdelivr.net/gh/code-anan/image/20211030193248.png"></p><h1 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h1><p>如果以上配置还不能正常启动、那就是一些必要的配置没有配置好、例如我这个项目的<code>frame-plugin.xml</code>中的两项启动方式就需要手动改一下，这里可以询问你的同事他们一定知道、完结撒花！(￣▽￣)／</p>]]></content>
      
      
      <categories>
          
          <category> Maven </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Maven </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解决Sublime Text打开文件乱码的问题</title>
      <link href="post/sublimeText3Error/"/>
      <url>post/sublimeText3Error/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>我们知道<code>Sunlime Text</code>是一款非常好用的文本编辑器、我们打开各种java文件、xml文件、properties等类型的文件时非常的好用、但是他也有自己的小bug、例如我打开一个springboot的application.properties文件时，当文件含有中文他就会乱码、如下图<img src="https://gcore.jsdelivr.net/gh/code-anan/image/20211030180745.png"></p><h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><ol><li>首先需要给sublime安装<code>Package Control</code><br>打开text3、然后<code>view</code>-&gt;<code>show console</code>或者快捷键<code>ctrl</code>+<code>~</code><img src="https://gcore.jsdelivr.net/gh/code-anan/image/20211030181650.png"><br>输入以下指令<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">import urllib.request,os; pf = &#x27;Package Control.sublime-package&#x27;; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); open(os.path.join(ipp, pf), &#x27;wb&#x27;).write(urllib.request.urlopen( &#x27;http://sublime.wbond.net/&#x27; + pf.replace(&#x27; &#x27;,&#x27;%20&#x27;)).read())</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li>安装好之后可以看到<code>preferences</code>中有了package Control,然后输入<code>install package</code><img src="https://gcore.jsdelivr.net/gh/code-anan/image/20211030182007.png"></li><li>等待几秒 在插件安装页输入<code>ConvertToUTF8</code>和<code>GBK Support</code><br><img src="https://gcore.jsdelivr.net/gh/code-anan/image/20211030182147.png"><br><img src="https://gcore.jsdelivr.net/gh/code-anan/image/20211030182455.png"></li><li>等待插件安装好之后重启 打开文件<br><img src="https://gcore.jsdelivr.net/gh/code-anan/image/20211030183014.png"><div class="note danger simple"><p>注意：这里你的idea项目编码方式一定要是<code>utf-8</code>，否则还会发现乱码，如下图</p></div><img src="https://gcore.jsdelivr.net/gh/code-anan/image/20211030183523.png"></li></ol>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Sublime Text </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Tomcat的安装和配置</title>
      <link href="post/tomcatinstall/"/>
      <url>post/tomcatinstall/</url>
      
        <content type="html"><![CDATA[<h1 id="Tomcat简单介绍"><a href="#Tomcat简单介绍" class="headerlink" title="Tomcat简单介绍"></a>Tomcat简单介绍</h1><div class="note info simple"><p>简单的来说tomcat就是个轻量级的服务器，我们往javaweb方面学习时候经常会用到它，这里记录一下安装的步骤和简单的配置（注意安装tomcat之前jdk必须安装配置完成）</p></div><h1 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h1><p>下载地址可以选择官方网站：-&gt;<a href="https://tomcat.apache.org/download-80.cgi">传送门</a><img src="https://gcore.jsdelivr.net/gh/code-anan/image/20211004211139.png"><br>左边为版本 core中为压缩包 选择下载解压即可<br>或者也可以选择从我的网盘进行下载安装包文件<br>链接：<code>https://pan.baidu.com/s/1Z4qtzsugPZUAmfC3qeEEGw</code><br>提取码：<code>8pht</code><img src="https://gcore.jsdelivr.net/gh/code-anan/image/20211004211628.png">选择一个版本安装即可<br>安装过程只需要一直下一步就可以</p><div class="note danger simple"><p>需要注意的是从官网下载的压缩包直接解压得到的即为安装完成，我网盘中的为.exe格式的安装包，不要混淆</p></div><p>最后出现以下目录结构如下表示安装完成<br><img src="https://gcore.jsdelivr.net/gh/code-anan/image/20211004212112.png"></p><h1 id="环境变量配置"><a href="#环境变量配置" class="headerlink" title="环境变量配置"></a>环境变量配置</h1><p>来到我们的高级系统设置-&gt;环境变量-&gt;新建变量，其中变量名为<code>CATALINA_HOME</code>，值为我们上面安装的tomcat所在的绝对路径，然后是JAVA_HOME也要写上jdk安装的位置，如下图<img src="https://gcore.jsdelivr.net/gh/code-anan/image/20211004215533.png"><br>最后还要在path中加上<code>%CATALINA_HOME%\bin</code>或者tomcat下bin的绝对路径，这两种方式都是一样的<img src="https://gcore.jsdelivr.net/gh/code-anan/image/20211004215735.png"><br>到这里基本上就配置完成了 如果不配置的话会发现我们本地想要启动tomcat会闪退无法启动</p><h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><p>以上步骤都操作好了之后，可以在本地测试一下，来到tomcat安装的目录下的bin下，双击startup.bat<img src="https://gcore.jsdelivr.net/gh/code-anan/image/20211004215829.png">如果这里出现闪退 一定是<code>环境变量配置</code>那里没有配置好 然后在本地看一下tomcat,在浏览器上输入<code>http://localhost:8080</code>,出现下图表示安装成功！<img src="https://gcore.jsdelivr.net/gh/code-anan/image/20211004220019.png">最后不要忘记双击bin目录下的shutdown.bat来关闭tomcat服务，不然会一直占用资源(￣▽￣)~*</p>]]></content>
      
      
      <categories>
          
          <category> 服务器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tomcat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>maven的安装和IDEA中集成</title>
      <link href="post/maveninstall/"/>
      <url>post/maveninstall/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>maven一直是一款非常热门的java项目构建系统或者说是一个工具，最通俗易懂且最强大的功能就是它可以帮助我们管理各种各样的jar包，不用像之前一样需要一个jar包就要自己拖到lib目录下，当然他还有其他的功能、这些只有在项目中自己体会才能理解，下面直接开始介绍安装过程！</p><blockquote><p>本文主要参考<a href="https://www.cnblogs.com/iceb/p/7097850.html">碎冰的文章</a></p></blockquote><h1 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h1><h2 id="maven下载"><a href="#maven下载" class="headerlink" title="maven下载"></a>maven下载</h2><p>首先我们需要来到maven的官网进行下载-&gt;<a href="http://maven.apache.org/download.cgi">传送门</a><br>版本我们选择最新版就可以(<em>^▽^</em>)，这里是3.8.2版本<img src="https://gcore.jsdelivr.net/gh/code-anan/image/20211003225228.png"><br>这里我们选择下载压缩包，下载完之后这里建议解压到一个新的目录下（即我们maven安装的目录），这个目录下我们存放我们下载的maven和<code>本地仓库</code>（这里我选择解压到新建的一个文件夹<code>maven</code>下），本地仓库的概念后面会讲解<br><img src="https://gcore.jsdelivr.net/gh/code-anan/image/20211003225437.png"><br><img src="https://gcore.jsdelivr.net/gh/code-anan/image/20211003225620.png"></p><h2 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h2><p>环境变量位置：此电脑-&gt;属性-&gt;<code>高级系统设置</code>-&gt;<code>环境变量</code>，然后<code>新建</code><img src="https://gcore.jsdelivr.net/gh/code-anan/image/20211003225922.png"><br>变量名：<code>M2_HOME</code><br>变量值：刚才解压的maven位置，例如<code>D:\maven\apache-maven-3.8.2</code><br><img src="https://gcore.jsdelivr.net/gh/code-anan/image/20211003230140.png"><br>然后是系统变量<code>path</code>中添加<code>%M2_HOME%\bin</code>或者<code>D:\maven\apache-maven-3.8.2\bin</code>，这两种方式都可以输入完之后确定退出<br><img src="https://gcore.jsdelivr.net/gh/code-anan/image/20211003230429.png"></p><h2 id="测试一下是否安装成功"><a href="#测试一下是否安装成功" class="headerlink" title="测试一下是否安装成功"></a>测试一下是否安装成功</h2><p>来到我们的cmd中输入<code>mvn -v</code>或者<code>mvn -version</code>，出现版本号等信息安装完成!<img src="https://gcore.jsdelivr.net/gh/code-anan/image/20211003230710.png"></p><h2 id="本地仓库的配置"><a href="#本地仓库的配置" class="headerlink" title="本地仓库的配置"></a>本地仓库的配置</h2><p>如果这里我们不设置的话，默认的仓库位置是<code>C：用户\name\.m2\</code>，这样太占用我们c盘的空间，所以这里我们选择设置到我们刚才新建的D盘下的maven文件夹下，先新建一个文件夹<code>repository</code>作为我们本地的仓库位置<img src="https://gcore.jsdelivr.net/gh/code-anan/image/20211003231013.png"><br>然后找到安装的maven下的conf下的<code>settings.xml</code>,<img src="https://gcore.jsdelivr.net/gh/code-anan/image/20211003231307.png"><br>打开找到<code>localrepository</code>,目录为我们刚才新建的文件夹repository，本地仓库的目的是我们从中心库下载一些jar包等都存放在这里，项目需要的jar包都会先从这里找，这里找不到的话就会从中心库下载，中心库下载也会下载到我们的本地仓库<img src="https://gcore.jsdelivr.net/gh/code-anan/image/20211003231458.png"></p><h2 id="配置中央仓库"><a href="#配置中央仓库" class="headerlink" title="配置中央仓库"></a>配置中央仓库</h2><p>maven默认下载中央仓库的位置在国外，为了加快速度，我们在<code>settings.xml</code>中添加国内的阿里云镜像，即在<code>mirrors</code>标签中新增加一个镜像标签：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;mirror&gt;</span><br><span class="line">      &lt;id&gt;alimaven&lt;/id&gt;</span><br><span class="line">      &lt;mirrorOf&gt;central&lt;/mirrorOf&gt;</span><br><span class="line">      &lt;name&gt;aliyun maven&lt;/name&gt;</span><br><span class="line">      &lt;url&gt;http://maven.aliyun.com/nexus/content/groups/public/&lt;/url&gt;</span><br><span class="line">&lt;/mirror&gt;</span><br></pre></td></tr></table></figure><p>如下图：<img src="https://gcore.jsdelivr.net/gh/code-anan/image/20211004000112.png"><br>这样我们本地需要的就可以在阿里云下载 速度会快很多</p><h1 id="IDEA中集成maven"><a href="#IDEA中集成maven" class="headerlink" title="IDEA中集成maven"></a>IDEA中集成maven</h1><p>实际上idea中内置了maven项目，但是功能不够强大，所以可以选择集成我们自己下载安装的，来到idea中<code>File</code>-&gt;<code>settings</code>-&gt;<code>Build,Execution,Deployment</code>-&gt;<code>Build tools</code>-&gt;<code>Maven</code>，进行如下修改<img src="https://gcore.jsdelivr.net/gh/code-anan/image/20211003233633.png"><br>然后我们创建一个maven项目看看是否会下载jar包到本地仓库,项目类型我们选择maven，创建一个web项目<img src="https://gcore.jsdelivr.net/gh/code-anan/image/20211003234205.png">一直下一步可以看到一直在下载web项目需要的各类jar包</p><div class="note info danger flat"><p>注意：创建项目的时候选择maven的位置和目录也要跟我们在设置里面设置的一致</p></div><p><img src="https://gcore.jsdelivr.net/gh/code-anan/image/20211003234309.png">创建之后就可以看到我们的本地仓库已经有了很多文件了，这也证明了我们的结论<img src="https://gcore.jsdelivr.net/gh/code-anan/image/20211003234354.png"></p>]]></content>
      
      
      <categories>
          
          <category> maven </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Maven </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何使火狐浏览器打开链接在新的标签页</title>
      <link href="post/firefox/"/>
      <url>post/firefox/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><div class="note default simple"><p>众所周知，火狐浏览器是一款非常好用的浏览器，但是我们使用的过程中会发现，当我们点开某个链接时，它会在本标签页访问，这一点非常不好，我们都喜欢在新的标签页打开，所以这里记录一下如何修改</p></div><h1 id="修改步骤"><a href="#修改步骤" class="headerlink" title="修改步骤"></a>修改步骤</h1><ol><li>在任意一个地址栏输入<code>about:config</code>，如下图<br><img src="https://gcore.jsdelivr.net/gh/code-anan/image/20210804091616.png"></li><li>在下面的搜索首选项名称中依次填写<br><code>browser.search.openintab</code><br><code>browser.urlbar.openintab</code><br><code>browser.tabs.loadBookmarksInTabs</code><br>把他们的值改为true(双击即可)<img src="https://gcore.jsdelivr.net/gh/code-anan/image/20210804091715.png"><br>三个都改为true之后，打开一个链接测试发现就完成啦(<em>^▽^</em>)</li></ol>]]></content>
      
      
      <categories>
          
          <category> 浏览器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Firefox </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Oracle数据库安装</title>
      <link href="post/oracleinstall/"/>
      <url>post/oracleinstall/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>今天想把几个查询结果导成dmp文件，结果那个指令需要本地安装oracle数据库，无奈只得安装一下<code>Oracle</code>~<br>PS:本文主要参考<a href="https://zhuanlan.zhihu.com/p/152206091">逆流君</a>的文章</p><h1 id="安装路径"><a href="#安装路径" class="headerlink" title="安装路径"></a>安装路径</h1><p>可以选择官网下载，但是官网有时候比较难进而且慢，这里可以选择在我的网盘下载,版本为R11<br>网盘地址：<code>https://pan.baidu.com/s/1JFnNXPAOT2mYamKI1h8qBg</code><br>提取码：<code>xh27</code></p><p>只要下载两个文件即可<img src="https://gcore.jsdelivr.net/gh/code-anan/image/20210731092210.png"></p><h1 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h1><ol><li><p>上面两个压缩吧下载好之后，选中这两个压缩文件同时解压（可能稍微会有点慢），解压完成之后会发现生成一个文件夹名为<code>database</code><img src="https://gcore.jsdelivr.net/gh/code-anan/image/20210731092532.png"></p></li><li><p>进入该文件夹，双击<code>setup.exe</code><img src="https://gcore.jsdelivr.net/gh/code-anan/image/20210731092837.png"></p></li><li><p>之后很可能会看到下面的提示，直接忽略掉点击是即可<img src="https://gcore.jsdelivr.net/gh/code-anan/image/20210731093114.png"></p></li><li><p>去掉勾选接收安全更新<img src="https://gcore.jsdelivr.net/gh/code-anan/image/20210731093312.png"></p></li><li><p>提醒未填写邮件，也是直接忽略点是<img src="https://gcore.jsdelivr.net/gh/code-anan/image/20210731093433.png"></p></li><li><p>然后选择<code>创建和配置数据库</code>，下一步<img src="https://gcore.jsdelivr.net/gh/code-anan/image/20210731093531.png"></p></li><li><p>系统类中选择<code>桌面类</code><img src="https://gcore.jsdelivr.net/gh/code-anan/image/20210731093705.png"></p></li><li><p>典型安装配置中，除了口令其他最后按照默认，每个人的可能会不同，需要注意的是口令需要自己输入而且必须有大小写字母和数字且不少于八位字符，这里我设置的是Aa123456，然后继续下一步<img src="https://gcore.jsdelivr.net/gh/code-anan/image/20210731094034.png"></p></li><li><p>概要基本不用看，直接点击<code>完成</code>即可<img src="https://gcore.jsdelivr.net/gh/code-anan/image/20210731094149.png"></p></li><li><p>然后慢慢等待安装完成。。。。（注意有防火墙拦截某些程序点击允许运行）<br><img src="https://gcore.jsdelivr.net/gh/code-anan/image/20210731094247.png"></p></li><li><p>安装完成会看到下面界面<img src="https://gcore.jsdelivr.net/gh/code-anan/image/20210731094746.png"></p></li><li><p>上面走完会跳出一下界面，注意千万不要点确定，要选择呢<code>口令管理</code>！<img src="https://gcore.jsdelivr.net/gh/code-anan/image/20210731095349.png"></p></li><li><p>进入到口令管理中，需要对一下账户做对应操作</p><ul><li>找到SYS，将SYS的口令设置为<code>change_on_install</code></li><li>找到system，将system口令设置为<code>manager</code></li><li>找到SH，设置不锁定账户，口令为<code>sh</code></li><li>找到SCOTT，设置不设定账户，口令自己设置，这里我设置为<code>scott</code><img src="https://gcore.jsdelivr.net/gh/code-anan/image/20210731095631.png"><br>提示密码复杂性 直接忽略确定即可<img src="https://gcore.jsdelivr.net/gh/code-anan/image/20210731100250.png"></li></ul></li><li><p>然后继续确定可以看到安装完成了，关闭即可<img src="https://gcore.jsdelivr.net/gh/code-anan/image/20210731100756.png"></p></li><li><p>测试安装是否成功，运行页面输入sqlplus,登录scott的账号密码查oracle自带的emp表看是否有结果，出现如下表示成功<img src="https://gcore.jsdelivr.net/gh/code-anan/image/20210731102741.png"> </p></li></ol><h1 id="错过口令管理的解决方案"><a href="#错过口令管理的解决方案" class="headerlink" title="错过口令管理的解决方案"></a>错过口令管理的解决方案</h1><ol><li>win+R键 打开运行页面 并且输入<code>sqlplus</code></li><li>输入之后让输入用户名，这里用户名输入<code>sys</code></li><li>输入口令+ as sysdba，这是设置口令密码时输入的，比如我的是Aa123456（注意他这里不会显示所以要细心输入，而且后面要接as sysdba）</li><li>输入<code>alter user scott account unlock</code>;可以看到提示用户已更改</li><li>输入<code>commit</code>；提交完成</li><li>输入 <code>conn scott/tiger</code>(这里是更改scott的口令)</li><li>新口令输入，然后再次输入，已连接。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
          <category> 安装记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Oracle </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Intellij  IDEA 2020版本安装和永久破解</title>
      <link href="post/ideainstall/"/>
      <url>post/ideainstall/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>相信用过idea的同学都会爱上这款IDE，它的强大不用多说，正好趁着换了公司的新电脑，记录一下安装过程，方便以后重装的进程(<em>^▽^</em>)，下面直接开始！</p><h1 id="软件安装"><a href="#软件安装" class="headerlink" title="软件安装"></a>软件安装</h1><p>软件的安装非常的简单，这里我们选择在官网进行安装：－＞<a href="https://www.jetbrains.com/idea/download/other.html">传送门</a><br><img src="https://gcore.jsdelivr.net/gh/code-anan/image/20210908172347.png"><br>往下面拉找到2020.1.1版本的进行安装，这里我们选择<code>IntelliJ IDEA Ultimate</code>即最终版可以试用三十天，想当初我第一次接触的时候就用完了这三十天然后试用期就到了，社区版的功能有所不足，然后进行下载，安装路径无所谓，到这里就安装成功了</p><h1 id="破解包下载"><a href="#破解包下载" class="headerlink" title="破解包下载"></a>破解包下载</h1><p>破解包网盘地址永久有效：<code>https://pan.baidu.com/s/1UJ6aOM9ESe2Fz6F_UdyP6A</code>，提取码：<code>5mkd</code><br>下载之后，进行解压，看到它的目录结构为下图所示：<img src="https://gcore.jsdelivr.net/gh/code-anan/image/20210721093405.png"></p><h1 id="开始破解"><a href="#开始破解" class="headerlink" title="开始破解"></a>开始破解</h1><p><img src="https://gcore.jsdelivr.net/gh/code-anan/image/20210721093508.png"><br>这里直接拖动<code>jetbrains-agent.jar</code>包到idea中的下面位置即可<img src="https://gcore.jsdelivr.net/gh/code-anan/image/20210721093722.png"><br>然后可以看到出现下面的提示<img src="https://gcore.jsdelivr.net/gh/code-anan/image/20210721093828.png"><br>点击<code>Restart</code>,idea会自动重启然后出现下面提示，选择<code>为IDEA安装</code><img src="https://gcore.jsdelivr.net/gh/code-anan/image/20210721093916.png"><br>然后会要求再次重启，再点击<code>是</code>即可完成破解</p><h1 id="验证是否破解成功"><a href="#验证是否破解成功" class="headerlink" title="验证是否破解成功"></a>验证是否破解成功</h1><p>idea再次重启之后来到上方工具栏<code>Help</code>-&gt;<code>Register</code><img src="https://gcore.jsdelivr.net/gh/code-anan/image/20210721094248.png"><br>如果出现一下界面全部绿色，则为破解成功！<br><img src="https://gcore.jsdelivr.net/gh/code-anan/image/20210721094359.png">，这里的激活码为重启之后自动填入的，如果出现爆红，那么复制lib文件下的<code>ACTIVATION_CODE.txt</code>的激活码<img src="https://gcore.jsdelivr.net/gh/code-anan/image/20210721094541.png">进行粘贴复制，不过一般不会出现这种情况，这样就大功告成了！！如果还有问题欢迎在评论区一起探讨~</p>]]></content>
      
      
      <categories>
          
          <category> IDEA </category>
          
          <category> 记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IDEA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于PLSql Developer连接数据库报无法锁定OCI dll的错误解决方案</title>
      <link href="post/oci.dll/"/>
      <url>post/oci.dll/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>最近出差，有时候会用到数据库查一些数据。其实，之前我一直用的<code>Navicat Premium 12</code>,但是今天有同事远程我的电脑时，他习惯使用<code>PLsql</code>,但是打开我的plsql的时候发现连接不上数据库，并且报了一下错误，好在后来成功解决(<em>^▽^</em>)<img src="https://gcore.jsdelivr.net/gh/code-anan/image/20210714212511.png"></p><h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><p>我们连接不成功还是可以取消登录进入到主页面<img src="https://gcore.jsdelivr.net/gh/code-anan/image/20210714213145.png"><br>选中圈中的小图标进入到<code>首选项</code>：<img src="https://gcore.jsdelivr.net/gh/code-anan/image/20210715082741.png"><br>这两项需要分别填入oracle客户端实例以及对应的<code>oci.dll</code>文件<img src="https://gcore.jsdelivr.net/gh/code-anan/image/20210715082953.png"><br>然后点击<code>应用</code>-&gt;<code>确定</code>，如果该文件没有下载的话，可以到<a href="/post/ora28547">上一篇</a>中查看下载地址，然后关闭plsql重新进入，可以发现登录页也发生了一些变化<img src="https://gcore.jsdelivr.net/gh/code-anan/image/20210715083408.png">这里需要注意的是数据库的填写格式为<code>主机ip</code>+<code>端口号</code>+<code>服务名</code>，然后发现可以正常连接了！<br><img src="https://gcore.jsdelivr.net/gh/code-anan/image/20210715083739.png"></p><h1 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h1><p>这篇绝对不是为了充数写的(￣▽￣)~*</p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PLSQL Developer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Navicat Premium 12连接Oracle数据库出现ORA-28547的错误</title>
      <link href="post/ora28547/"/>
      <url>post/ora28547/</url>
      
        <content type="html"><![CDATA[<h1 id="错误描述"><a href="#错误描述" class="headerlink" title="错误描述"></a>错误描述</h1><p>navicat premium 12连接oracle数据库时出现以下错误：<br><img src="https://gcore.jsdelivr.net/gh/code-anan/image/373693846451dae1ea050da787ddcac.png"></p><h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><ol><li><p>首先必须要下载必要的客户端-&gt;<a href="https://www.oracle.com/database/technologies/instant-client/winx64-64-downloads.html">传送门</a>,选择如下版本下载，如果没有oracle账户需要先注册一下，步骤也很简单<img src="https://gcore.jsdelivr.net/gh/code-anan/image/20210624142559.png"></p></li><li><p>下载完成并解压到一个目录不包含中文字符的目录，这里我放到了<code>D:\Oracle</code>下，图为解压后的文件<img src="https://gcore.jsdelivr.net/gh/code-anan/image/20210624142647.png"></p></li><li><p>打开<code>Nacicat Premium 12</code>中的<code>工具</code>-&gt;<code>选项</code>-&gt;<code>环境</code>，修改<code>OCI环境</code>为下图，确定之后需要<code>重启</code>navicat，记住一定要重启！<br><img src="https://gcore.jsdelivr.net/gh/code-anan/image/20210624142951.png"></p></li></ol><h1 id="完成"><a href="#完成" class="headerlink" title="完成"></a>完成</h1><p>重启之后，发现可以正常连接了！<img src="https://gcore.jsdelivr.net/gh/code-anan/image/20210624143305.png"></p><p>完结撒花~</p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Navicat Premium 12 </tag>
            
            <tag> ORA-28547错误 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>利用Mabatis逆向工程快速搭建SSM框架</title>
      <link href="post/SSM%20build/"/>
      <url>post/SSM%20build/</url>
      
        <content type="html"><![CDATA[<h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><p>为方便测试，在本地数据库准备好一张表<img src="https://gcore.jsdelivr.net/gh/code-anan/image/20210622094047.png"><br>以及一个<code>JDBC驱动jar包</code><img src="https://gcore.jsdelivr.net/gh/code-anan/image/20210622094222.png"></p><h1 id="正式开始"><a href="#正式开始" class="headerlink" title="正式开始"></a>正式开始</h1><p>上面两项工作做好之后，就可以正式开始了</p><h2 id="逆向工程创建"><a href="#逆向工程创建" class="headerlink" title="逆向工程创建"></a>逆向工程创建</h2><ol><li><p>创建一个简单的<code>springboot项目</code><img src="https://gcore.jsdelivr.net/gh/code-anan/image/20210622094417.png"><br>相关配置注意jdk设为8就行<br><img src="https://gcore.jsdelivr.net/gh/code-anan/image/20210622094544.png"><br>注意勾选为<code>Spring Web</code>项目<br><img src="https://gcore.jsdelivr.net/gh/code-anan/image/20210622094746.png"></p></li><li><p>创建完之后，就是相关的配置</p><ul><li>添加<code>MySQL驱动依赖</code>和<code>Mybatis整合SpringBoot框架的起步依赖</code><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--MYSQL驱动--&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;mysql&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;!--Mybatis整合springboot框架的起步依赖--&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.mybatis.spring.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;mybatis-spring-boot-starter&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;2.0.0&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></li><li>然后是在项目根目录下添加<code>GeneratorMapper.xml</code>文件<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">generatorConfiguration</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">generatorConfiguration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 指定连接数据库的 JDBC 驱动包所在位置，指定到你本机的完整路径 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">classPathEntry</span> <span class="attr">location</span>=<span class="string">&quot;F:\MySql Connector Java 5.1.23\mysql-connector-java-5.1.23-bin.jar&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置 table 表信息内容体，targetRuntime 指定采用 MyBatis3 的版本 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context</span> <span class="attr">id</span>=<span class="string">&quot;tables&quot;</span> <span class="attr">targetRuntime</span>=<span class="string">&quot;MyBatis3&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 抑制生成注释，由于生成的注释都是英文的，可以不让它生成 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">commentGenerator</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suppressAllComments&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">commentGenerator</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 配置数据库连接信息 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">jdbcConnection</span> <span class="attr">driverClass</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">connectionURL</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/springboot&quot;</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">userId</span>=<span class="string">&quot;root&quot;</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">password</span>=<span class="string">&quot;233&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">jdbcConnection</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 生成 model 类，targetPackage 指定 model 类的包名， targetProject 指定</span></span><br><span class="line"><span class="comment">        生成的 model 放在 eclipse 的哪个工程下面--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">javaModelGenerator</span> <span class="attr">targetPackage</span>=<span class="string">&quot;com.example.model&quot;</span></span></span><br><span class="line"><span class="tag">                            <span class="attr">targetProject</span>=<span class="string">&quot;src/main/java&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;enableSubPackages&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;trimStrings&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">javaModelGenerator</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 生成 MyBatis 的 Mapper.xml 文件，targetPackage 指定 mapper.xml 文件的</span></span><br><span class="line"><span class="comment">        包名， targetProject 指定生成的 mapper.xml 放在 eclipse 的哪个工程下面 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">sqlMapGenerator</span> <span class="attr">targetPackage</span>=<span class="string">&quot;com.example.mapper&quot;</span></span></span><br><span class="line"><span class="tag">                         <span class="attr">targetProject</span>=<span class="string">&quot;src/main/java&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;enableSubPackages&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">sqlMapGenerator</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 生成 MyBatis 的 Mapper 接口类文件,targetPackage 指定 Mapper 接口类的包</span></span><br><span class="line"><span class="comment">        名， targetProject 指定生成的 Mapper 接口放在 eclipse 的哪个工程下面 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">javaClientGenerator</span> <span class="attr">type</span>=<span class="string">&quot;XMLMAPPER&quot;</span></span></span><br><span class="line"><span class="tag">                             <span class="attr">targetPackage</span>=<span class="string">&quot;com.example.mapper&quot;</span> <span class="attr">targetProject</span>=<span class="string">&quot;src/main/java&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;enableSubPackages&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">javaClientGenerator</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 数据库表名及对应的 Java 模型类名 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span> <span class="attr">tableName</span>=<span class="string">&quot;t_student&quot;</span> <span class="attr">domainObjectName</span>=<span class="string">&quot;Student&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">enableCountByExample</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">enableUpdateByExample</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">enableDeleteByExample</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">enableSelectByExample</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">selectByExampleQueryId</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">generatorConfiguration</span>&gt;</span></span><br></pre></td></tr></table></figure><div class="note danger simple"><p>注意：把上面<code>JDBC</code>驱动包的位置设置为你本地的路径，数据库<code>连接信息</code>也改为你的，<code>targetPackage</code>的包结构也要对应起来,<code>table</code>标签一张表对应一个实体类和其对应的dao接口和映射文件，这里只用到一张表所以只写了一个，如果有多张表那么则需要写多个table标签   </p></div></li><li>然后还需要在pom文件中添加逆向工程需要的插件<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;plugin&gt;</span><br><span class="line">    &lt;groupId&gt;org.mybatis.generator&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;mybatis-generator-maven-plugin&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.3.6&lt;/version&gt;</span><br><span class="line">    &lt;configuration&gt;</span><br><span class="line">        &lt;configurationFile&gt;GeneratorMapper.xml&lt;/configurationFile&gt;</span><br><span class="line">        &lt;verbose&gt;true&lt;/verbose&gt;</span><br><span class="line">        &lt;overwrite&gt;true&lt;/overwrite&gt;</span><br><span class="line">    &lt;/configuration&gt;</span><br><span class="line">&lt;/plugin&gt;</span><br></pre></td></tr></table></figure>添加完之后记得<code>reimport</code>不然读取不到pom中添加的依赖<br><img src="https://gcore.jsdelivr.net/gh/code-anan/image/20210622101301.png"><br>刷新之后可以看到项目插件中多了<code>mybatis-generator</code>，双击就可以看到自动生成了实体类、Dao接口和映射文件<img src="https://gcore.jsdelivr.net/gh/code-anan/image/20210622103548.png"><br>至此，逆向工程创建完成了~</li></ul></li></ol><h2 id="控制层、业务层的创建"><a href="#控制层、业务层的创建" class="headerlink" title="控制层、业务层的创建"></a>控制层、业务层的创建</h2><p>  逆向工程创建好，就等于持久层创建完了，现在只需要创建控制层和业务层即可</p><ol><li>控制层，这里创建一个<code>StudentController</code><img src="https://gcore.jsdelivr.net/gh/code-anan/image/20210622104530.png"></li><li>业务层，需要创建控制层调用的接口和对应的实现类，并加上service注解<img src="https://gcore.jsdelivr.net/gh/code-anan/image/20210622105047.png"></li><li>Dao层的接口虽然逆向工程的时候自动为我们添加了方法，但在业务层调用的时候需要使用autowired注解从spring容器中获取，所以需要添加注解<code>Mapper</code><br><img src="https://gcore.jsdelivr.net/gh/code-anan/image/20210622105200.png"><h2 id="核心配置文件的配置"><a href="#核心配置文件的配置" class="headerlink" title="核心配置文件的配置"></a>核心配置文件的配置</h2>上面配置好之后，还需要在核心配置文件中(application.properties)添加必要的数据库配置<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#设置连接数据的配置(mysql8之后需要加上cj)</span><br><span class="line">spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver</span><br><span class="line">spring.datasource.url=jdbc:mysql://localhost:3306/springboot</span><br><span class="line">spring.datasource.username=root</span><br><span class="line">spring.datasource.password=233</span><br></pre></td></tr></table></figure><h2 id="手动添加指定文件夹"><a href="#手动添加指定文件夹" class="headerlink" title="手动添加指定文件夹"></a>手动添加指定文件夹</h2>上面的步骤以及差不多了，但是我们测试的时候出现报错，原来是dao层中的映射文件没被编译，这里有两种解决方案</li><li>在pom中手动指定资源文件夹，使映射文件可以被编译（同样需要reimport）<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;resources&gt;</span><br><span class="line">    &lt;resource&gt;</span><br><span class="line">        &lt;directory&gt;src/main/java&lt;/directory&gt;</span><br><span class="line">        &lt;includes&gt;</span><br><span class="line">            &lt;include&gt;**/*.xml&lt;/include&gt;</span><br><span class="line">        &lt;/includes&gt;</span><br><span class="line">    &lt;/resource&gt;</span><br><span class="line">&lt;/resources&gt;</span><br></pre></td></tr></table></figure></li><li>将映射文件移动到resources资源文件夹,并在核心配置文件中声明位置<br><img src="https://gcore.jsdelivr.net/gh/code-anan/image/20210622110435.png"></li></ol><h2 id="成功测试"><a href="#成功测试" class="headerlink" title="成功测试"></a>成功测试</h2><p> 启动项目，在浏览器上测试<img src="https://gcore.jsdelivr.net/gh/code-anan/image/20210622111136.png"><br> 可以看到返回到了数据，大功告成~</p><h1 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h1><ol><li>上面在业务层使用Autowired注解调用Dao层，除了添加<code>mapper</code>注解之外，还可以在核心配置文件中添加<code>MapperSacn</code>注解，其值为dao接口所在包<img src="https://gcore.jsdelivr.net/gh/code-anan/image/20210622111624.png"></li><li>Mybatis逆向生成只针对单表，并且数据库中的字段由多个单词构成时必须用_分隔</li></ol>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SSM </tag>
            
            <tag> Springboot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>为Hexo博客添加Twikoo评论</title>
      <link href="post/Twikoo/"/>
      <url>post/Twikoo/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>之前我一直使用的是valine评论系统，虽然它确实简洁，但是缺点是不能显示用户的头像，这一点我感觉很不好，所以后来想着换成<code>Twikoo</code>评论</p><h1 id="CloudBase配置"><a href="#CloudBase配置" class="headerlink" title="CloudBase配置"></a>CloudBase配置</h1><p>首先进入到<a href="https://cloud.tencent.com/act/free">云开发CloudBase</a>，找到咱们的免费试用版，如下<img src="https://gcore.jsdelivr.net/gh/code-anan/image/20210619124239.png"><br>然后就是<code>创建环境</code>，选择<code>空模板</code><br><img src="https://gcore.jsdelivr.net/gh/code-anan/image/20210619125333.png"><br>环境信息填写如下<br><img src="https://gcore.jsdelivr.net/gh/code-anan/image/20210619125743.png"><br>地域最好选择<code>上海</code>，如果选择<code>广州</code>的话，需要在<code>twikoo.init()</code>时额外指定环境<code>region: &quot;ap-guangzhou&quot;</code><br>环境名称无所谓，符合要求即可<br>套餐版本选择免费版就够用的了，然后下一步，<code>立即购买</code><br><img src="https://gcore.jsdelivr.net/gh/code-anan/image/20210619130115.png"><br>购买完成之后即可进入<code>控制台</code><img src="https://gcore.jsdelivr.net/gh/code-anan/image/20210619130202.png"><br>来到<code>环境</code>-<code>登录授权</code>，开启<code>匿名登录</code><br><img src="https://gcore.jsdelivr.net/gh/code-anan/image/20210619130414.png"><br>然后来到<code>安全配置</code>中，将自己的网站域名添加到<code>web安全域名</code><br><img src="https://gcore.jsdelivr.net/gh/code-anan/image/20210619130543.png"><br>下一步是<code>新建云函数</code><br><img src="https://gcore.jsdelivr.net/gh/code-anan/image/20210619130657.png"><br>并且填写以下内容<br><img src="https://gcore.jsdelivr.net/gh/code-anan/image/20210619130801.png"><br>把<code>函数代码</code>,替换为<code>exports.main = require(&#39;twikoo-func&#39;).main</code><br><img src="https://gcore.jsdelivr.net/gh/code-anan/image/20210619130930.png"><br>确定之后，点击刚才创建的云函数<code>twikoo</code>中，找到<code>函数代码</code>-&gt;<code>文件</code>-&gt;<code>新建文件</code><img src="https://gcore.jsdelivr.net/gh/code-anan/image/20210619131048.png"><br>命名为<code>package.json</code>，按下回车，并且复制以下代码<code>&#123; &quot;dependencies&quot;: &#123; &quot;twikoo-func&quot;: &quot;1.3.0&quot; &#125; &#125;</code><br><img src="https://gcore.jsdelivr.net/gh/code-anan/image/20210619131319.png"><br>配置完之后可以看到其状态变成<code>正常</code><br><img src="https://gcore.jsdelivr.net/gh/code-anan/image/20210619131413.png"><br>最后复制需要的<code>环境id</code><br><img src="https://gcore.jsdelivr.net/gh/code-anan/image/20210619131924.png"></p><h1 id="主题配置文件配置"><a href="#主题配置文件配置" class="headerlink" title="主题配置文件配置"></a>主题配置文件配置</h1><p>来到<code>主题配置文件</code>，找到以下内容</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">twikoo:</span></span><br><span class="line">  <span class="attr">envId:</span> <span class="string">xxxxxxxx</span></span><br><span class="line">  <span class="attr">region:</span></span><br><span class="line">  <span class="attr">visitor:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">option:</span></span><br></pre></td></tr></table></figure><p>envid为上面复制的<code>环境id</code></p><p>然后还需要开启评论</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">comments:</span></span><br><span class="line">  <span class="comment"># Up to two comments system, the first will be shown as default</span></span><br><span class="line">  <span class="comment"># Choose: Disqus/Disqusjs/Livere/Gitalk/Valine/Waline/Utterances/Facebook Comments/Twikoo</span></span><br><span class="line">  <span class="attr">use:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">Twikoo</span></span><br><span class="line">  <span class="comment"># - Disqus</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">text:</span> <span class="literal">false</span> <span class="comment"># Display the comment name next to the button</span></span><br><span class="line">  <span class="comment"># lazyload: The comment system will be load when comment element enters the browser&#x27;s viewport.</span></span><br><span class="line">  <span class="comment"># If you set it to true, the comment count will be invalid</span></span><br><span class="line">  <span class="attr">lazyload:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">count:</span> <span class="literal">true</span> <span class="comment"># Display comment count in post&#x27;s top_img</span></span><br><span class="line">  <span class="attr">card_post_count:</span> <span class="literal">true</span> <span class="comment"># Display comment count in Home Page</span></span><br></pre></td></tr></table></figure><p>保存，最后hexo三连查看效果<br><img src="https://gcore.jsdelivr.net/gh/code-anan/image/20210619134056.png"><br>如图，输入昵称和邮箱即可获取到用户的头像，这也是我为什么选择Twikoo的原因</p><h1 id="开启twikoo评论管理面板"><a href="#开启twikoo评论管理面板" class="headerlink" title="开启twikoo评论管理面板"></a>开启twikoo评论管理面板</h1><ul><li>找到环境-&gt;登录授权，点击<code>私钥下载</code>并复制其私钥内容<br><img src="https://gcore.jsdelivr.net/gh/code-anan/image/20210619134223.png"></li><li>来到评论窗口，点击那个小齿轮，粘贴私钥内容并设置密码注册<br><img src="https://gcore.jsdelivr.net/gh/code-anan/image/20210619134546.png"></li></ul><p><img src="https://gcore.jsdelivr.net/gh/code-anan/image/20210619134606.png"></p><ul><li>在配置管理中进行必要的设置，如设置提醒的邮箱，默认的头像等<br><img src="https://gcore.jsdelivr.net/gh/code-anan/image/20210619134843.png"></li></ul><p>设置完上述步骤就大功告成啦 (￣▽￣)~*</p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
          <category> 修改记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Twikoo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>快速创建SpringBoot项目并整合SpringMVC</title>
      <link href="post/springboot%20start/"/>
      <url>post/springboot%20start/</url>
      
        <content type="html"><![CDATA[<h1 id="快速创建SpringBoot项目"><a href="#快速创建SpringBoot项目" class="headerlink" title="快速创建SpringBoot项目"></a>快速创建SpringBoot项目</h1><blockquote><p>需要的工具，这里使用的是<code>IntelliJ IDEA</code></p></blockquote><h2 id="进入到idea-创建一个空项目Empty-Project"><a href="#进入到idea-创建一个空项目Empty-Project" class="headerlink" title="进入到idea,创建一个空项目Empty Project"></a>进入到<code>idea</code>,创建一个空项目<code>Empty Project</code></h2><p><img src="https://gcore.jsdelivr.net/gh/code-anan/image/20210618105839.png"><br>路径自己设置：<br><img src="https://gcore.jsdelivr.net/gh/code-anan/image/20210618105918.png"></p><h2 id="进去之后，就可以新建一个module"><a href="#进去之后，就可以新建一个module" class="headerlink" title="进去之后，就可以新建一个module"></a>进去之后，就可以新建一个<code>module</code></h2><p><img src="https://gcore.jsdelivr.net/gh/code-anan/image/20210618110022.png"><br>JDK不要说了勾选上，这里选择<code>Default</code><br><img src="https://gcore.jsdelivr.net/gh/code-anan/image/20210618110113.png"></p><h2 id="进入到初始化页面，进行必要的配置"><a href="#进入到初始化页面，进行必要的配置" class="headerlink" title="进入到初始化页面，进行必要的配置"></a>进入到初始化页面，进行必要的配置</h2><p><img src="https://gcore.jsdelivr.net/gh/code-anan/image/20210618110321.png"><br>Type选择<code>Maven Project</code>，然后Package最好与Group保持一致，就可以下一步了</p><h2 id="选择要添加的依赖"><a href="#选择要添加的依赖" class="headerlink" title="选择要添加的依赖"></a>选择要添加的依赖</h2><p><img src="https://gcore.jsdelivr.net/gh/code-anan/image/20210618110526.png"></p><blockquote><p>选择<code>Web</code>-&gt;<code>Spring Web</code>-&gt;<code>选择一个稳定版本，例如2.5.1（SNAPSHOT表示正在开发中的版本）</code>然后下一步即可<br>路径默认就行，然后<code>Finish</code>（第一次初始化项目可能会下载必要的依赖文件，可能会花几分钟，静静等待）</p></blockquote><p><img src="https://gcore.jsdelivr.net/gh/code-anan/image/20210618110711.png"></p><h2 id="完成创建"><a href="#完成创建" class="headerlink" title="完成创建"></a>完成创建</h2><p><img src="https://gcore.jsdelivr.net/gh/code-anan/image/20210618111139.png"><br>这个类也是SpringBoot的入口，启动SpringBoot的地方，到这里一个SpringBoot项目就创建完成了</p><h1 id="整合SpringMVC"><a href="#整合SpringMVC" class="headerlink" title="整合SpringMVC"></a>整合SpringMVC</h1><div class="note danger simple"><p>注意：SpringBoot项目代码必须放到Application类所在的同级目录或下级目录,所以这里我们在example包下新建一个类用来测试</p></div><p><img src="https://gcore.jsdelivr.net/gh/code-anan/image/20210618111848.png"><br>然后<code>Application</code>类中启动即可<br><img src="https://gcore.jsdelivr.net/gh/code-anan/image/20210618112111.png"><br>启动完成就可以在浏览器上根据我们在<code>RequestMapping</code>中设置的路径进行测试，效果如下：<br>第一个方法的结果：<br><img src="https://gcore.jsdelivr.net/gh/code-anan/image/20210618112335.png"></p><p>第二个方法的结果：<br><img src="https://gcore.jsdelivr.net/gh/code-anan/image/20210618112404.png"></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><blockquote><p>相比于Spring和SpringMVC的繁琐配置，SpringBoot极大的简化了配置，让我们可以把更多的精力放到业务上，SpringBoot牛逼！φ(&gt;ω&lt;*) </p></blockquote>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
            <tag> SpringMVC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何将hexo源码保存到github上</title>
      <link href="post/savetoGithub/"/>
      <url>post/savetoGithub/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>众所周知，我们使用<code>hexo d</code>将项目部署到github上的时候，代码其实已经被重新渲染过了，都变成了<code>html</code>文件，如下所示，可以看到目录结构和我们在本地的项目已经完全不同，而且里面并没有我们所写的md文件<img src="https://gcore.jsdelivr.net/gh/code-anan/image/20210617155143.png"><br>再加上我曾经重装过一次系统，所以上次的网站已经找不回来了，现在看到的这个站其实是我的第二个网站了，但是吃一堑长一智，学会备份源码是一件很重要的事情，下面来看看怎么在github上备份本地代码吧！</p><h1 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h1><p>阅读本文之前我默认为你已经有了github账号，git安装过了，如果没有<a class="btn-beautify outline" href="/post/hexo+github/"   title="可以在这里找到它们的安装步骤"><i class="far fa-hand-point-right"></i><span>可以在这里找到它们的安装步骤</span></a></p><h1 id="开始操作"><a href="#开始操作" class="headerlink" title="开始操作"></a>开始操作</h1><ol><li>创建一个仓库用来存放源码，这个没什么好说的，创建<code>public</code>不要勾选添加md文件，并且复制仓库的地址<br><img src="https://gcore.jsdelivr.net/gh/code-anan/image/20210617160804.png"></li><li><code>cmd</code>进入到你的根目录下<br><img src="https://gcore.jsdelivr.net/gh/code-anan/image/20210617160723.png"></li><li>这里我们全程使用的是git的常见指令</li></ol><ul><li>首先输入<code>git init</code>(建仓)</li><li>然后是<code>git add *</code>(添加代码到本地仓库)<br>出现<code>warning</code>是正常的<br><img src="https://gcore.jsdelivr.net/gh/code-anan/image/20210617161144.png"></li><li>然后输入<code>git commit -m &quot;first commit&quot;</code>(提交到本地缓存，引号是提交信息)<img src="https://gcore.jsdelivr.net/gh/code-anan/image/20210617161352.png"></li><li>（首次使用会提示：please tell me who you are）<br><img src="https://gcore.jsdelivr.net/gh/code-anan/image/20210617161501.png"><br>如果看到上面的提示，就在cmd里面继续敲这两行：（如果没有的话可以直接忽略）</li></ul><blockquote><p>git config –global user.email “<a href="mailto:&#120;&#x78;&#x78;&#64;&#x78;&#x78;&#120;&#x2e;&#99;&#111;&#x6d;">&#120;&#x78;&#x78;&#64;&#x78;&#x78;&#120;&#x2e;&#99;&#111;&#x6d;</a>(你的github邮箱)”   </p></blockquote><blockquote><p>git config –global user.name “你的github用户名”（敲完之后，继续上面的commit这一步）</p></blockquote><ul><li><p>第四步是<code>git remote add origin https://github.com/code-anan/hexo-codeResource.git</code>,注意替换成你的地址，第一步的时候应该复制下来了（这一步是提交到远程github上）</p></li><li><p>最后一步是<code>git push -u origin master </code>(push到master分支)<br>这一步由于github的连接情况很容易爆出各种错误，可以把它改成<code>git push -u origin master -f</code>强制上传，不过这样还是有可能上传失败，可以多试几次ヽ(￣▽￣)ﾉ</p><h1 id="大功告成"><a href="#大功告成" class="headerlink" title="大功告成"></a>大功告成</h1><p><img src="https://gcore.jsdelivr.net/gh/code-anan/image/20210617162145.png"><br>不用担心不小心丢失源码再也写不了博客了ヽ(￣▽￣)ﾉ</p><h1 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h1><ul><li><p>  git add -A  提交所有变化</p></li><li><p> git add -u  提交被修改(modified)和被删除(deleted)文件，不包括新文件(new)</p></li><li><p>git add .  提交新文件(new)和被修改(modified)文件，不包括被删除(deleted)文件</p></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
          <category> 上传 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 文章路径 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于文章路径显示的修改</title>
      <link href="post/rootchange/"/>
      <url>post/rootchange/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>我相信很多小伙伴跟我有一样的苦恼，那就是文章的路径显示问题，hexo默认给我们设置的路径是<code>年/月/日/标题</code>的格式，虽说是个小问题，但是感官很不好，例如下图<br><img src="https://gcore.jsdelivr.net/gh/code-anan/image/20210617134842.png"><br>感觉特别冗余而且有中文，如果你也想和我一样修改的话，那么本文会帮到你</p><h1 id="修改步骤"><a href="#修改步骤" class="headerlink" title="修改步骤"></a>修改步骤</h1><p>其实修改方式也很简单，找到项目根目录下的<code>_config.yml</code>,修改其中的<code>permalink</code>属性即可，修改如下</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">permalink:</span> <span class="string">:my/</span></span><br></pre></td></tr></table></figure><p>直接复制下来即可，然后打开某篇文章的md文件，在<code>fontmatter</code>部分添加<code>my</code>属性，值为我们想要他后面添加的路径，例如我这篇文章<img src="https://gcore.jsdelivr.net/gh/code-anan/image/20210617141415.png"><br>修改完之后，hexo三连即可查看到效果<br><img src="https://gcore.jsdelivr.net/gh/code-anan/image/20210617141514.png"><br>红框内即为我们修改的<code>my</code>的属性值，就是这么简单~唯一不好的地方就是以后写文章都需要添加<code>my</code>这个属性栏，但是也花不了多少时间(✪ω✪)</p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
          <category> 修改记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 文章路径 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TortoiseGit和Git使用教程</title>
      <link href="post/TortoiseGit/"/>
      <url>post/TortoiseGit/</url>
      
        <content type="html"><![CDATA[<h1 id="环境安装"><a href="#环境安装" class="headerlink" title="环境安装"></a>环境安装</h1><ol><li>首先git肯定是已经下载好的，如果没有需要先下载-&gt;<a href="https://git-scm.com/downloads">传送门</a></li><li>TortoiseGit的下载地址-&gt;<a href="https://tortoisegit.org/download/">传送门</a><br><img src="https://gcore.jsdelivr.net/gh/code-anan/image/20210617095428.png"><br>根据你的电脑情况下载对应的版本，并且下载对应的汉化包，下载完一直下一步就可以，<code>注意汉化包需要后安装</code></li><li>相关的配置</li></ol><ul><li>最好先选定一个文件夹用来存放以后Git的项目，例如在D盘下创建一个文件夹<br><img src="https://gcore.jsdelivr.net/gh/code-anan/image/20210617095758.png"></li><li>然后鼠标右键，进入<code>Settings</code>中<br><img src="https://gcore.jsdelivr.net/gh/code-anan/image/20210617100039.png"><br>汉化包下载之后，就可以看到语言栏有了中文，选择中文，应用确定菜单就都变成中文的了<img src="https://gcore.jsdelivr.net/gh/code-anan/image/20210617100136.png"></li><li>右键菜单可以根据你的习惯进行设置，本人设置如下<br><img src="https://gcore.jsdelivr.net/gh/code-anan/image/20210617100803.png"></li></ul><h1 id="使用TortoiseGit从Github上拉取代码"><a href="#使用TortoiseGit从Github上拉取代码" class="headerlink" title="使用TortoiseGit从Github上拉取代码"></a>使用TortoiseGit从Github上拉取代码</h1><p>上面的都配置好之后，在任意文件位置右键选择<code>Git克隆</code><img src="https://gcore.jsdelivr.net/gh/code-anan/image/20210617101121.png"><br>输入对应的<code>url</code>和要存放的目录位置即可，这里为了演示我选择克隆我的Github仓库<img src="https://gcore.jsdelivr.net/gh/code-anan/image/20210617101239.png"><br>找到你想要克隆的github上的项目<br><img src="https://gcore.jsdelivr.net/gh/code-anan/image/20210617102309.png"><br>复制链接到我们的<code>url</code>上<img src="https://gcore.jsdelivr.net/gh/code-anan/image/20210617102423.png"></p><p>点击确定<br><img src="https://gcore.jsdelivr.net/gh/code-anan/image/20210617102243.png"><br>可以看到正在从github上进行克隆到本地</p><p><img src="https://gcore.jsdelivr.net/gh/code-anan/image/20210617102347.png"><br>克隆成功</p><p><img src="https://gcore.jsdelivr.net/gh/code-anan/image/20210617102549.png"><br>可以在本地查看代码了</p><h1 id="创建本地版本库"><a href="#创建本地版本库" class="headerlink" title="创建本地版本库"></a>创建本地版本库</h1><p>在这里创建一个版本库<br><img src="https://gcore.jsdelivr.net/gh/code-anan/image/20210617104232.png"><br>注意这里不要勾选，直接确定<br><img src="https://gcore.jsdelivr.net/gh/code-anan/image/20210617104330.png"><br>然后就可以看到一个<code>.git</code>的文件夹（看不到打开隐藏的项目）<br><img src="https://gcore.jsdelivr.net/gh/code-anan/image/20210617104558.png"><br>这个文件夹创建了就可以，不需要我们修改</p>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TortoiseGit </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PLSQL Developer详细安装</title>
      <link href="post/PLSQL%20Developer/"/>
      <url>post/PLSQL%20Developer/</url>
      
        <content type="html"><![CDATA[<h1 id="官网下载"><a href="#官网下载" class="headerlink" title="官网下载"></a>官网下载</h1><p>官方地址下载即可：-&gt;<a href="https://www.allroundautomations.com/registered-plsqldev/">传送</a><br>这里我选择的是<code>12.0.7</code>64位版本的，点击<code>Download</code>下载即可<br><img src="https://gcore.jsdelivr.net/gh/code-anan/image/20210617084956.png"><br>然后这里也可以选择下载一个汉化包：<br><img src="https://gcore.jsdelivr.net/gh/code-anan/image/20210617085211.png"></p><h1 id="开始安装"><a href="#开始安装" class="headerlink" title="开始安装"></a>开始安装</h1><p>下载完之后，找到下载完的<code>msi</code>文件，双击打开<img src="https://gcore.jsdelivr.net/gh/code-anan/image/20210617085411.png"></p><p>进入到安装窗口：<br><img src="https://gcore.jsdelivr.net/gh/code-anan/image/20210617085518.png"></p><p>next：<br><img src="https://gcore.jsdelivr.net/gh/code-anan/image/20210617085721.png"><br>accept，继续next</p><p><img src="https://gcore.jsdelivr.net/gh/code-anan/image/20210617090145.png"><br>修改安装路径，不要安装到c盘，选择激活版，next</p><p><img src="https://gcore.jsdelivr.net/gh/code-anan/image/20210617090620.png"><br>分别输入Product code:<code>lelfnbaja3g7bdnecqswrgy4qw9x5hte6k</code><br>Serial number:<code>559078</code><br>Password:<code>xs374ca</code><br>license number: <code>565</code>(这里不需要)</p><p><img src="https://gcore.jsdelivr.net/gh/code-anan/image/20210617091105.png"><br>选择<code>complete</code>完整版，next</p><p><img src="https://gcore.jsdelivr.net/gh/code-anan/image/20210617091139.png"><br><code>install</code>安装即可<br>安装之后点击<code>Finish</code></p><h1 id="汉化包安装"><a href="#汉化包安装" class="headerlink" title="汉化包安装"></a>汉化包安装</h1><p>找到上一步下载的<code>汉化包</code>，找到<code>chinese.exe</code>,双击确定<br><img src="https://gcore.jsdelivr.net/gh/code-anan/image/20210617091946.png"></p><p><img src="https://gcore.jsdelivr.net/gh/code-anan/image/20210617092029.png"><br>默认会安装到工具一样的路径 直接下一步<br><img src="https://gcore.jsdelivr.net/gh/code-anan/image/20210617092202.png"><br>继续下一步<br><img src="https://gcore.jsdelivr.net/gh/code-anan/image/20210617092257.png"><br>勾上对号 完成~<br>打开桌面的上的<code>PLSQL Developer</code>可以看到已经汉化了<br><img src="https://gcore.jsdelivr.net/gh/code-anan/image/20210617092441.png"></p><h1 id="必要配置"><a href="#必要配置" class="headerlink" title="必要配置"></a>必要配置</h1><p>只是安装完是不能真正进行数据库的操作的，这里需要一个非常重要的配置不做的话你会发现无法连接到oracle数据库，步骤如下</p><ol><li><p>首先必须要下载必要的客户端-&gt;<a href="https://www.oracle.com/database/technologies/instant-client/winx64-64-downloads.html">传送门</a>,选择如下版本下载，如果没有oracle账户需要先注册一下，步骤也很简单<img src="https://gcore.jsdelivr.net/gh/code-anan/image/20210624142559.png"></p></li><li><p>下载完成并解压到一个目录不包含中文字符的目录，这里我放到了<code>D:\Oracle</code>下，图为解压后的文件<img src="https://gcore.jsdelivr.net/gh/code-anan/image/20210624142647.png"></p></li><li><p>打开plsql<img src="https://gcore.jsdelivr.net/gh/code-anan/image/20210714213145.png"><br>选中圈中的小图标进入到<code>首选项</code>：<img src="https://gcore.jsdelivr.net/gh/code-anan/image/20210715082741.png"><br>这两项需要分别填入oracle客户端实例以及对应的<code>oci.dll</code>文件<img src="https://gcore.jsdelivr.net/gh/code-anan/image/20210715082953.png"><br>然后点击<code>应用</code>-&gt;<code>确定</code>，然后关闭plsql重新进入，可以发现登录页也发生了一些变化，出现如下图表示真正的可以使用了<img src="https://gcore.jsdelivr.net/gh/code-anan/image/20210715083408.png"></p><h1 id="永久破解"><a href="#永久破解" class="headerlink" title="永久破解"></a>永久破解</h1><p>上面我们用的注册码试用期是30天的，找到<code>帮助</code>-&gt;<code>注册</code>，填写一个新的注册码<br><img src="https://gcore.jsdelivr.net/gh/code-anan/image/20210617093157.png"><br>产品序号：<code>4vkjwhfeh3ufnqnmpr9brvcuyujrx3n3le </code><br>序列号：<code>226959 </code><br>口令：<code>xs374ca</code><br><img src="https://gcore.jsdelivr.net/gh/code-anan/image/20210617092841.png"><br>可以看到服务合同9999年了 可以用到祖孙1000代~</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PLSQL Developer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用PicGo+Github作为你的免费图床</title>
      <link href="post/PicGo/"/>
      <url>post/PicGo/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><div class="note info simple"><p>其实我之前也没有使用图床的习惯，一直都是放在source/img目录下，这样的弊端就是图片加载速度慢，体验不好。后来看到花猪的文章感受到了图床的魅力，现在已经真香了ヽ(￣▽￣)ﾉ</p></div><h1 id="安装过程"><a href="#安装过程" class="headerlink" title="安装过程"></a>安装过程</h1><h2 id="下载PicGo"><a href="#下载PicGo" class="headerlink" title="下载PicGo"></a>下载PicGo</h2><p>下载地址：-&gt;<a href="https://github.com/Molunerfinn/PicGo/releases">传送</a>选择你喜欢的版本下载，建议不要太高版本，这里我使用的是<a href="https://github.com/Molunerfinn/PicGo/releases/download/v2.2.2/PicGo-Setup-2.2.2.exe">2.2.2版本</a>，安装步骤没什么好说的就是位置别选c盘就行，安装后的样子如下<br><img src="https://gcore.jsdelivr.net/gh/code-anan/image/20210616142836.png"></p><h2 id="github配置"><a href="#github配置" class="headerlink" title="github配置"></a>github配置</h2><ul><li><p>来到我们的<a href="https://github.com/">github</a>创建仓库，注意不要添加md文件，默认分支会改变<img src="https://gcore.jsdelivr.net/gh/code-anan/image/20210616144142.png"></p></li><li><p>然后是获取<code>token</code>,右上角点击头像-&gt;<code>Settings</code>-&gt;<code>Developer settings</code>-&gt;<code>Personal access tokens</code>-&gt;<code>Generate new token</code>，然后<code>note</code>中填写我们刚才创建的仓库名称<code>images</code><img src="https://gcore.jsdelivr.net/gh/code-anan/image/20210616145604.png">，并且勾选上<code>repo</code>，拉到最下面点击<code>Generate token</code>，这样就获取到我们的token了，点击复制<img src="https://gcore.jsdelivr.net/gh/code-anan/image/20210616150107.png"></p><h2 id="图床设置"><a href="#图床设置" class="headerlink" title="图床设置"></a>图床设置</h2><p>上面仓库 token获取到之后就可以回到我们的PicGo中，点击<code>图床设置</code>-&gt;<code>Github图床</code>，这下知道我们上面的步骤的作用了<br><img src="https://gcore.jsdelivr.net/gh/code-anan/image/20210616150307.png"></p></li><li><p>设定仓库名：GitHub用户名/仓库名(例如code-anan/images)</p></li><li><p>设定分支名：默认的master（前面不要添加md文件的情况下）</p></li><li><p>设定Token：上一步咱们获取到的复制上去</p></li><li><p>指定存储路径：建议不写，写的话也可以</p></li><li><p>设定自定义域名：建议写成<code>https://gcore.jsdelivr.net/gh/GitHub账号名/仓库名</code>(例如<code>https://gcore.jsdelivr.net/gh/code-anan/images</code>),当然不写的话也可以，写成这种格式可以jsDelivr加速<br>然后点击一下<code>设为默认图床</code>，<code>确定</code>就完成了所有的配置，下面找到拖动区放个图片试试吧，另外还有<code>PicGo设置</code>中可以开启上传前重命名，这样取个合适的名字容易分辨</p></li></ul><h1 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h1><p>我遇到的问题是上传之后发现相册区域图片不能预览，不过后来百度知道了解决方案，找到咱们的<code>hosts</code>文件，路径为<code>C:\Windows\System32\drivers\etc</code>,在最下方输入以下内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"># GitHub Start </span><br><span class="line">192.30.253.112 github.com </span><br><span class="line">192.30.253.119 gist.github.com</span><br><span class="line">151.101.184.133 assets-cdn.github.com</span><br><span class="line">151.101.184.133 raw.githubusercontent.com</span><br><span class="line">151.101.184.133 gist.githubusercontent.com</span><br><span class="line">151.101.184.133 cloud.githubusercontent.com</span><br><span class="line">151.101.184.133 camo.githubusercontent.com</span><br><span class="line">151.101.184.133 avatars0.githubusercontent.com</span><br><span class="line">151.101.184.133 avatars1.githubusercontent.com</span><br><span class="line">151.101.184.133 avatars2.githubusercontent.com</span><br><span class="line">151.101.184.133 avatars3.githubusercontent.com</span><br><span class="line">151.101.184.133 avatars4.githubusercontent.com</span><br><span class="line">151.101.184.133 avatars5.githubusercontent.com</span><br><span class="line">151.101.184.133 avatars6.githubusercontent.com</span><br><span class="line">151.101.184.133 avatars7.githubusercontent.com</span><br><span class="line">151.101.184.133 avatars8.githubusercontent.com</span><br></pre></td></tr></table></figure><p>修改之后就可以正常预览图片了，效果如下：<br><img src="https://gcore.jsdelivr.net/gh/code-anan/image/yulan.png"><br>如果你按照上述步骤还是不能预览，那么就是上面的github.com的ip需要修改，修改步骤参考&gt;<a class="btn-beautify outline" href="/post/hexo%20error/"   title="修改github.com的ip"><i class="far fa-hand-point-right"></i><span>修改github.com的ip</span></a><br>使用PicGo图床还有一个好处是我们使用它里面的图片时，直接点击红圈下方最左边的小图标就可以直接帮我们复制成<code>Markdown</code>的语法格式，然后粘贴就可以在文章里面使用图片了，到这里就大功告成了~</p><h1 id="特别注意"><a href="#特别注意" class="headerlink" title="特别注意"></a>特别注意</h1><p>当以上步骤配置完之后很可能会发现图片上传不上去，这时候建议关闭picGo然后等一会再进行上传</p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
          <category> 图床 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Github </tag>
            
            <tag> PicGo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Navicat Premium 12永久破解激活</title>
      <link href="post/navicat12/"/>
      <url>post/navicat12/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><div class="note info simple"><p>因为重装系统的原因，我之前好多用的软件都需要重新安装，所以这里记录一下<code>Navicat Premium 12</code>的安装。Navicat是一款非常好用的数据库管理工具，可以快速连接主流的数据库，而且界面简洁舒适，所以入股不亏。<br>PS：本文主要参考了<a href="https://www.jianshu.com/p/8741194da38a">简书中的一篇文章</a></p></div><h1 id="工具的下载"><a href="#工具的下载" class="headerlink" title="工具的下载"></a>工具的下载</h1><h2 id="Navicat-Premium-12的下载安装"><a href="#Navicat-Premium-12的下载安装" class="headerlink" title="Navicat Premium 12的下载安装"></a>Navicat Premium 12的下载安装</h2><p>下载地址就用他的网盘就可以：-&gt;<a href="https://pan.baidu.com/s/1ECFhCH2Sjly9Dzdzi24AtA">传送</a><br>提取码：<code>7f5o</code><br>下载完之后直接一步步的安装就可以，安装路径修改一下，不能安装<code>c盘</code>，大家都懂得，同时要<code>记住安装的路径，后面会用</code></p><h2 id="激活工具的下载"><a href="#激活工具的下载" class="headerlink" title="激活工具的下载"></a>激活工具的下载</h2><p>激活工具的下载地址咱们同样使用他的网盘地址就可以:-&gt;<a href="https://pan.baidu.com/s/1op3lpmD0ztIMGYgxH4qVSw">传送</a><br>提取码：<code>ybvu</code><br>下完之后解压一下就可以，也没什么好说的，解压之后就可以先到破解工具目录下<br><img src="https://gcore.jsdelivr.net/gh/code-anan/image/20220522130911.png"></p><h1 id="正式开始"><a href="#正式开始" class="headerlink" title="正式开始"></a>正式开始</h1><h2 id="输入指令"><a href="#输入指令" class="headerlink" title="输入指令"></a>输入指令</h2><p>上面我们找到了激活工具解压之后的<code>Navicat Premium 12破解补丁</code>，在这个路径下打开<code>cmd</code>,当然你也可以使用<code>cd</code>指令跳转，都可以，然后在这个目录下输入我们的第一句需要的指令：</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Patch.exe  &quot;D:\软件\Navicat Premium <span class="number">12</span>\navicat.exe&quot;</span><br></pre></td></tr></table></figure><p>记得把后面的路径改为你前面下载<code>Navicat Premium 12</code>的地址，不要憨憨全部复制，输入之后会看到命令行下面会出现<code>success!</code>的字样，表示这里没问题，然后输入下一条指令：</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Keygen.exe RegPrivateKey.pem</span><br></pre></td></tr></table></figure><p>然后它会让你输入用户名和组织名，这里随便写就可以，输入完用户名和组织名之后就会看到<code>SnKey</code>,这个待会会用到，如下图<br><img src="https://gcore.jsdelivr.net/gh/code-anan/image/20220522125835.png"></p><div class="note danger simple"><p>我这里截图第一条指令没出现<code>success</code>是因为我前面输过了，到这一步的时候不要关闭也不要退出</p></div><h2 id="断网"><a href="#断网" class="headerlink" title="断网"></a>断网</h2><p>到上面出现<code>SnKey</code>之后，现在要做的第一件事就是<code>断开网络连接!</code>，一定要断开网络连接，因为如果不断网后面不会出现手动激活</p><h2 id="打开navicat-exe"><a href="#打开navicat-exe" class="headerlink" title="打开navicat.exe"></a>打开navicat.exe</h2><p>断网之后，现在可以打开我们的<code>navicat.exe</code>，如果之前下载没另外设置的话是会有桌面快捷方式的，打开之后，有的会直接出现注册页面，有的不会出现，如果不出现的话我们可以自己点开注册页面，上方工具栏<code>帮助</code>-&gt;<code>注册</code>：<br><img src="https://gcore.jsdelivr.net/gh/code-anan/image/20220522131532.png"><code>键</code>中输入我们获取到的<code>SnKey</code></p><h2 id="手动激活"><a href="#手动激活" class="headerlink" title="手动激活"></a>手动激活</h2><p>输完键值，点击<code>激活</code>，可以看到手动激活（如果没有手动激活说明你没有断开网络连接），点击<code>手动激活</code>，可以看到<code>请求码</code>，复制下来到我们的dos窗口，回车两下可以获取到激活码(即下方的License)<br><img src="https://gcore.jsdelivr.net/gh/code-anan/image/20220522131007.png"><br>复制到我们的激活码框中即可<br><img src="https://gcore.jsdelivr.net/gh/code-anan/image/20220522130651.png"><br>大功告成~</p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Navicat Premium 12 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何给自己的博客添加一个个性化的域名</title>
      <link href="post/yuming/"/>
      <url>post/yuming/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><meta name="referrer" content="no-referrer" /><div class="note info simple"><p>该文章适用于已经搭建了hexo+github博客的小白，如果你和我一样觉得虽然咱们的博客部署到github上可以让别人也看到了，但是地址名字太没有特色，都是叫做<code>xxxx.github.io</code>，并且想要有用一个属于自己的域名，那么这篇文章会手把手教你购买配置成功</p></div><blockquote><p>该文章主要参考的是简书上的一篇文章：-&gt;<a href="https://zoyi14.smartapps.cn/pages/note/index?slug=e3169b681038&origin=share&hostname=baiduboxapp&_swebfr=1">传送</a></p></blockquote><h1 id="购买域名"><a href="#购买域名" class="headerlink" title="购买域名"></a>购买域名</h1><ol><li>登录到<a href="https://www.aliyun.com/">阿里云</a>,这里其实使用支付宝登录就可以在右上角，扫码就可以登录，不过需要短信验证（稍微麻烦一丢丢）</li><li>登陆成功之后，在右上角点进去需要个人认证一波<br><img src="https://gcore.jsdelivr.net/gh/code-anan/image/20220522131443.png"><div class="note info simple"><p>这里因为我已经个人实名认证过了所以是这个样子，没有认证的话点进去认证一下，填几个信息就好了</p></div></li><li>个人认证完之后记得点回来，不要迷路了，在上方的导航栏，找到<code>产品</code>-&gt;<code>域名注册</code>点进去<br><img src="https://gcore.jsdelivr.net/gh/code-anan/image/20220522125807.png"></li><li>进去之后就可以<code>搜索</code>自己喜欢的域名然后查找是否被注册了，如果被注册了那我们只能换一个域名（现在基本上短的域名要不然很贵要不就是被注册了），以我的为例：<br><img src="https://gcore.jsdelivr.net/gh/code-anan/image/20220522131338.png"></li><li>点进去之后找到没注册的，<code>加入清单</code>,选择之后点击右边的<code>域名清单</code>下的<code>立即结算</code><br><img src="https://gcore.jsdelivr.net/gh/code-anan/image/20220522131057.png"></li><li>来到了立即结算页面之后<br><img src="https://gcore.jsdelivr.net/gh/code-anan/image/20220522125735.png"><div class="note info simple"><p>需要注意的是这里必须完成邮箱真实性验证的模板才能正常使用，如果你没有填的话需要先填一波，包括邮箱，身份证照片啥的，填完之后大概半个小时（我当时是这么长时间应该）会审核通过，然后支付就可以购买了，对于不同的后缀价格不同，根据自己的需要选择购买，这里我是第一次购买所以.com的域名才23就买到了，一般.cn .cc首年只需要8元的样子，而且如果你第二年不续费它会自动停掉你也可以选择换新的域名，所以还是很划算的，到这一步就算买到你的域名了，下面开始进行配置</p></div></li></ol><h1 id="相关配置"><a href="#相关配置" class="headerlink" title="相关配置"></a>相关配置</h1><h2 id="解析配置"><a href="#解析配置" class="headerlink" title="解析配置"></a>解析配置</h2><p>购买完成之后右上角<code>控制台</code>-&gt;<code>产品与服务</code>-&gt;<code>域名</code>-&gt;<code>进入域名解析列表</code>，这时候就能看到我们的域名，点进去之后开始进行<code>解析设置</code><br><img src="https://gcore.jsdelivr.net/gh/code-anan/image/20220522131152.png"><br>通过<code>添加记录</code>添加如图所示的主机记录，下面的记录值为你的博客现在的地址，上面的记录之通过在Dos窗口<code>ping xxxx.github.io</code>就可以得到该站点的ip地址(下面以我的为例)<br><img src="https://gcore.jsdelivr.net/gh/code-anan/image/20220522130846.png"></p><h2 id="github配置"><a href="#github配置" class="headerlink" title="github配置"></a>github配置</h2><p>上面操作完了之后，还需要在咱们的<a href="https://github.com/">github</a>上配置一下，找到之前在github上创建的仓库，到<code>settings</code>下-&gt;<code>pages</code>中修改<code>Custom domain</code>为你购买的域名<br><img src="https://gcore.jsdelivr.net/gh/code-anan/image/20220522131130.png"><br><img src="https://gcore.jsdelivr.net/gh/code-anan/image/20220522130223.png"></p><h2 id="最后的配置"><a href="#最后的配置" class="headerlink" title="最后的配置"></a>最后的配置</h2><p>找到本地的博客目录，在根目录下<code>source</code>下创建一个文件<code>CNAME</code></p><div class="note danger simple"><p>文件名称必须全部大写，且注意文件没有后缀名！！！然后创建完之后编辑文件，使用你常用的<code>editplus</code>或者<code>notepad</code>都可以，文件内容写上你的域名，不需要任何空格缩进</p></div><p><img src="https://gcore.jsdelivr.net/gh/code-anan/image/20220522125123.png"><br>填完之后 重新清理部署一下就可以通过你的域名访问你的博客了(<em>^▽^</em>)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><h1 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h1><div class="note info simple"><p>给你的博客网站绑定了域名并不是说之前的地址不能访问了，依然可以通过之前的地址访问，只不过它会自动跳转到该域名</p></div>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
          <category> 域名 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 域名 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>为你的博客添加Daovoice--在线聊天功能</title>
      <link href="post/daovoice/"/>
      <url>post/daovoice/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer" /><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><div class="note info simple"><p><a href="https://butterfly.js.org/posts/ceeb73f/#%E5%9C%A8%E7%B6%AB%E8%81%8A%E5%A4%A9">官方</a>给我们推荐了几款在线聊天工具，本文旨在记录自己添加<code>Daovoice</code>的经验分享和遇到的问题，如果你想要使用别的聊天工具， 建议查看别人的文章</p></div><h1 id="添加步骤"><a href="#添加步骤" class="headerlink" title="添加步骤"></a>添加步骤</h1><h2 id="注册Daovoice账号"><a href="#注册Daovoice账号" class="headerlink" title="注册Daovoice账号"></a>注册Daovoice账号</h2><p>首先需要到<a href="https://account.daocloud.io/signin">DaoCloud</a>登录注册（很简单），登录之后需要进入到<a href="http://dashboard.daovoice.io/get-started">控制台</a></p><div class="note danger simple"><p>注意：从DaoCloud创建应用不可行，一定要从上面的控制台进入，创建你的应用，应用名称是后来点击小图标发起会话时会显示</p></div><p><img src="https://gcore.jsdelivr.net/gh/code-anan/image/20220522130116.png"></p><h2 id="控制台配置"><a href="#控制台配置" class="headerlink" title="控制台配置"></a>控制台配置</h2><p>进入到应用之后，点击左边的<code>应用设置</code>-&gt;<code>安装到网站</code>-&gt;<code>仅匿名用户</code>，下方会看到我们的<code>app_id</code>后面需要用到<br><img src="https://gcore.jsdelivr.net/gh/code-anan/image/20220522125509.png"></p><h2 id="聊天设置"><a href="#聊天设置" class="headerlink" title="聊天设置"></a>聊天设置</h2><p>找到<code>应用设置</code>-&gt;<code>聊天设置</code>，可以进行聊天小图标的设置，我的设置如下你也可以设置自己喜欢的颜色和位置<br><img src="https://gcore.jsdelivr.net/gh/code-anan/image/20220522130738.png"></p><h2 id="主题配置文件修改"><a href="#主题配置文件修改" class="headerlink" title="主题配置文件修改"></a>主题配置文件修改</h2><p>找到<code>主题配置文件</code>中的<code>daovoice</code>进行如下修改</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># daovoice</span></span><br><span class="line"><span class="comment"># http://daovoice.io/</span></span><br><span class="line"><span class="attr">daovoice:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">app_id:</span> <span class="string">xxxxx</span></span><br></pre></td></tr></table></figure><p><code>xxxxx</code>填上之前获取到的<code>appid</code>最后需要清理重启一下就可以看到效果了</p><h2 id="绑定微信"><a href="#绑定微信" class="headerlink" title="绑定微信"></a>绑定微信</h2><p>如果你想要在微信也能够及时的接收消息（如果不想在微信接收可以忽略此步），在控制台右上角<code>微信绑定</code>-&gt;<code>微信绑定</code>，关注个公众号，然后找到<code>通话通知</code>勾选上<code>微信</code>就可以了,这样就可以在微信公众号就可以及时的收到信息了(￣▽￣)~*<br><img src="https://gcore.jsdelivr.net/gh/code-anan/image/20220522125535.png"></p><h1 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h1><p>如果上述方法不行的话（这一步其实我没有用可以正常使用）还需要在<code>themes\butterfly\source\js</code>新建一个js文件，命名随意例如<code>daovoice.js</code>，内容填入</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params">i, s, o, g, r, a, m</span>) </span>&#123;</span><br><span class="line">    i[<span class="string">&quot;DaoVoiceObject&quot;</span>] = r;</span><br><span class="line">    i[r] = i[r] || <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        (i[r].q = i[r].q || []).push(<span class="built_in">arguments</span>)</span><br><span class="line">    &#125;, i[r].l = <span class="number">1</span> * <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">    a = s.createElement(o), m = s.getElementsByTagName(o)[<span class="number">0</span>];</span><br><span class="line">    a.async = <span class="number">1</span>;</span><br><span class="line">    a.src = g;</span><br><span class="line">    a.charset = <span class="string">&quot;utf-8&quot;</span>;</span><br><span class="line">    m.parentNode.insertBefore(a, m)</span><br><span class="line">&#125;)(<span class="built_in">window</span>, <span class="built_in">document</span>, <span class="string">&quot;script&quot;</span>, (<span class="string">&#x27;https:&#x27;</span> == <span class="built_in">document</span>.location.protocol ? <span class="string">&#x27;https:&#x27;</span> : <span class="string">&#x27;http:&#x27;</span>) + <span class="string">&quot;//widget.daovoice.io/widget/XXXXXXXX.js&quot;</span>, <span class="string">&quot;daovoice&quot;</span>);</span><br><span class="line">daovoice(<span class="string">&#x27;init&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">app_id</span>: <span class="string">&quot;XXXXXXXX&quot;</span></span><br><span class="line">&#125;);</span><br><span class="line">daovoice(<span class="string">&#x27;update&#x27;</span>);</span><br></pre></td></tr></table></figure><p>xxxxxxx为你的<code>appid</code>，然后在<code>主题配置文件</code>-&gt;<code>inject</code>-&gt;<code>bottom</code>引入刚才的<code>daovoice.js</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">bottom:</span></span><br><span class="line">   <span class="bullet">-</span> <span class="string">&lt;script</span> <span class="string">src=&quot;/js/daovoice.js&quot;&gt;&lt;/script&gt;</span></span><br></pre></td></tr></table></figure><p>最后清理重新启动就可以看到效果了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
          <category> 修改记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Daovoice </tag>
            
            <tag> 在线聊天 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>添加valine评论工具</title>
      <link href="post/valine/"/>
      <url>post/valine/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer" /><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote><p><a href="https://butterfly.js.org/">官方</a>文档推荐了好多种评论工具，其实大部分我都尝试过，但是有的是因为某些原因现在用不了了，还有的是不好配置导致了我花了好多时间也没搞好最后就放弃了，最后觉得valine还不错，而且还可以绑定qq邮箱及时通知，效果在下方就可以看到</p></blockquote><h1 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h1><h2 id="注册LeanCloud"><a href="#注册LeanCloud" class="headerlink" title="注册LeanCloud"></a>注册LeanCloud</h2><p>建议注册<a href="https://console.leancloud.app/register">LeanCloud国际版</a>,以后添加说说功能用国际版的会比较方便，注册完之后创建个应用选择开发版，名字无所谓<br><img src="https://gcore.jsdelivr.net/gh/code-anan/image/20220522130715.png"></p><h2 id="找到AppID和AppKey"><a href="#找到AppID和AppKey" class="headerlink" title="找到AppID和AppKey"></a>找到AppID和AppKey</h2><p>进入应用-&gt;设置-&gt;应用Keys，可以看到<code>ID</code>和<code>Key</code>,这个是后面需要用到的<br><img src="https://gcore.jsdelivr.net/gh/code-anan/image/20220522130629.png"></p><h2 id="修改主题配置文件"><a href="#修改主题配置文件" class="headerlink" title="修改主题配置文件"></a>修改主题配置文件</h2><ol><li><code>comments</code>下的<code>use</code>，一定要把前面的#注释打开，不然修改不成功<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">comments:</span></span><br><span class="line">  <span class="comment"># Up to two comments system, the first will be shown as default</span></span><br><span class="line">  <span class="comment"># Choose: Disqus/Disqusjs/Livere/Gitalk/Valine/Waline/Utterances/Facebook Comments/Twikoo</span></span><br><span class="line">  <span class="attr">use:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">Valine</span></span><br></pre></td></tr></table></figure></li><li>继续找到下面的<code>valine</code>配置：<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># valine</span></span><br><span class="line"><span class="comment"># https://valine.js.org</span></span><br><span class="line"><span class="attr">valine:</span></span><br><span class="line">  <span class="attr">appId:</span> <span class="string">xxxxxxxxxxxxxxxxxxxxxxxxxxxx</span></span><br><span class="line">  <span class="attr">appKey:</span> <span class="string">xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx</span></span><br><span class="line">  <span class="attr">pageSize:</span> <span class="number">20</span> <span class="comment"># comment list page size</span></span><br><span class="line">  <span class="attr">avatar:</span> <span class="string">wavatar</span> <span class="comment"># gravatar style https://valine.js.org/#/avatar</span></span><br><span class="line">  <span class="attr">lang:</span> <span class="string">en</span> <span class="comment"># i18n: zh-CN/zh-TW/en/ja</span></span><br><span class="line">  <span class="attr">placeholder:</span> <span class="string">ヾﾉ≧∀≦)o</span> <span class="string">来呀！快活呀！~</span> <span class="comment"># valine comment input placeholder (like: Please leave your footprints)</span></span><br><span class="line">  <span class="attr">guest_info:</span> <span class="string">nick,mail,link</span> <span class="comment"># valine comment header info (nick/mail/link)</span></span><br><span class="line">  <span class="attr">recordIP:</span> <span class="literal">false</span> <span class="comment"># Record reviewer IP</span></span><br><span class="line">  <span class="attr">serverURLs:</span> <span class="comment"># This configuration is suitable for domestic custom domain name users, overseas version will be automatically detected (no need to manually fill in)</span></span><br><span class="line">  <span class="attr">bg:</span> <span class="comment"># valine background</span></span><br><span class="line">  <span class="attr">emojiCDN:</span> <span class="comment"># emoji CDN</span></span><br><span class="line">  <span class="attr">enableQQ:</span> <span class="literal">false</span> <span class="comment"># enable the Nickname box to automatically get QQ Nickname and QQ Avatar</span></span><br><span class="line">  <span class="attr">requiredFields:</span> <span class="string">nick,mail</span> <span class="comment"># required fields (nick/mail)</span></span><br><span class="line">  <span class="attr">visitor:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">option:</span></span><br></pre></td></tr></table></figure><code>appId</code>和<code>appKey</code>依次改为你在<code>LeadCloud</code>中创建应用的<code>AppID</code>和<code>AppKey</code></li><li>重新清理启动一下查看效果<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure>效果图：<br><img src="https://gcore.jsdelivr.net/gh/code-anan/image/20220522125925.png"><div class="note info simple"><p>如果你不想随时接收到评论信息，到这里就完成了，在<a href="https://console.leancloud.app/apps/rW4vvYAhgn12o4M7UaOgUQAX-MdYXbMMI/">应用</a>中的<code>结构化数据</code>就可以查看评论</p></div></li></ol><h1 id="添加QQ邮箱提醒"><a href="#添加QQ邮箱提醒" class="headerlink" title="添加QQ邮箱提醒"></a>添加QQ邮箱提醒</h1><p>通过上面的步骤评论已经可以使用，但是为了能及时收到别人的评论，所以最好绑定自己的邮箱，这里我绑定的是<code>QQ</code>邮箱</p><ul><li>进入到咱们的<code>应用</code>-&gt;<code>云引擎</code>-&gt;<code>WEB</code>-&gt;<code>设置</code>-&gt;<code>添加新变量</code>，添加以下变量<br><img src="https://gcore.jsdelivr.net/gh/code-anan/image/20210618163012.png"><br>注意设置QQ邮箱的话需要<code>SMTP_PASS</code>，它的获取需要到QQ邮箱中的<code>设置</code>-&gt;<code>账户</code>中，找到<code>SMTP</code>进行开启，这里需要发个短信<img src="https://gcore.jsdelivr.net/gh/code-anan/image/20210618163240.png"></li></ul><p>获取并填写完之后，就可以来到部署页了<img src="https://gcore.jsdelivr.net/gh/code-anan/image/20210618163355.png"></p><p>这里我们选择git部署，仓库选择跟我一样的就可以，然后点击部署<br><img src="https://gcore.jsdelivr.net/gh/code-anan/image/20210618163512.png"></p><blockquote><p><code>https://github.com/lete114/Valine-Admin-Server.git</code></p></blockquote><p>最后在<code>安全中心</code>-&gt;<code>设置</code>中添加上自己的域名就可以正常接收邮件提醒了<br><img src="https://gcore.jsdelivr.net/gh/code-anan/image/20210618164039.png"><br>大功告成(￣▽￣)~*</p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
          <category> 修改记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> valine </tag>
            
            <tag> LeanCloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>页脚Footer设置游动的小鱼</title>
      <link href="post/footer/"/>
      <url>post/footer/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer" /><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><div class="note info simple"><p>此文主要参考<a href="https://cnhuazhu.gitee.io/">花猪</a>老哥的文章，但是老哥有一些细节没有说好，所以遇到了一些困难，好在最后解决了,效果在最下方的页脚</p></div><h1 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h1><ol><li>修改<code>footer.pug</code>：根目录下<code>\themes\butterfly\layout\includes\foot.pug</code>文件最后一行中添加以下代码：<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#jsi-flying-fish-container.container</span></span><br><span class="line">   <span class="string">script(src=&#x27;/js/fish.js&#x27;)</span></span><br><span class="line"><span class="string">style.</span></span><br><span class="line">   </span><br><span class="line">       <span class="string">@media</span> <span class="string">only</span> <span class="string">screen</span> <span class="string">and</span> <span class="string">(max-width:</span> <span class="string">767px)&#123;</span></span><br><span class="line">       <span class="comment">#sidebar_search_box input[type=text]&#123;width:calc(100% - 24px)&#125;</span></span><br><span class="line">    <span class="string">&#125;</span></span><br></pre></td></tr></table></figure><div class="note warning simple"><p>注意这里引入<code>fish.js</code>的路径是放在<code>/js</code>下，上面的代码最好直接复制不然容易出现有时候游动鱼儿效果失效的情况</p></div></li><li>首先必须引入需要的<code>jquery</code>文件，网址为<code>https://cdn.bootcss.com/jquery/3.4.1/jquery.min.js</code>，以及必要的鱼儿游动的js文件，网址为<code>https://gcore.jsdelivr.net/gh/xiabo2/CDN@latest/fish.js</code><div class="note warning simple"><p>虽然说可以在<code>bottom</code>下直接引入就可以，但是这里建议在浏览器打开这个地址把这两个文件下载到本地<code>\themes\butterfly\source\js</code>下，这里我为了方便把他们改名为<code>jq.js</code>，<code>fish.js</code>放到这个目录下面</p></div></li><li>修改<code>主题配置文件</code>，找到<code>inject</code>下的<code>bottom</code>,依次引入上一步保存的两个js文件<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">bottom:</span></span><br><span class="line">  <span class="comment"># - &lt;script src=&quot;xxxx&quot;&gt;&lt;/script&gt;</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">&lt;script</span> <span class="string">src=&quot;/js/jq.js&quot;&gt;&lt;/script&gt;</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">&lt;script</span> <span class="string">src=&quot;/js/fish.js&quot;&gt;&lt;/script&gt;</span></span><br></pre></td></tr></table></figure><div class="note danger simple"><p>特别注意：上面引入<code>jq.js</code>时，必须把他放在第一行，否则都会出现错误，像效果不出现等</p></div></li><li>为了页脚看起来更美观点，可以选择修改<code>foot.styl</code>:<code>\themes\butterfly\source\css\_layout</code>,直接全部替换为：<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#footer</span></span><br><span class="line">  <span class="attr">position:</span> <span class="string">relative</span></span><br><span class="line">  <span class="attr">background:</span> <span class="string">$light-blue</span></span><br><span class="line">  <span class="attr">background-attachment:</span> <span class="string">local</span></span><br><span class="line">  <span class="attr">background-position:</span> <span class="string">bottom</span></span><br><span class="line">  <span class="attr">background-size:</span> <span class="string">cover</span></span><br><span class="line"></span><br><span class="line">  <span class="string">if</span> <span class="string">hexo-config(&#x27;footer_bg&#x27;)</span> <span class="type">!=</span> <span class="literal">false</span></span><br><span class="line">    <span class="string">&amp;:before</span></span><br><span class="line">      <span class="attr">position:</span> <span class="string">absolute</span></span><br><span class="line">      <span class="attr">width:</span> <span class="number">100</span><span class="string">%</span></span><br><span class="line">      <span class="attr">height:</span> <span class="number">100</span><span class="string">%</span></span><br><span class="line">      <span class="attr">background-color:</span> <span class="string">alpha($dark-black,</span> <span class="number">.1</span><span class="string">)</span> </span><br><span class="line">      <span class="attr">content:</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#footer-wrap</span></span><br><span class="line">  <span class="attr">position:</span> <span class="string">absolute</span></span><br><span class="line">  <span class="attr">padding:</span> <span class="number">1.</span><span class="string">2rem</span> <span class="string">1rem</span> <span class="number">1.</span><span class="string">4rem</span></span><br><span class="line">  <span class="attr">color:</span> <span class="string">var(--light-grey)</span></span><br><span class="line">  <span class="attr">text-align:</span> <span class="string">center</span></span><br><span class="line">  <span class="attr">left:</span> <span class="number">0</span></span><br><span class="line">  <span class="attr">right:</span> <span class="number">0</span></span><br><span class="line">  <span class="attr">top:</span> <span class="number">0</span></span><br><span class="line">  <span class="attr">bottom:</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line">  <span class="string">a</span></span><br><span class="line">    <span class="attr">color:</span> <span class="string">var(--light-grey)</span></span><br><span class="line"></span><br><span class="line">    <span class="string">&amp;:hover</span></span><br><span class="line">      <span class="attr">text-decoration:</span> <span class="string">underline</span></span><br><span class="line"></span><br><span class="line">  <span class="string">.footer-separator</span></span><br><span class="line">    <span class="attr">margin:</span> <span class="number">0</span> <span class="string">.2rem</span></span><br><span class="line"></span><br><span class="line">  <span class="string">.icp-icon</span></span><br><span class="line">    <span class="attr">padding:</span> <span class="number">0</span> <span class="string">4px</span></span><br><span class="line">    <span class="attr">vertical-align:</span> <span class="string">text-bottom</span></span><br><span class="line">    <span class="attr">max-height:</span> <span class="number">1.</span><span class="string">4em</span></span><br><span class="line">    <span class="string">width</span> <span class="string">auto</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li>根据需要修改透明度（这里我没设置 根据自己的需求来），<code>\themes\butterfly\source\css</code>新建一个css文件，放入以下代码：<ul><li>页脚半透明<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 页脚半透明 */</span></span><br><span class="line"><span class="selector-id">#footer</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#000</span>;</span><br><span class="line">    <span class="attribute">border-top-right-radius</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">border-top-left-radius</span>: <span class="number">20px</span>;</span><br><span class="line">    backdrop-<span class="attribute">filter</span>: <span class="built_in">saturate</span>(<span class="number">100%</span>) <span class="built_in">blur</span>(<span class="number">5px</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#footer</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>,<span class="number">0</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#footer</span> <span class="selector-id">#footer-wrap</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="built_in">var</span>(--font-color);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#footer</span> <span class="selector-id">#footer-wrap</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="built_in">var</span>(--font-color);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>全透明<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 页脚透明 */</span></span><br><span class="line"><span class="selector-id">#footer</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: transparent <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>最后在依然是<code>主题配置文件</code>，inject下的head中引入上面创建的css文件：<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="string">&lt;link</span> <span class="string">rel=&quot;stylesheet&quot;</span> <span class="string">href=&quot;/css/xxx.css&quot;&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li></ol><h1 id="可能遇到的问题"><a href="#可能遇到的问题" class="headerlink" title="可能遇到的问题"></a>可能遇到的问题</h1><p>  问：为什么我第一次刷新的时候有效果，跳转页面就没有了？<br>  答：第一步修改<code>footer.png</code>中，引入<code>fish.js</code>时的路径为<code>&#39;/js/fish.js&#39;</code>,可能是少了/<br>  问：按照上面的修改了之后页脚背景图都消失了怎么回事？<br>  答：在inject下引入js文件时，必须把<code>jq.js</code>放到第一行，修改完再刷新重启试试</p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
          <category> 修改记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Footer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>引用阿里巴巴矢量库修改社交图标</title>
      <link href="post/iconfont/"/>
      <url>post/iconfont/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer" /><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><div class="note info simple"><p>通过查看<a href="https://butterfly.js.org/">官方文档</a>可以知道,一般修改设计图标的方法很简单，通过查找<a href="https://fontawesome.com/">Font Awesome</a>中小图标的代码直接引入就可以，但是<a href="https://fontawesome.com/">Font Awesome</a>里面的小图标非常有限所以很有可能不够我们用的，所以这里介绍我通过引入阿里矢量库引入的iconfont的方法，效果如下：</p></div><p><img src="https://gcore.jsdelivr.net/gh/code-anan/image/20220522130558.png"></p><h1 id="正式开始"><a href="#正式开始" class="headerlink" title="正式开始"></a>正式开始</h1><ol><li>进入<a href="https://www.iconfont.cn/">官网</a>并注册，其实也不用注册我都是用微博直接登录就可以，当然你想用github登录也行</li><li>找到自己喜欢的小图标，比如这里我搜索哔哩哔哩，找到一个选择添加入库<br><img src="https://gcore.jsdelivr.net/gh/code-anan/image/20220522125707.png"></li><li>添加之后可以看到右上角多了一个 点进去<code>添加至项目</code><br><img src="https://gcore.jsdelivr.net/gh/code-anan/image/20220522125056.png"><br><img src="https://gcore.jsdelivr.net/gh/code-anan/image/20220522125442.png"></li><li>没有项目的话创建一个命名随便，然后就可以在<code>我的项目</code>预览小图标了，这里它有三种生成方式，我们选择<code>Font class</code>,并点击<code>查看在线链接</code>如下<br><img src="https://gcore.jsdelivr.net/gh/code-anan/image/20220522130825.png"></li><li>点击这个代码会自动跳到css源码的地方，然后<code>ctrl+a</code>、<code>ctrl+c</code>全选复制后面要用的<br><img src="https://gcore.jsdelivr.net/gh/code-anan/image/20220522130037.png"></li><li>代码得到了，下面回到我们的项目中进行配置，从根目录下到<code>\themes\butterfly\source\css</code>目录中，新建一个<code>css文件</code>，命名为<code>iconfont.css</code>，起别的当然也可以，然后把刚才复制的代码粘贴进去<br><img src="https://gcore.jsdelivr.net/gh/code-anan/image/20220522125417.png"></li><li>这里需要注意的是默认引入的是没有颜色的而且最好修改一下大小 所以需要自己小小的调整一下css代码，我只改了大小和颜色，很简单<br><img src="https://gcore.jsdelivr.net/gh/code-anan/image/20220522125345.png"></li><li>最后修改一下<code>主题配置文件</code><br>这里的小图标的名字要和刚才<code>iconfont.css</code>的对应起来，前面是小图标的名字，中间的是点击之后跳转的路径，最后面是alt提示，根据你的需求调整即可<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">social:</span></span><br><span class="line">   <span class="comment"># fas fa-envelope: mailto:719603766@qq.com || Email</span></span><br><span class="line">   <span class="attr">iconfont icon-csdn:</span> <span class="string">https://blog.csdn.net/weixin_50980814?spm=1000.2115.3001.5343</span> <span class="string">||</span> <span class="string">CSDN</span></span><br><span class="line">   <span class="attr">iconfont icon-QQ:</span> <span class="string">/img/qq.png</span> <span class="string">||</span> <span class="string">QQ</span></span><br><span class="line">   <span class="attr">iconfont icon-weibo1:</span> <span class="string">https://weibo.com/u/6295811698</span> <span class="string">||</span> <span class="string">微博</span></span><br><span class="line">   <span class="attr">iconfont icon-weixin:</span> <span class="string">/img/add.JPG</span> <span class="string">||</span> <span class="string">微信</span></span><br><span class="line">   <span class="attr">iconfont icon-bilibili:</span> <span class="string">https://space.bilibili.com/294857924</span> <span class="string">||哔哩哔哩</span></span><br></pre></td></tr></table></figure>然后找到<code>inject</code>下面的head引入我们的css文件<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">inject:</span></span><br><span class="line">  <span class="attr">head:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&lt;link</span> <span class="string">rel=&quot;stylesheet&quot;</span> <span class="string">href=&quot;/css/iconfont.css&quot;&gt;</span></span><br></pre></td></tr></table></figure></li><li>最后清理生成重启一下即可<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure><h1 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h1></li></ol><div class="note info simple"><p>这一步到现在没遇到过问题，希望你是第一个（皮一下很开心）ヽ(￣▽￣)ﾉ</p></div>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
          <category> 修改记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> iconfont </tag>
            
            <tag> 社交图标 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于我的butterfly主题配置文件的一些修改</title>
      <link href="post/butterfly/"/>
      <url>post/butterfly/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer" /><blockquote><p>本文适用于没有Hexo基础的童鞋，这里我会介绍我主题配置文件所有的修改</p></blockquote><h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><p>首先是下载butterfly主题，在博客根目录下</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone <span class="literal">-b</span> master https://github.com/jerryc127/hexo<span class="literal">-theme</span><span class="literal">-butterfly</span>.git themes/butterfly</span><br></pre></td></tr></table></figure><p>如果出现克隆失败，把上面的<code>https</code>改成<code>git</code>即可，克隆完成之后根目录下的/themes中就会出现butterfly的主题文件夹，然后要把博客根目录下的<code>_config.yml</code>中的<code>theme</code>属性改成butterfly,<code>注意要有一个空格缩进</code>，改完之后：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure><p>在本地打开是否主题，这里很容易出现一大串数字没有界面这种情况需要安装pug以及 stylus 的渲染器，回到博客根目录下输入；</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo<span class="literal">-renderer</span><span class="literal">-pug</span> hexo<span class="literal">-renderer</span><span class="literal">-stylus</span> -<span class="literal">-save</span></span><br></pre></td></tr></table></figure><p>安装完成之后再次重复上面的那三个操作，然后出现下面这个图就表示主题配置成功了<img src="https://gcore.jsdelivr.net/gh/jerryc127/butterfly_cdn@2.1.0/top_img/index.jpg"></p><div class="note info simple"><p>这里强烈建议把主题下面的配置文件放到根目录下面，即把/themes/butterfly下的<code>_config.yml</code>文件改名为<code>_config.butterfly.yml</code>.这样主要是为了防止升级以后主题配置文件会被更换，当然如果不升级的话可以忽略,并且当他和博客的主题配置文件都存在时，主题配置文件优先级会更高</p></div><h1 id="修改记录"><a href="#修改记录" class="headerlink" title="修改记录"></a>修改记录</h1><p>当我们的主题更换好之后，除了写文章之外我们还会关心网站的样式，因为现在连导航栏都还没有，因此需要先了解hexo博客的一些必要概念：首先是首页菜单栏的添加，找到<code>主题配置文件</code>中最上方的<code>menu</code>属性，#在markdown文件中属于注释，把前面#删除进行修改：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">Home:</span> <span class="string">/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-home</span></span><br><span class="line"><span class="attr">Archives:</span> <span class="string">/archives/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-archive</span></span><br><span class="line"><span class="attr">Tags:</span> <span class="string">/tags/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-tags</span></span><br><span class="line"><span class="attr">Categories:</span> <span class="string">/categories/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-folder-open</span></span><br><span class="line"><span class="string">List||fas</span> <span class="attr">fa-list:</span></span><br><span class="line">  <span class="attr">Music:</span> <span class="string">/music/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-music</span></span><br><span class="line">  <span class="attr">Movie:</span> <span class="string">/movies/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-video</span></span><br><span class="line"><span class="attr">Link:</span> <span class="string">/link/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-link</span></span><br><span class="line"><span class="attr">About:</span> <span class="string">/about/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-heart</span></span><br></pre></td></tr></table></figure><p>其中<code>/xxx/</code>表示该页面的路径，后面的为<a href="https://fontawesome.com/">Font Awesome</a>的小图标，可以自己DIY，分享我修改后的文件为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">menu:</span><br><span class="line">   首页: / || fas fa-home</span><br><span class="line">   文章||fas fa-book:</span><br><span class="line">    时间轴: /archives/ || fas fa-archive</span><br><span class="line">    标签: /tags/ || fas fa-tags</span><br><span class="line">    分类: /categories/ || fas fa-folder-open</span><br><span class="line">   生活||fas fa-frog:</span><br><span class="line">    音乐: /music/ || fas fa-music</span><br><span class="line">    自言自语: /shuoshuo/ || fas fa-bug</span><br><span class="line">    留言板: /message/ || fas fa-sms</span><br><span class="line">   友链: /link/ || fas fa-link</span><br><span class="line">   关于我: /about/ || fas fa-heart</span><br></pre></td></tr></table></figure><div class="note info simple"><p>修改完之后记得要创建对应的界面：根目录下<code>hexo new page xxx</code>,<code>xxx</code>为你这里要添加的页面名称，修改menu最好复制，自己手写容易出错<code>.md</code>文件缩进很重要,</p></div><h2 id="代码样式"><a href="#代码样式" class="headerlink" title="代码样式"></a>代码样式</h2><p>依然是<code>主题配置文件</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">highlight_theme:</span> <span class="string">mac</span></span><br></pre></td></tr></table></figure><h3 id="代码复制"><a href="#代码复制" class="headerlink" title="代码复制"></a>代码复制</h3><p>依然是<code>主题配置文件</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">highlight_copy:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h3 id="代码块默认展开-关闭"><a href="#代码块默认展开-关闭" class="headerlink" title="代码块默认展开/关闭"></a>代码块默认展开/关闭</h3><p>依然是<code>主题配置文件</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">highlight_shrink:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><h3 id="代码换行"><a href="#代码换行" class="headerlink" title="代码换行"></a>代码换行</h3><p>依然是<code>主题配置文件</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">code_word_wrap:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h3 id="代码高度限制"><a href="#代码高度限制" class="headerlink" title="代码高度限制"></a>代码高度限制</h3><p>依然是<code>主题配置文件</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">highlight_height_limit:</span> <span class="number">200</span></span><br></pre></td></tr></table></figure><h2 id="社交图标"><a href="#社交图标" class="headerlink" title="社交图标"></a>社交图标</h2><p>这里我没有选择使用<a href="https://fontawesome.com/">Font Awesome</a>的小图标，如果想要使用它里面的小图标，直接在<code>主题配置文件</code>找到social进行修改即可，但是它里面的小图标数量有限，所以我选择了阿里巴巴矢量库来引用小图标，效果展示：<br><img src="https://gcore.jsdelivr.net/gh/code-anan/image/20220522130558.png"><br>修改方法为:-&gt;<a class="btn-beautify outline" href="/post/iconfont/"   title="引用阿里巴巴矢量库iconfont修改社交图标"><i class="far fa-hand-point-right"></i><span>引用阿里巴巴矢量库iconfont修改社交图标</span></a></p><h2 id="顶部图"><a href="#顶部图" class="headerlink" title="顶部图"></a>顶部图</h2><p>我的顶部图设置情况，依然是<code>主题配置文件</code>：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># The banner image of home page</span></span><br><span class="line"><span class="attr">index_img:</span> <span class="string">/img/background.jpg</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># If the banner of page not setting, it will show the top_img</span></span><br><span class="line"><span class="attr">default_top_img:</span> <span class="string">/img/default.jpg</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># The banner image of archive page</span></span><br><span class="line"><span class="attr">archive_img:</span> <span class="string">/img/about.jpg</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># If the banner of tag page not setting, it will show the top_img</span></span><br><span class="line"><span class="comment"># <span class="doctag">note:</span> tag page, not tags page (子標籤頁面的 top_img)</span></span><br><span class="line"><span class="attr">tag_img:</span>  <span class="string">&#x27;linear-gradient(20deg, #0062be, #925696, #cc426e, #fb0347)&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># The banner image of tag page</span></span><br><span class="line"><span class="comment"># format:</span></span><br><span class="line"><span class="comment">#  - tag name: xxxxx</span></span><br><span class="line"><span class="attr">tag_per_img:</span>  <span class="string">&#x27;linear-gradient(20deg, #0062be, #925696, #cc426e, #fb0347)&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># If the banner of category page not setting, it will show the top_img</span></span><br><span class="line"><span class="comment"># <span class="doctag">note:</span> category page, not categories page (子分類頁面的 top_img)</span></span><br><span class="line"><span class="attr">category_img:</span>  <span class="string">&#x27;linear-gradient(20deg, #0062be, #925696, #cc426e, #fb0347)&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># The banner image of category page</span></span><br><span class="line"><span class="comment"># format:</span></span><br><span class="line"><span class="comment">#  - category name: xxxxx</span></span><br><span class="line"><span class="attr">category_per_img:</span>  <span class="string">&#x27;linear-gradient(20deg, #0062be, #925696, #cc426e, #fb0347)&#x27;</span></span><br></pre></td></tr></table></figure><blockquote><p>emm这里就不展示具体的图了 总之修改顶部图可以在这里修改 图片路径可以为本地路径也可以是网络路径或者是这种渐变色的写法</p></blockquote><h2 id="Footer"><a href="#Footer" class="headerlink" title="Footer"></a>Footer</h2><p>可以看到我的页脚是可以自由飞舞的小鱼，这个设置主要是参考了<a href="https://cnhuazhu.gitee.io/2021/02/19/Hexo%E9%AD%94%E6%94%B9/Hexo%E9%A1%B5%E8%84%9A%E5%85%BB%E9%B1%BC%E6%95%88%E6%9E%9C/">花猪</a>老哥的博客，但是他有一些小细节没有处理好，所以我又单独写了一份，应该是比较完善的。<br>指路:-&gt;<a class="btn-beautify outline" href="/post/footer/"   title="页脚设置游动的小鱼"><i class="far fa-hand-point-right"></i><span>页脚设置游动的小鱼</span></a></p><h2 id="评论"><a href="#评论" class="headerlink" title="评论"></a>评论</h2><p>评论区域的添加耽误了我不少的时间，一开始设置的时候出现了各种问题，后来多方百度搜索最终决定使用<code>valine</code>,效果如图：<br><img src="https://gcore.jsdelivr.net/gh/code-anan/image/20220522125925.png"><br>修改方法：-&gt;<a class="btn-beautify outline" href="/post/valine/"   title="添加valine评论"><i class="far fa-hand-point-right"></i><span>添加valine评论</span></a></p><h2 id="在线聊天"><a href="#在线聊天" class="headerlink" title="在线聊天"></a>在线聊天</h2><p>我使用的是<code>daovoice</code>工具，也踩了不少坑，效果如图：<br><img src="https://gcore.jsdelivr.net/gh/code-anan/image/20220522130150.png"><br>修改方法：-&gt;<a class="btn-beautify outline" href="/post/daovoice/"   title="添加在线聊天工具Daovoice"><i class="far fa-hand-point-right"></i><span>添加在线聊天工具Daovoice</span></a></p><h2 id="本地搜索"><a href="#本地搜索" class="headerlink" title="本地搜索"></a>本地搜索</h2><ol><li>根目录下输入<code>npm install hexo-generator-search</code>下载需要的插件</li><li>修改主题配置文件：<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">local_search:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>这样就可以看到菜单栏多了一个搜索可以进行本地搜索：<img src="https://gcore.jsdelivr.net/gh/code-anan/image/20220522131033.png"><h2 id="鼠标点击效果"><a href="#鼠标点击效果" class="headerlink" title="鼠标点击效果"></a>鼠标点击效果</h2>直接修改<code>主题配置文件</code>即可<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">fireworks:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">zIndex:</span> <span class="number">9999</span> <span class="comment"># -1 or 9999</span></span><br><span class="line">  <span class="attr">mobile:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure>效果：<img src="https://gcore.jsdelivr.net/gh/code-anan/image/20220522130420.gif"><h2 id="标题前的小图标"><a href="#标题前的小图标" class="headerlink" title="标题前的小图标"></a>标题前的小图标</h2>修改<code>主题配置文件</code><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">beautify:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">field:</span> <span class="string">site</span> <span class="comment"># site/post</span></span><br><span class="line">  <span class="attr">title-prefix-icon:</span> <span class="string">&#x27;\f717&#x27;</span></span><br><span class="line">  <span class="attr">title-prefix-icon-color:</span> <span class="string">&quot;#F47466&quot;</span></span><br></pre></td></tr></table></figure><code>field</code>表示在全站（site）还是文章页（post）生效<br><code>title-prefix-icon</code>为你想要修改的图标样式，可以在<a href="https://fontawesome.com/">Font Awesome</a>中找到喜欢的小图标,例如<img src="https://gcore.jsdelivr.net/gh/code-anan/image/20220522125154.png">进行修改即可<br><code>title-prefix-icon-color</code>为小图标的样式<br>效果：<img src="https://gcore.jsdelivr.net/gh/code-anan/image/20220522131234.png"><h2 id="网站副标题"><a href="#网站副标题" class="headerlink" title="网站副标题"></a>网站副标题</h2>修改<code>主题配置文件</code><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">subtitle:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># Typewriter Effect (打字效果)</span></span><br><span class="line">  <span class="attr">effect:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># loop (循環打字)</span></span><br><span class="line">  <span class="attr">loop:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># source調用第三方服務</span></span><br><span class="line">  <span class="comment"># source: false 關閉調用</span></span><br><span class="line">  <span class="comment"># source: 1  調用搏天api的隨機語錄（簡體）</span></span><br><span class="line">  <span class="comment"># source: 2  調用一言網的一句話（簡體）</span></span><br><span class="line">  <span class="comment"># source: 3  調用一句網（簡體）</span></span><br><span class="line">  <span class="comment"># source: 4  調用今日詩詞（簡體）</span></span><br><span class="line">  <span class="comment"># subtitle 會先顯示 source , 再顯示 sub 的內容</span></span><br><span class="line">  <span class="attr">source:</span> <span class="number">1</span></span><br><span class="line">  <span class="comment"># 如果有英文逗號&#x27; , &#x27;,請使用轉義字元 &amp;#44;</span></span><br><span class="line">  <span class="comment"># 如果有英文雙引號&#x27; &quot; &#x27;,請使用轉義字元 &amp;quot;</span></span><br><span class="line">  <span class="comment"># 開頭不允許轉義字元，如需要，請把整個句子用雙引號包住</span></span><br><span class="line">  <span class="comment"># 如果關閉打字效果，subtitle只會顯示sub的第一行文字</span></span><br><span class="line">  <span class="attr">sub:</span></span><br><span class="line">   <span class="bullet">-</span> <span class="string">脑子是个好东西，希望你也有一个，但如果你胸大没有也行。</span></span><br><span class="line">   <span class="bullet">-</span> <span class="string">早睡早起身体好，不是一句口号，而是三个愿望</span></span><br><span class="line">   <span class="bullet">-</span> <span class="string">如果连我的情绪，都要我亲口告诉你，那和考试抄答案有什么区别？</span></span><br><span class="line">   <span class="bullet">-</span> <span class="string">我尝试着做一个有趣的人，后来却跑偏了，成了一个逗逼。</span></span><br><span class="line">   <span class="bullet">-</span> <span class="string">感情和头发一样，时间长了，都会分叉。</span></span><br></pre></td></tr></table></figure><div class="note info simple"><p>会先显示<code>source</code>里的内容，然后再展示<code>sub</code>中自己编辑的内容</p></div>效果：<img src="https://gcore.jsdelivr.net/gh/code-anan/image/20220522131259.png"><h2 id="snackbar弹窗"><a href="#snackbar弹窗" class="headerlink" title="snackbar弹窗"></a>snackbar弹窗</h2>修改<code>主题配置文件</code><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">snackbar:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">position:</span> <span class="string">bottom-left</span></span><br><span class="line">  <span class="attr">bg_light:</span> <span class="string">&#x27;#49b1f5&#x27;</span> <span class="comment">#light mode時彈窗背景</span></span><br><span class="line">  <span class="attr">bg_dark:</span> <span class="string">&#x27;#2d3035&#x27;</span> <span class="comment">#dark mode時彈窗背景</span></span><br></pre></td></tr></table></figure><div class="note info simple"><p>其实只是在边上显示了 开不开都无所谓</p></div><h2 id="Pjax"><a href="#Pjax" class="headerlink" title="Pjax"></a>Pjax</h2>据说是可以复加载相同的资源（css/js），  从而提升网页的加载速度。我修改的页面为：<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">pjax:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">exclude:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">/shuoshuo/</span></span><br></pre></td></tr></table></figure><h2 id="网站图标"><a href="#网站图标" class="headerlink" title="网站图标"></a>网站图标</h2><code>主题配置文件</code>的修改：<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Favicon（網站圖標）</span></span><br><span class="line"><span class="attr">favicon:</span> <span class="string">https://gcore.jsdelivr.net/gh/code-anan/image/蜘蛛网万圣节.png</span></span><br></pre></td></tr></table></figure><h2 id="友链魔改"><a href="#友链魔改" class="headerlink" title="友链魔改"></a>友链魔改</h2>这里我参考的花猪的文章:-&gt;<a href="https://cnhuazhu.gitee.io/2021/02/25/Hexo%E9%AD%94%E6%94%B9/Hexo%E4%BF%AE%E6%94%B9%E5%8F%8B%E9%93%BE%E7%95%8C%E9%9D%A2/">传送门</a><h2 id="添加说说"><a href="#添加说说" class="headerlink" title="添加说说"></a>添加说说</h2>这里我参考了<code>小嘉的部落格</code>-&gt;<a href="https://blog.imzjw.cn/posts/b74f504f/">传送门</a><h2 id="留言板"><a href="#留言板" class="headerlink" title="留言板"></a>留言板</h2>同样参考了<code>小嘉的部落格</code>-&gt;<a href="https://blog.imzjw.cn/posts/b74f504f/">传送门</a><h1 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h1><div class="note info simple"><p>该文章只是展示了我的博客修改了哪些内容，当然还有一些很琐碎的东西像头像修改啦之类的没有详细说明，如果你想都详细的改的话可以参考<a href="https://butterfly.js.org/posts/21cfbf15/">官方文档</a>,我的很多也都是参考他的文档，最后有任何问题欢迎在评论区告诉我(<em>^▽^</em>)</p></div></li></ol>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
          <category> 修改记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Butterfly </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>写博客文章必须掌握的Markdown基本语法</title>
      <link href="post/markdown/"/>
      <url>post/markdown/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer" /><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>上一篇文章说了如何使用Hexo+github搭建属于自己的个人博客网站，网站有了下一步肯定要开始写文章了，网站建立好以后可以看到它为我们自动创建了一个hello world的文章而且是以<code>.md</code>（即Markdown）格式的文章，所以要写好文章需要了解它的基本语法,不过在那之前我觉得还是先说说一下写博客使用的工具，我在一开始的时候是在<mark class="hl-label green">editplus</mark> 上进行编辑，但是后来发现容易出现分段的问题，后来在网上找了找写博客用哪些工具，有很多推荐的不过我使用的是hexo自带的工具（Hexo Admin管理插件工具），不过之后更推荐大家用typora了</p><h1 id="Hexo-Admin插件的安装"><a href="#Hexo-Admin插件的安装" class="headerlink" title="Hexo Admin插件的安装"></a>Hexo Admin插件的安装</h1><p>虽然说它是hexo自带的工具，但是这个插件还是需要自己安装的，找到自己的博客根目录下输入：</p><blockquote><p>npm install –save hexo-admin</p></blockquote><div class="note info simple"><p>看过有的帖子说最好加上密码保护，但是我觉得其实没有必要</p></div><p>安装好之后需要先启动<code>hexo s</code>然后在浏览器上输入<a href="http://localhost:4000/admin">http://localhost:4000/admin</a><br>就可以进入到这个管理界面，这里不仅可以编辑文章，管理界面，还可以在这里发布到远端，设置图片路径等，当然主要是可以编辑博客文章方便而且右端会动态的生成，缺点就是这里编辑内容的一切外挂标签不能动态展示，但是他会自动保存，所以再打开一个链接随时进行刷新就可以<img src="https://gcore.jsdelivr.net/gh/code-anan/image/20220522124957.png"><br>出现这个页面表示安装成功<code>1</code>可以新建文章 <code>2</code>可以开始编辑 感觉还是很方便的</p><h1 id="基础语法介绍"><a href="#基础语法介绍" class="headerlink" title="基础语法介绍"></a>基础语法介绍</h1><blockquote><p>知道了怎么新建文章之后 接下来就可以学习写文章了（当然不是教怎么写内容 内容要自己瞎编啦(<em>/ω＼</em>)）</p></blockquote><h2 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h2><p>hexo支持最多六级标题</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 这是一级标题</span></span><br><span class="line"><span class="section">## 这是二级标题</span></span><br><span class="line"><span class="section">### 这是三级标题</span></span><br><span class="line"><span class="section">#### 这是四级标题</span></span><br><span class="line"><span class="section">##### 这是五级标题</span></span><br><span class="line"><span class="section">###### 这是六级标题</span></span><br></pre></td></tr></table></figure><div class="note danger simple"><p>注意#后面一定要与内容保持缩进，否则不能生效，</p></div><p>效果：<br><img src="https://gcore.jsdelivr.net/gh/code-anan/image/20220522125639.png"></p><h2 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h2><p>字体这一块我感觉常用的就是斜体和加粗 其他的了解一下即可</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="strong">**这是加粗的文字**</span></span><br><span class="line"><span class="emphasis">*这是倾斜的文字*</span>`</span><br><span class="line"><span class="strong">**<span class="emphasis">*这是斜体加粗的文字<span class="strong">**<span class="emphasis">*</span></span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="emphasis"><span class="strong">~~这是加删除线的文字~~</span></span></span></span></span><br></pre></td></tr></table></figure><p>效果：<br><strong>这是加粗的文字</strong><br><em>这是倾斜的文字</em>`<br><em><strong>这是斜体加粗的文字</strong></em><br><del>这是加删除线的文字</del></p><h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><p>引用也挺常用的，下面有两种引用方式 ，语法如下：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="quote">&gt; 这是一个引用</span></span><br><span class="line">&#123;% blockquote David Levithan, Wide Awake %&#125;</span><br><span class="line">Do not just seek happiness for yourself. Seek happiness for all. Through kindness. Through mercy.</span><br><span class="line">&#123;% endblockquote %&#125;</span><br><span class="line">&gt;&gt; 引用还可以套引用</span><br><span class="line">&gt;&gt;&gt; 还可以再套</span><br></pre></td></tr></table></figure><p>效果：</p><blockquote><p>这是一个引用</p><blockquote><blockquote><p>Do not just seek happiness for yourself. Seek happiness for all. Through kindness. Through mercy.</p></blockquote><footer><strong>David Levithan</strong><cite>Wide Awake</cite></footer></blockquote><blockquote><p>引用还可以套引用</p><blockquote><p>还可以再套</p></blockquote></blockquote></blockquote><h2 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h2><p>三个或者三个以上的 - 或者 * 都可以。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line"><span class="section"><span class="strong">**<span class="emphasis">*</span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="section">-----</span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="section"><span class="strong">****</span><span class="strong">****</span><span class="strong">****</span><span class="strong">**</span></span></span></span></span><br></pre></td></tr></table></figure><p>效果：<img src="https://gcore.jsdelivr.net/gh/code-anan/image/20220522130324.png"><br>这里是<a href="https://butterfly.js.org/">butterfly</a>主题默认美化了 其他主题可能效果会不一样</p><h2 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h2><p>图片在文章中的引用方式应该是最普遍的 然后这里介绍三种引入图片的方式</p><ol><li><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">![<span class="string">图片alt</span>](<span class="link">图片地址 &#x27;&#x27;图片title&#x27;&#x27;</span>)</span><br><span class="line"></span><br><span class="line">图片alt就是显示在图片下面的文字，相当于对图片内容的解释。</span><br><span class="line">图片title是图片的标题，当鼠标移到图片上时显示的内容。title可加可不加</span><br></pre></td></tr></table></figure>图片地址可以为本地也可以为链接 ，例如：<figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![<span class="string">头像</span>](<span class="link">/img/avator.png &quot;头像&quot;</span>)</span><br></pre></td></tr></table></figure>效果：<br><img src="https://gcore.jsdelivr.net/gh/code-anan/image/20220522131323.png"></li><li>这种方式也是我喜欢用的方法<img>标签 回归html语法<figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;/img/avator.png&quot;</span> <span class="attr">width</span>=<span class="string">&quot;200px&quot;</span> <span class="attr">height</span>=<span class="string">&quot;200px&quot;</span>&gt;</span></span></span><br></pre></td></tr></table></figure>效果：还可以随意调整图片的大小 很适用<br><img src="https://gcore.jsdelivr.net/gh/code-anan/image/20220522124448.jpg"></li><li>hexo官方API提供的语法 感觉有点麻烦<figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% img [class names] /path/to/image [width] [height] &#x27;&quot;title text&quot; &quot;alt text&quot;&#x27; %&#125;</span><br></pre></td></tr></table></figure>感兴趣的可以看看 不演示了╮(╯▽╰)╭<blockquote><p>另外对于图片存放位置，一般放在source下新创一个img文件夹专门用来存放图片就行，对于图片图床的使用这里不介绍 有兴趣的可以去百度查查</p></blockquote><h2 id="超链接"><a href="#超链接" class="headerlink" title="超链接"></a>超链接</h2>除了markdown的语法 也可以用a标签组<figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">地址名称</span>](<span class="link">地址</span>)</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;超链接地址&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span>&gt;</span></span>超链接名<span class="xml"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span> </span><br></pre></td></tr></table></figure>实例：<figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">我的博客</span>](<span class="link">https://code-anan.github.io</span>)</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://code-anan.github.io&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span>&gt;</span></span>我的博客2<span class="xml"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span> </span><br></pre></td></tr></table></figure>效果：<a href="https://code-anan.github.io/">我的博客</a><br><a href="https://code-anan.github.io" target="_blank">我的博客2</a> </li></ol><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><h3 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h3><p>语法也很简单</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1.</span> 列表内容</span><br><span class="line"><span class="bullet">2.</span> 列表内容</span><br><span class="line"><span class="bullet">3.</span> 列表内容</span><br><span class="line">ps： .后面必须要有空格缩进 不然无效</span><br></pre></td></tr></table></figure><p>效果：</p><ol><li>列表内容</li><li>列表内容</li><li>列表内容<h3 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> 无序</span><br><span class="line"><span class="bullet">+</span> 无序</span><br><span class="line"><span class="bullet">*</span> 无序</span><br><span class="line">ps：同样要加空格缩进 这三个符号效果一样</span><br></pre></td></tr></table></figure>效果：</li></ol><ul><li>无序</li></ul><ul><li>无序</li></ul><ul><li>无序<h3 id="嵌套使用"><a href="#嵌套使用" class="headerlink" title="嵌套使用"></a>嵌套使用</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1.</span> 有序列表</span><br><span class="line"><span class="bullet">   +</span> 无序1</span><br><span class="line"><span class="bullet">   -</span> 无序2</span><br><span class="line"><span class="bullet">   *</span> 无序3</span><br></pre></td></tr></table></figure>效果：</li></ul><ol><li>有序列表<ul><li>无序1</li></ul><ul><li>无序2</li></ul><ul><li>无序3<h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">表头|表头|表头</span><br><span class="line">--|:--:|--:</span><br><span class="line">内容|内容|内容</span><br><span class="line">内容|内容|内容</span><br><span class="line"></span><br><span class="line">第二行分割表头和内容。</span><br><span class="line"><span class="bullet">-</span> 有一个就行，为了对齐，多加了几个</span><br><span class="line">文字默认居左</span><br><span class="line">-两边加：表示文字居中</span><br><span class="line">-右边加：表示文字居右</span><br><span class="line">注：原生的语法两边都要用 | 包起来。此处省略</span><br></pre></td></tr></table></figure>示例：<figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">姓名|年级|学号</span><br><span class="line">:---:|:---:|:---:</span><br><span class="line">lwl|17|1710241891</span><br><span class="line">xk|17|1710241892</span><br><span class="line">bxl|17|1710241893</span><br><span class="line">lxy|17|1710241381</span><br></pre></td></tr></table></figure>效果：</li></ul></li></ol><table><thead><tr><th align="center">姓名</th><th align="center">年级</th><th align="center">学号</th></tr></thead><tbody><tr><td align="center">lwl</td><td align="center">17</td><td align="center">1710241891</td></tr><tr><td align="center">xk</td><td align="center">17</td><td align="center">1710241892</td></tr><tr><td align="center">bxl</td><td align="center">17</td><td align="center">1710241893</td></tr><tr><td align="center">lxy</td><td align="center">17</td><td align="center">1710241381</td></tr></tbody></table><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><h3 id="单行代码"><a href="#单行代码" class="headerlink" title="单行代码"></a>单行代码</h3><p>两个反引号就可以</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="code">`我是单行代码`</span></span><br></pre></td></tr></table></figure><p>效果：<br><code>我是单行代码</code></p><h3 id="多行代码"><a href="#多行代码" class="headerlink" title="多行代码"></a>多行代码</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(<span class="code">```)</span></span><br><span class="line"><span class="code">   System.out.pribtln(&quot;I love you!&quot;)</span></span><br><span class="line"><span class="code">(```</span>)</span><br><span class="line">ps:小括号是为了防止编译  实际用代码块的时候去掉即可</span><br></pre></td></tr></table></figure><p>效果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.out.pribtln(<span class="string">&quot;I love you!&quot;</span>)</span><br></pre></td></tr></table></figure><h1 id="Butterfly主题常用的外挂标签"><a href="#Butterfly主题常用的外挂标签" class="headerlink" title="Butterfly主题常用的外挂标签"></a>Butterfly主题常用的外挂标签</h1><blockquote><p>如果你的主题不是butterfly 建议不要使用 可能会出错，主题更换的方式可以参考别的文章（づ￣3￣）づ╭❤～以下内容来自<a href="https://butterfly.js.org/posts/4aa8abbe/#Note-Bootstrap-Callout">jerry</a></p></blockquote><p>首先要修改<code>主题配置文件</code>即（/themes/butterfly目录下的_config.yml）这里建议把这个配置文件改名为<code>_config.butterfly.yml</code>并且放到博客的根目录下，如下图：<img src="https://gcore.jsdelivr.net/gh/code-anan/image/20220522130009.png"><br>并且进行以下修改：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">note:</span></span><br><span class="line">  <span class="comment"># Note tag style values:</span></span><br><span class="line">  <span class="comment">#  - simple    bs-callout old alert style. Default.</span></span><br><span class="line">  <span class="comment">#  - modern    bs-callout new (v2-v3) alert style.</span></span><br><span class="line">  <span class="comment">#  - flat      flat callout style with background, like on Mozilla or StackOverflow.</span></span><br><span class="line">  <span class="comment">#  - disabled  disable all CSS styles import of note tag.</span></span><br><span class="line">  <span class="attr">style:</span> <span class="string">simple</span></span><br><span class="line">  <span class="attr">icons:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">border_radius:</span> <span class="number">3</span></span><br><span class="line">  <span class="comment"># Offset lighter of background in % for modern and flat styles (modern: -12 | 12; flat: -18 | 6).</span></span><br><span class="line">  <span class="comment"># Offset also applied to label tag variables. This option can work with disabled note tag.</span></span><br><span class="line">  <span class="attr">light_bg_offset:</span> <span class="number">0</span></span><br></pre></td></tr></table></figure><h2 id="Note"><a href="#Note" class="headerlink" title="Note"></a>Note</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note simple %&#125;</span><br><span class="line">默認 提示塊標籤</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note default simple %&#125;</span><br><span class="line">default 提示塊標籤</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note primary simple %&#125;</span><br><span class="line">primary 提示塊標籤</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note success simple %&#125;</span><br><span class="line">success 提示塊標籤</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note info simple %&#125;</span><br><span class="line">info 提示塊標籤</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note warning simple %&#125;</span><br><span class="line">warning 提示塊標籤</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note danger simple %&#125;</span><br><span class="line">danger 提示塊標籤</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>效果：</p><div class="note simple"><p>默認 提示塊標籤</p></div><div class="note default simple"><p>default 提示塊標籤</p></div><div class="note primary simple"><p>primary 提示塊標籤</p></div><div class="note success simple"><p>success 提示塊標籤</p></div><div class="note info simple"><p>info 提示塊標籤</p></div><div class="note warning simple"><p>warning 提示塊標籤</p></div><div class="note danger simple"><p>danger 提示塊標籤</p></div><h2 id="Tabs"><a href="#Tabs" class="headerlink" title="Tabs"></a>Tabs</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tabs test1 %&#125;</span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"><span class="strong">**This is Tab 1.**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"><span class="strong">**This is Tab 2.**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"><span class="strong">**This is Tab 3.**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure><p>效果：</p><div class="tabs" id="test1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test1-1">test1 1</button></li><li class="tab"><button type="button" data-href="#test1-2">test1 2</button></li><li class="tab"><button type="button" data-href="#test1-3">test1 3</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test1-1"><p><strong>This is Tab 1.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test1-2"><p><strong>This is Tab 2.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test1-3"><p><strong>This is Tab 3.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="label"><a href="#label" class="headerlink" title="label"></a>label</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% label text color %&#125;</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">我是&#123;% label 蓝色的 blue %&#125;,你是&#123;% label 绿色的 green %&#125;</span><br></pre></td></tr></table></figure><p>效果：<br>我是<mark class="hl-label blue">蓝色的</mark> ,你是<mark class="hl-label green">绿色的</mark> </p><h2 id="Button"><a href="#Button" class="headerlink" title="Button"></a>Button</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#123;% btn [url],[text],[icon],[color] [style] [layout] [position] [size] %&#125;</span><br><span class="line"></span><br><span class="line">[url]         : 鏈接</span><br><span class="line">[text]        : 按鈕文字</span><br><span class="line">[icon]        : [可選] 圖標</span><br><span class="line">[color]       : [可選] 按鈕背景顔色(默認style時）</span><br><span class="line"><span class="code">                      按鈕字體和邊框顔色(outline時)</span></span><br><span class="line"><span class="code">                      default/blue/pink/red/purple/orange/green</span></span><br><span class="line"><span class="code">[style]       : [可選] 按鈕樣式 默認實心</span></span><br><span class="line"><span class="code">                      outline/留空</span></span><br><span class="line"><span class="code">[layout]      : [可選] 按鈕佈局 默認為line</span></span><br><span class="line"><span class="code">                      block/留空</span></span><br><span class="line"><span class="code">[position]    : [可選] 按鈕位置 前提是設置了layout為block 默認為左邊</span></span><br><span class="line"><span class="code">                      center/right/留空</span></span><br><span class="line"><span class="code">[size]        : [可選] 按鈕大小</span></span><br><span class="line"><span class="code">                      larger/留空</span></span><br><span class="line"><span class="code"></span></span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">This is my website, click the button &#123;% btn &#x27;https://butterfly.js.org/&#x27;,Butterfly %&#125;</span><br><span class="line">This is my website, click the button &#123;% btn &#x27;https://butterfly.js.org/&#x27;,Butterfly,far fa-hand-point-right %&#125;</span><br><span class="line">This is my website, click the button &#123;% btn &#x27;https://butterfly.js.org/&#x27;,Butterfly,,outline %&#125;</span><br><span class="line">This is my website, click the button &#123;% btn &#x27;https://butterfly.js.org/&#x27;,Butterfly,far fa-hand-point-right,outline %&#125;</span><br><span class="line">This is my website, click the button &#123;% btn &#x27;https://butterfly.js.org/&#x27;,Butterfly,far fa-hand-point-right,larger %&#125;</span><br></pre></td></tr></table></figure><p>效果：<br>This is my website, click the button <a class="btn-beautify " href="https://butterfly.js.org/"   title="Butterfly"><span>Butterfly</span></a><br>This is my website, click the button <a class="btn-beautify " href="https://butterfly.js.org/"   title="Butterfly"><i class="far fa-hand-point-right"></i><span>Butterfly</span></a><br>This is my website, click the button <a class="btn-beautify outline" href="https://butterfly.js.org/"   title="Butterfly"><span>Butterfly</span></a><br>This is my website, click the button <a class="btn-beautify outline" href="https://butterfly.js.org/"   title="Butterfly"><i class="far fa-hand-point-right"></i><span>Butterfly</span></a><br>This is my website, click the button <a class="btn-beautify larger" href="https://butterfly.js.org/"   title="Butterfly"><i class="far fa-hand-point-right"></i><span>Butterfly</span></a></p><blockquote><p>以上几个是我感觉常用的 如果还想了解其他的 欢迎访问<a href="https://butterfly.js.org/posts/4aa8abbe/#Note-Bootstrap-Callout">jetty的官方文档</a></p></blockquote><h1 id="温馨提示"><a href="#温馨提示" class="headerlink" title="温馨提示"></a>温馨提示</h1><div class="note simple"><p>以上的所有内容，仅仅是针对博客文章内容的介绍，对于博客的主题美化，还有文章的封面分类标签等会在其他文章中提到，有任何问题欢迎在评论区告诉我哦！</p></div>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
          <category> 文章语法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo+github搭建属于自己的私人博客网站</title>
      <link href="post/hexo+github/"/>
      <url>post/hexo+github/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer" /><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>能够看到这篇文章，说明你也已经对如何搭建个人博客有了一定的兴趣，阅读本文即可快速搭建起来。本文主要来源是B站<a href="https://space.bilibili.com/384068749?from=search&seid=6701903827907687402">羊哥</a>的教学视频，但是羊哥使用的是Mac操作系统，我的是<mark class="hl-label default">win10</mark> 而且我在安装的时候也遇到了一些问题，所以写下这篇文章，希望能够帮助跟我遇到一样问题的朋友，好了废话不多说，下面步入正题。</p><h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><ol><li><p>如果要部署到github上，那么需要先注册一个<a href="https://github.com/login">github账号</a></p></li><li><p>登录以后，创建一个新仓库：<br><img src="https://gcore.jsdelivr.net/gh/code-anan/image/20220522124619.jpg"><br><img src="https://gcore.jsdelivr.net/gh/code-anan/image/20220522124553.jpg"></p> <div class="note danger simple"><p>注意：仓库名称必须为 <mark class="hl-label green">用户名</mark> .github.io</p></div></li><li><p>由于Hexo都是基于Node的实现的，所以需要先下载:<a href="https://nodejs.org/en/">Node</a>,这里下载稳定版（LTS）即可，一直下一步就可以，同时他还会把后面需要的npm也自动安装好，下载好在Dos窗口（快捷键<mark class="hl-label pink">win+R</mark> ）测试:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node -v</span><br></pre></td></tr></table></figure><p>出现<mark class="hl-label pink">vxx.xx.x</mark> 表示安装正常</p></li><li><p>这里也可以选择安装淘宝的cnpm的管理器(据说是可以加快速度)：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install -g cnpm --registry=http://registry.npm.taobao.org</span><br><span class="line">cnpm -v</span><br></pre></td></tr></table></figure></li><li><p>然后开始安装Hexo框架</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cnpm install -g hexo-cli</span><br><span class="line">hexo -v</span><br></pre></td></tr></table></figure><h1 id="正式开始"><a href="#正式开始" class="headerlink" title="正式开始"></a>正式开始</h1></li><li><p>安装成功之后可以开始创建hexo项目</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init blog</span><br></pre></td></tr></table></figure><p>这里blog也可以改成你想要的名字，博客的配置文件等都会放在它的子目录下</p></li><li><p>创建好blog文件夹之后 需要进入到blog目录下<code>cd blog</code>然后输入<code>hexo s</code>,在浏览器上输入<mark class="hl-label default">localhost:4000</mark> 就可以查看本地博客了<img src="https://gcore.jsdelivr.net/gh/code-anan/image/20220522124802.jpg"></p></li><li><p>下面开始部署到github上，这样别人也可以访问我们的博客了：</p><ul><li>首先配置blog目录下的<mark class="hl-label default">_config.yml</mark> 文件，打开找到下面的代码修改为：<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">https://github.com/YourGithubName/YourGithubName.github.io.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure><div class="note danger simple"><p>上面代码中的<mark class="hl-label green">YourGithubName</mark> 改成你自己的<mark class="hl-label green">YourGithubName</mark> ，不要全部复制    </p></div></li><li>本地部署之后，下面就要正式开始部署到github上了，这里需要用到一个工具<a href="https://git-scm.com/downloads">git</a>,没下载的可以下载一下也很简单，下载安装之后会发现鼠标右键会多出来两项<img src="https://gcore.jsdelivr.net/gh/code-anan/image/20220522124839.jpg">然后还需要安装一个非常重要的插件，在blog目录下输入<code>cnpm install --save hexo-deployer-git</code>,把项目部署到github上需要用到。</li></ul></li><li><p>最后三步就完成了部署</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><p>在浏览器上输入<mark class="hl-label green">YourGithubName.github.io</mark> 就可以看到你的博客了<img src="https://gcore.jsdelivr.net/gh/code-anan/image/20210625155527.png"></p></li><li><p>本文只介绍基本的安装和部署，另外关于文章的语法和其他的主题设置等会在其他文章中介绍，如果遇到了任何问题欢迎和我交流</p><h1 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h1></li></ol><div class="note danger simple"><p>  经常遇到的问题是同步到github上时会出错，有一种原因是同步前没有<code>hexo clean</code>+<code>hexo g</code>，第二种是需要在<code>hexo d</code>之前需要再输入一遍github的邮箱和用户名，如果是128错误很可能是网络情况这时候建议使用uu加速器或者steam++</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.email xxx</span><br><span class="line">git config --global user.name xxx</span><br></pre></td></tr></table></figure><p>xxx分别填上你github的邮箱 github名称 再重试即可</p></div>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
          <category> 记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Github </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
